// Copyright 2023 Dolthub, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package output

import "testing"

func TestAlterCollation(t *testing.T) {
	tests := []QueryParses{
		//Parses("ALTER COLLATION name REFRESH VERSION"),
		//Parses("ALTER COLLATION name RENAME TO new_name"),
		//Parses("ALTER COLLATION name OWNER TO new_owner"),
		//Parses("ALTER COLLATION name OWNER TO CURRENT_ROLE"),
		//Parses("ALTER COLLATION name OWNER TO CURRENT_USER"),
		//Parses("ALTER COLLATION name OWNER TO SESSION_USER"),
		//Parses("ALTER COLLATION name SET SCHEMA new_schema"),
		Parses(`CREATE TABLE public.claim_cases (
    claim_case_id uuid DEFAULT gen_random_uuid() NOT NULL,
    code bpchar NOT NULL,
    event_dates character varying,
    diseases text,
    request_amount numeric,
    amount numeric,
    medical_provider_emails text,
    treatment_method text,
    diagnosis text,
    medical_provider_id uuid,
    medical_provider_name character varying,
    payment_account_name text,
    payment_account_number text,
    payment_bank_name text,
    payment_bank_branch text,
    payment_bank_city text,
    status character varying NOT NULL,
    insured_certificate_id uuid NOT NULL,
    insured_person_id uuid NOT NULL,
    claim_sequence character varying,
    medical_provider_phones text,
    is_jet boolean DEFAULT false,
    decision_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    deleted_at timestamp with time zone,
    insurer_id uuid,
    claim_number character varying DEFAULT '1'::character varying NOT NULL,
    benefit_type character varying NOT NULL,
    is_direct_billing boolean DEFAULT false NOT NULL,
    source character varying DEFAULT 'InsuredPersons'::character varying NOT NULL,
    user_role_id uuid,
    user_name text,
    event_date timestamp with time zone,
    admission_date timestamp with time zone,
    discharge_date timestamp with time zone,
    physical_examination_date timestamp with time zone,
    insurance_event character varying,
    tenant_id uuid DEFAULT '428d0815-d95b-4cfc-89af-9fca38585dcc'::uuid NOT NULL,
    bank_id uuid,
    created_by uuid,
    assessed_plan_balance_id uuid,
    agent_id uuid,
    challenge_abuse boolean DEFAULT false NOT NULL,
    updated_by uuid,
    insurer_refunded_at timestamp with time zone,
    disease_group_id uuid,
    beneficiary_id uuid,
    registered_at timestamp with time zone,
    assessment_started_at timestamp with time zone DEFAULT now() NOT NULL,
    grace_period_start_date timestamp with time zone,
    grace_period_end_date timestamp with time zone,
    doctor_name text,
    waiting_remarks text,
    treatment_completed_at timestamp with time zone,
    stp_status text DEFAULT 'NONE'::text NOT NULL,
    correspondence_emails_reference_id uuid,
    genesis_claim_id uuid,
    tat_in_seconds numeric,
    jsonb_copay_mechanism_result jsonb
);`),
		Parses(`COMMENT ON TABLE public.claim_cases IS 'Hồ sơ bồi thường';`),
		Parses(`CREATE FUNCTION public."checkClaimAccessible"(claim_case_row public.claim_cases) RETURNS boolean
    LANGUAGE sql STABLE
    AS $$
  SELECT CASE
    WHEN claim_case_row."stp_status" <> 'INITIALIZING' and claim_case_row."stp_status" <> 'RUNNING' THEN true
    ELSE false END
$$;`),
		Parses(`CREATE TABLE public.claim_case_payments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    claim_case_id uuid NOT NULL,
    national_health_insurance_amount numeric DEFAULT 0 NOT NULL,
    national_health_insurance_ratio numeric,
    requested_amount numeric,
    estimated_paid_amount numeric,
    co_payment_amount numeric,
    bonus_payment_amount numeric,
    actual_paid_amount numeric,
    tenant_id uuid DEFAULT '428d0815-d95b-4cfc-89af-9fca38585dcc'::uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    co_payment_ratio numeric,
    bonus_payment_ratio numeric,
    premium_debt_amount numeric,
    initial_premium_debt_amount numeric,
    applied_premium_debt_amount numeric,
    remaining_premium_debt_amount numeric,
    disallowed_amount numeric GENERATED ALWAYS AS ((requested_amount - estimated_paid_amount)) STORED,
    updated_by uuid,
    created_by uuid,
    non_paid_amount numeric,
    deductible_amount numeric,
    coverage_amount numeric,
    shortfall_amount numeric,
    custom_amount numeric,
    custom_amount_reason text,
    booking_amount numeric
);`),
		Parses(`CREATE TABLE public.claim_case_details (
    claim_case_detail_id uuid DEFAULT gen_random_uuid() NOT NULL,
    plan_insured_benefit_id uuid NOT NULL,
    request_amount numeric NOT NULL,
    paid_amount numeric NOT NULL,
    request_time numeric DEFAULT 1 NOT NULL,
    paid_time numeric DEFAULT 1 NOT NULL,
    total_paid_amount numeric NOT NULL,
    note text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    deleted_at timestamp with time zone,
    total_request_amount numeric,
    total_paid_amount_before_copay numeric,
    claim_case_id uuid NOT NULL,
    tenant_id uuid DEFAULT '428d0815-d95b-4cfc-89af-9fca38585dcc'::uuid NOT NULL,
    paid_from_date timestamp with time zone,
    paid_to_date timestamp with time zone,
    request_from_date timestamp with time zone,
    request_to_date timestamp with time zone,
    plan_id uuid,
    grace_period_start_date timestamp with time zone,
    insured_certificate_history_id uuid,
    non_paid_amount numeric,
    copay_amount numeric,
    coverage_amount numeric,
    shortfall_amount numeric,
    created_by uuid,
    updated_by uuid,
    deductible_amount numeric,
    is_magic boolean DEFAULT false NOT NULL,
    request_percentage numeric,
    paid_percentage numeric,
    assessed_time numeric DEFAULT '1'::numeric NOT NULL,
    payable_amount_per_unit_before_copay numeric DEFAULT '0'::numeric NOT NULL,
    payable_amount_per_unit numeric GENERATED ALWAYS AS (paid_amount) STORED
);`),
		Parses(`COMMENT ON TABLE public.claim_case_details IS 'Chi tiết bồi thường được thẩm định theo quyền lợi';`),
		Parses(`COMMENT ON COLUMN public.claim_case_details.copay_amount IS '% đồng chi trả';`),
		Parses(`COMMENT ON COLUMN public.claim_case_details.coverage_amount IS 'số tiền trong phạm vi bảo hiểm';`),
		Parses(`COMMENT ON COLUMN public.claim_case_details.shortfall_amount IS 'số tiền vượt hạn mức';`),
		Parses(`CREATE TABLE public.claim_case_payments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    claim_case_id uuid NOT NULL,
    national_health_insurance_amount numeric DEFAULT 0 NOT NULL,
    national_health_insurance_ratio numeric,
    requested_amount numeric,
    estimated_paid_amount numeric,
    co_payment_amount numeric,
    bonus_payment_amount numeric,
    actual_paid_amount numeric,
    tenant_id uuid DEFAULT '428d0815-d95b-4cfc-89af-9fca38585dcc'::uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    co_payment_ratio numeric,
    bonus_payment_ratio numeric,
    premium_debt_amount numeric,
    initial_premium_debt_amount numeric,
    applied_premium_debt_amount numeric,
    remaining_premium_debt_amount numeric,
    disallowed_amount numeric GENERATED ALWAYS AS ((requested_amount - estimated_paid_amount)) STORED,
    updated_by uuid,
    created_by uuid,
    non_paid_amount numeric,
    deductible_amount numeric,
    coverage_amount numeric,
    shortfall_amount numeric,
    custom_amount numeric,
    custom_amount_reason text,
    booking_amount numeric
);`),
	}
	RunTests(t, tests)
}
