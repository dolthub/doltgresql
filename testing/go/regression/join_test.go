// Copyright 2024 Dolthub, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package regression

import (
	"testing"

	"github.com/dolthub/go-mysql-server/sql"
)

func TestJoin(t *testing.T) {
	t.Skip()
	_ = RunTests(t, RegressionFileName_join)
}

func init() {
	RegisterRegressionFile(RegressionFile{
		RegressionFileName: RegressionFileName_join,
		DependsOn:          []RegressionFileName{RegressionFileName_test_setup, RegressionFileName_create_misc},
		Statements: []RegressionFileStatement{
			{
				Statement: `CREATE TABLE J1_TBL (
  i integer,
  j integer,
  t text
);`,
			},
			{
				Statement: `CREATE TABLE J2_TBL (
  i integer,
  k integer
);`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (1, 4, 'one');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (2, 3, 'two');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (3, 2, 'three');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (4, 1, 'four');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (5, 0, 'five');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (6, 6, 'six');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (7, 7, 'seven');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (8, 8, 'eight');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (0, NULL, 'zero');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (NULL, NULL, 'null');`,
			},
			{
				Statement: `INSERT INTO J1_TBL VALUES (NULL, 0, 'zero');`,
			},
			{
				Statement: `INSERT INTO J2_TBL VALUES (1, -1);`,
			},
			{
				Statement: `INSERT INTO J2_TBL VALUES (2, 2);`,
			},
			{
				Statement: `INSERT INTO J2_TBL VALUES (3, -3);`,
			},
			{
				Statement: `INSERT INTO J2_TBL VALUES (2, 4);`,
			},
			{
				Statement: `INSERT INTO J2_TBL VALUES (5, -5);`,
			},
			{
				Statement: `INSERT INTO J2_TBL VALUES (5, -5);`,
			},
			{
				Statement: `INSERT INTO J2_TBL VALUES (0, NULL);`,
			},
			{
				Statement: `INSERT INTO J2_TBL VALUES (NULL, NULL);`,
			},
			{
				Statement: `INSERT INTO J2_TBL VALUES (NULL, 0);`,
			},
			{
				Statement: `create temp table onerow();`,
			},
			{
				Statement: `insert into onerow default values;`,
			},
			{
				Statement: `analyze onerow;`,
			},
			{
				Statement: `SELECT *
  FROM J1_TBL AS tx;`,
				Results: []sql.Row{{1, 4, `one`}, {2, 3, `two`}, {3, 2, `three`}, {4, 1, `four`}, {5, 0, `five`}, {6, 6, `six`}, {7, 7, `seven`}, {8, 8, `eight`}, {0, ``, `zero`}, {``, ``, `null`}, {``, 0, `zero`}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL tx;`,
				Results: []sql.Row{{1, 4, `one`}, {2, 3, `two`}, {3, 2, `three`}, {4, 1, `four`}, {5, 0, `five`}, {6, 6, `six`}, {7, 7, `seven`}, {8, 8, `eight`}, {0, ``, `zero`}, {``, ``, `null`}, {``, 0, `zero`}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL AS t1 (a, b, c);`,
				Results: []sql.Row{{1, 4, `one`}, {2, 3, `two`}, {3, 2, `three`}, {4, 1, `four`}, {5, 0, `five`}, {6, 6, `six`}, {7, 7, `seven`}, {8, 8, `eight`}, {0, ``, `zero`}, {``, ``, `null`}, {``, 0, `zero`}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL t1 (a, b, c);`,
				Results: []sql.Row{{1, 4, `one`}, {2, 3, `two`}, {3, 2, `three`}, {4, 1, `four`}, {5, 0, `five`}, {6, 6, `six`}, {7, 7, `seven`}, {8, 8, `eight`}, {0, ``, `zero`}, {``, ``, `null`}, {``, 0, `zero`}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL t1 (a, b, c), J2_TBL t2 (d, e);`,
				Results: []sql.Row{{1, 4, `one`, 1, -1}, {2, 3, `two`, 1, -1}, {3, 2, `three`, 1, -1}, {4, 1, `four`, 1, -1}, {5, 0, `five`, 1, -1}, {6, 6, `six`, 1, -1}, {7, 7, `seven`, 1, -1}, {8, 8, `eight`, 1, -1}, {0, ``, `zero`, 1, -1}, {``, ``, `null`, 1, -1}, {``, 0, `zero`, 1, -1}, {1, 4, `one`, 2, 2}, {2, 3, `two`, 2, 2}, {3, 2, `three`, 2, 2}, {4, 1, `four`, 2, 2}, {5, 0, `five`, 2, 2}, {6, 6, `six`, 2, 2}, {7, 7, `seven`, 2, 2}, {8, 8, `eight`, 2, 2}, {0, ``, `zero`, 2, 2}, {``, ``, `null`, 2, 2}, {``, 0, `zero`, 2, 2}, {1, 4, `one`, 3, -3}, {2, 3, `two`, 3, -3}, {3, 2, `three`, 3, -3}, {4, 1, `four`, 3, -3}, {5, 0, `five`, 3, -3}, {6, 6, `six`, 3, -3}, {7, 7, `seven`, 3, -3}, {8, 8, `eight`, 3, -3}, {0, ``, `zero`, 3, -3}, {``, ``, `null`, 3, -3}, {``, 0, `zero`, 3, -3}, {1, 4, `one`, 2, 4}, {2, 3, `two`, 2, 4}, {3, 2, `three`, 2, 4}, {4, 1, `four`, 2, 4}, {5, 0, `five`, 2, 4}, {6, 6, `six`, 2, 4}, {7, 7, `seven`, 2, 4}, {8, 8, `eight`, 2, 4}, {0, ``, `zero`, 2, 4}, {``, ``, `null`, 2, 4}, {``, 0, `zero`, 2, 4}, {1, 4, `one`, 5, -5}, {2, 3, `two`, 5, -5}, {3, 2, `three`, 5, -5}, {4, 1, `four`, 5, -5}, {5, 0, `five`, 5, -5}, {6, 6, `six`, 5, -5}, {7, 7, `seven`, 5, -5}, {8, 8, `eight`, 5, -5}, {0, ``, `zero`, 5, -5}, {``, ``, `null`, 5, -5}, {``, 0, `zero`, 5, -5}, {1, 4, `one`, 5, -5}, {2, 3, `two`, 5, -5}, {3, 2, `three`, 5, -5}, {4, 1, `four`, 5, -5}, {5, 0, `five`, 5, -5}, {6, 6, `six`, 5, -5}, {7, 7, `seven`, 5, -5}, {8, 8, `eight`, 5, -5}, {0, ``, `zero`, 5, -5}, {``, ``, `null`, 5, -5}, {``, 0, `zero`, 5, -5}, {1, 4, `one`, 0, ``}, {2, 3, `two`, 0, ``}, {3, 2, `three`, 0, ``}, {4, 1, `four`, 0, ``}, {5, 0, `five`, 0, ``}, {6, 6, `six`, 0, ``}, {7, 7, `seven`, 0, ``}, {8, 8, `eight`, 0, ``}, {0, ``, `zero`, 0, ``}, {``, ``, `null`, 0, ``}, {``, 0, `zero`, 0, ``}, {1, 4, `one`, ``, ``}, {2, 3, `two`, ``, ``}, {3, 2, `three`, ``, ``}, {4, 1, `four`, ``, ``}, {5, 0, `five`, ``, ``}, {6, 6, `six`, ``, ``}, {7, 7, `seven`, ``, ``}, {8, 8, `eight`, ``, ``}, {0, ``, `zero`, ``, ``}, {``, ``, `null`, ``, ``}, {``, 0, `zero`, ``, ``}, {1, 4, `one`, ``, 0}, {2, 3, `two`, ``, 0}, {3, 2, `three`, ``, 0}, {4, 1, `four`, ``, 0}, {5, 0, `five`, ``, 0}, {6, 6, `six`, ``, 0}, {7, 7, `seven`, ``, 0}, {8, 8, `eight`, ``, 0}, {0, ``, `zero`, ``, 0}, {``, ``, `null`, ``, 0}, {``, 0, `zero`, ``, 0}},
			},
			{
				Statement: `SELECT t1.a, t2.e
  FROM J1_TBL t1 (a, b, c), J2_TBL t2 (d, e)
  WHERE t1.a = t2.d;`,
				Results: []sql.Row{{0, ``}, {1, -1}, {2, 2}, {2, 4}, {3, -3}, {5, -5}, {5, -5}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL CROSS JOIN J2_TBL;`,
				Results: []sql.Row{{1, 4, `one`, 1, -1}, {2, 3, `two`, 1, -1}, {3, 2, `three`, 1, -1}, {4, 1, `four`, 1, -1}, {5, 0, `five`, 1, -1}, {6, 6, `six`, 1, -1}, {7, 7, `seven`, 1, -1}, {8, 8, `eight`, 1, -1}, {0, ``, `zero`, 1, -1}, {``, ``, `null`, 1, -1}, {``, 0, `zero`, 1, -1}, {1, 4, `one`, 2, 2}, {2, 3, `two`, 2, 2}, {3, 2, `three`, 2, 2}, {4, 1, `four`, 2, 2}, {5, 0, `five`, 2, 2}, {6, 6, `six`, 2, 2}, {7, 7, `seven`, 2, 2}, {8, 8, `eight`, 2, 2}, {0, ``, `zero`, 2, 2}, {``, ``, `null`, 2, 2}, {``, 0, `zero`, 2, 2}, {1, 4, `one`, 3, -3}, {2, 3, `two`, 3, -3}, {3, 2, `three`, 3, -3}, {4, 1, `four`, 3, -3}, {5, 0, `five`, 3, -3}, {6, 6, `six`, 3, -3}, {7, 7, `seven`, 3, -3}, {8, 8, `eight`, 3, -3}, {0, ``, `zero`, 3, -3}, {``, ``, `null`, 3, -3}, {``, 0, `zero`, 3, -3}, {1, 4, `one`, 2, 4}, {2, 3, `two`, 2, 4}, {3, 2, `three`, 2, 4}, {4, 1, `four`, 2, 4}, {5, 0, `five`, 2, 4}, {6, 6, `six`, 2, 4}, {7, 7, `seven`, 2, 4}, {8, 8, `eight`, 2, 4}, {0, ``, `zero`, 2, 4}, {``, ``, `null`, 2, 4}, {``, 0, `zero`, 2, 4}, {1, 4, `one`, 5, -5}, {2, 3, `two`, 5, -5}, {3, 2, `three`, 5, -5}, {4, 1, `four`, 5, -5}, {5, 0, `five`, 5, -5}, {6, 6, `six`, 5, -5}, {7, 7, `seven`, 5, -5}, {8, 8, `eight`, 5, -5}, {0, ``, `zero`, 5, -5}, {``, ``, `null`, 5, -5}, {``, 0, `zero`, 5, -5}, {1, 4, `one`, 5, -5}, {2, 3, `two`, 5, -5}, {3, 2, `three`, 5, -5}, {4, 1, `four`, 5, -5}, {5, 0, `five`, 5, -5}, {6, 6, `six`, 5, -5}, {7, 7, `seven`, 5, -5}, {8, 8, `eight`, 5, -5}, {0, ``, `zero`, 5, -5}, {``, ``, `null`, 5, -5}, {``, 0, `zero`, 5, -5}, {1, 4, `one`, 0, ``}, {2, 3, `two`, 0, ``}, {3, 2, `three`, 0, ``}, {4, 1, `four`, 0, ``}, {5, 0, `five`, 0, ``}, {6, 6, `six`, 0, ``}, {7, 7, `seven`, 0, ``}, {8, 8, `eight`, 0, ``}, {0, ``, `zero`, 0, ``}, {``, ``, `null`, 0, ``}, {``, 0, `zero`, 0, ``}, {1, 4, `one`, ``, ``}, {2, 3, `two`, ``, ``}, {3, 2, `three`, ``, ``}, {4, 1, `four`, ``, ``}, {5, 0, `five`, ``, ``}, {6, 6, `six`, ``, ``}, {7, 7, `seven`, ``, ``}, {8, 8, `eight`, ``, ``}, {0, ``, `zero`, ``, ``}, {``, ``, `null`, ``, ``}, {``, 0, `zero`, ``, ``}, {1, 4, `one`, ``, 0}, {2, 3, `two`, ``, 0}, {3, 2, `three`, ``, 0}, {4, 1, `four`, ``, 0}, {5, 0, `five`, ``, 0}, {6, 6, `six`, ``, 0}, {7, 7, `seven`, ``, 0}, {8, 8, `eight`, ``, 0}, {0, ``, `zero`, ``, 0}, {``, ``, `null`, ``, 0}, {``, 0, `zero`, ``, 0}},
			},
			{
				Statement: `SELECT i, k, t
  FROM J1_TBL CROSS JOIN J2_TBL;`,
				ErrorString: `column reference "i" is ambiguous`,
			},
			{
				Statement: `SELECT t1.i, k, t
  FROM J1_TBL t1 CROSS JOIN J2_TBL t2;`,
				Results: []sql.Row{{1, -1, `one`}, {2, -1, `two`}, {3, -1, `three`}, {4, -1, `four`}, {5, -1, `five`}, {6, -1, `six`}, {7, -1, `seven`}, {8, -1, `eight`}, {0, -1, `zero`}, {``, -1, `null`}, {``, -1, `zero`}, {1, 2, `one`}, {2, 2, `two`}, {3, 2, `three`}, {4, 2, `four`}, {5, 2, `five`}, {6, 2, `six`}, {7, 2, `seven`}, {8, 2, `eight`}, {0, 2, `zero`}, {``, 2, `null`}, {``, 2, `zero`}, {1, -3, `one`}, {2, -3, `two`}, {3, -3, `three`}, {4, -3, `four`}, {5, -3, `five`}, {6, -3, `six`}, {7, -3, `seven`}, {8, -3, `eight`}, {0, -3, `zero`}, {``, -3, `null`}, {``, -3, `zero`}, {1, 4, `one`}, {2, 4, `two`}, {3, 4, `three`}, {4, 4, `four`}, {5, 4, `five`}, {6, 4, `six`}, {7, 4, `seven`}, {8, 4, `eight`}, {0, 4, `zero`}, {``, 4, `null`}, {``, 4, `zero`}, {1, -5, `one`}, {2, -5, `two`}, {3, -5, `three`}, {4, -5, `four`}, {5, -5, `five`}, {6, -5, `six`}, {7, -5, `seven`}, {8, -5, `eight`}, {0, -5, `zero`}, {``, -5, `null`}, {``, -5, `zero`}, {1, -5, `one`}, {2, -5, `two`}, {3, -5, `three`}, {4, -5, `four`}, {5, -5, `five`}, {6, -5, `six`}, {7, -5, `seven`}, {8, -5, `eight`}, {0, -5, `zero`}, {``, -5, `null`}, {``, -5, `zero`}, {1, ``, `one`}, {2, ``, `two`}, {3, ``, `three`}, {4, ``, `four`}, {5, ``, `five`}, {6, ``, `six`}, {7, ``, `seven`}, {8, ``, `eight`}, {0, ``, `zero`}, {``, ``, `null`}, {``, ``, `zero`}, {1, ``, `one`}, {2, ``, `two`}, {3, ``, `three`}, {4, ``, `four`}, {5, ``, `five`}, {6, ``, `six`}, {7, ``, `seven`}, {8, ``, `eight`}, {0, ``, `zero`}, {``, ``, `null`}, {``, ``, `zero`}, {1, 0, `one`}, {2, 0, `two`}, {3, 0, `three`}, {4, 0, `four`}, {5, 0, `five`}, {6, 0, `six`}, {7, 0, `seven`}, {8, 0, `eight`}, {0, 0, `zero`}, {``, 0, `null`}, {``, 0, `zero`}},
			},
			{
				Statement: `SELECT ii, tt, kk
  FROM (J1_TBL CROSS JOIN J2_TBL)
    AS tx (ii, jj, tt, ii2, kk);`,
				Results: []sql.Row{{1, `one`, -1}, {2, `two`, -1}, {3, `three`, -1}, {4, `four`, -1}, {5, `five`, -1}, {6, `six`, -1}, {7, `seven`, -1}, {8, `eight`, -1}, {0, `zero`, -1}, {``, `null`, -1}, {``, `zero`, -1}, {1, `one`, 2}, {2, `two`, 2}, {3, `three`, 2}, {4, `four`, 2}, {5, `five`, 2}, {6, `six`, 2}, {7, `seven`, 2}, {8, `eight`, 2}, {0, `zero`, 2}, {``, `null`, 2}, {``, `zero`, 2}, {1, `one`, -3}, {2, `two`, -3}, {3, `three`, -3}, {4, `four`, -3}, {5, `five`, -3}, {6, `six`, -3}, {7, `seven`, -3}, {8, `eight`, -3}, {0, `zero`, -3}, {``, `null`, -3}, {``, `zero`, -3}, {1, `one`, 4}, {2, `two`, 4}, {3, `three`, 4}, {4, `four`, 4}, {5, `five`, 4}, {6, `six`, 4}, {7, `seven`, 4}, {8, `eight`, 4}, {0, `zero`, 4}, {``, `null`, 4}, {``, `zero`, 4}, {1, `one`, -5}, {2, `two`, -5}, {3, `three`, -5}, {4, `four`, -5}, {5, `five`, -5}, {6, `six`, -5}, {7, `seven`, -5}, {8, `eight`, -5}, {0, `zero`, -5}, {``, `null`, -5}, {``, `zero`, -5}, {1, `one`, -5}, {2, `two`, -5}, {3, `three`, -5}, {4, `four`, -5}, {5, `five`, -5}, {6, `six`, -5}, {7, `seven`, -5}, {8, `eight`, -5}, {0, `zero`, -5}, {``, `null`, -5}, {``, `zero`, -5}, {1, `one`, ``}, {2, `two`, ``}, {3, `three`, ``}, {4, `four`, ``}, {5, `five`, ``}, {6, `six`, ``}, {7, `seven`, ``}, {8, `eight`, ``}, {0, `zero`, ``}, {``, `null`, ``}, {``, `zero`, ``}, {1, `one`, ``}, {2, `two`, ``}, {3, `three`, ``}, {4, `four`, ``}, {5, `five`, ``}, {6, `six`, ``}, {7, `seven`, ``}, {8, `eight`, ``}, {0, `zero`, ``}, {``, `null`, ``}, {``, `zero`, ``}, {1, `one`, 0}, {2, `two`, 0}, {3, `three`, 0}, {4, `four`, 0}, {5, `five`, 0}, {6, `six`, 0}, {7, `seven`, 0}, {8, `eight`, 0}, {0, `zero`, 0}, {``, `null`, 0}, {``, `zero`, 0}},
			},
			{
				Statement: `SELECT tx.ii, tx.jj, tx.kk
  FROM (J1_TBL t1 (a, b, c) CROSS JOIN J2_TBL t2 (d, e))
    AS tx (ii, jj, tt, ii2, kk);`,
				Results: []sql.Row{{1, 4, -1}, {2, 3, -1}, {3, 2, -1}, {4, 1, -1}, {5, 0, -1}, {6, 6, -1}, {7, 7, -1}, {8, 8, -1}, {0, ``, -1}, {``, ``, -1}, {``, 0, -1}, {1, 4, 2}, {2, 3, 2}, {3, 2, 2}, {4, 1, 2}, {5, 0, 2}, {6, 6, 2}, {7, 7, 2}, {8, 8, 2}, {0, ``, 2}, {``, ``, 2}, {``, 0, 2}, {1, 4, -3}, {2, 3, -3}, {3, 2, -3}, {4, 1, -3}, {5, 0, -3}, {6, 6, -3}, {7, 7, -3}, {8, 8, -3}, {0, ``, -3}, {``, ``, -3}, {``, 0, -3}, {1, 4, 4}, {2, 3, 4}, {3, 2, 4}, {4, 1, 4}, {5, 0, 4}, {6, 6, 4}, {7, 7, 4}, {8, 8, 4}, {0, ``, 4}, {``, ``, 4}, {``, 0, 4}, {1, 4, -5}, {2, 3, -5}, {3, 2, -5}, {4, 1, -5}, {5, 0, -5}, {6, 6, -5}, {7, 7, -5}, {8, 8, -5}, {0, ``, -5}, {``, ``, -5}, {``, 0, -5}, {1, 4, -5}, {2, 3, -5}, {3, 2, -5}, {4, 1, -5}, {5, 0, -5}, {6, 6, -5}, {7, 7, -5}, {8, 8, -5}, {0, ``, -5}, {``, ``, -5}, {``, 0, -5}, {1, 4, ``}, {2, 3, ``}, {3, 2, ``}, {4, 1, ``}, {5, 0, ``}, {6, 6, ``}, {7, 7, ``}, {8, 8, ``}, {0, ``, ``}, {``, ``, ``}, {``, 0, ``}, {1, 4, ``}, {2, 3, ``}, {3, 2, ``}, {4, 1, ``}, {5, 0, ``}, {6, 6, ``}, {7, 7, ``}, {8, 8, ``}, {0, ``, ``}, {``, ``, ``}, {``, 0, ``}, {1, 4, 0}, {2, 3, 0}, {3, 2, 0}, {4, 1, 0}, {5, 0, 0}, {6, 6, 0}, {7, 7, 0}, {8, 8, 0}, {0, ``, 0}, {``, ``, 0}, {``, 0, 0}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL CROSS JOIN J2_TBL a CROSS JOIN J2_TBL b;`,
				Results: []sql.Row{{1, 4, `one`, 1, -1, 1, -1}, {1, 4, `one`, 1, -1, 2, 2}, {1, 4, `one`, 1, -1, 3, -3}, {1, 4, `one`, 1, -1, 2, 4}, {1, 4, `one`, 1, -1, 5, -5}, {1, 4, `one`, 1, -1, 5, -5}, {1, 4, `one`, 1, -1, 0, ``}, {1, 4, `one`, 1, -1, ``, ``}, {1, 4, `one`, 1, -1, ``, 0}, {2, 3, `two`, 1, -1, 1, -1}, {2, 3, `two`, 1, -1, 2, 2}, {2, 3, `two`, 1, -1, 3, -3}, {2, 3, `two`, 1, -1, 2, 4}, {2, 3, `two`, 1, -1, 5, -5}, {2, 3, `two`, 1, -1, 5, -5}, {2, 3, `two`, 1, -1, 0, ``}, {2, 3, `two`, 1, -1, ``, ``}, {2, 3, `two`, 1, -1, ``, 0}, {3, 2, `three`, 1, -1, 1, -1}, {3, 2, `three`, 1, -1, 2, 2}, {3, 2, `three`, 1, -1, 3, -3}, {3, 2, `three`, 1, -1, 2, 4}, {3, 2, `three`, 1, -1, 5, -5}, {3, 2, `three`, 1, -1, 5, -5}, {3, 2, `three`, 1, -1, 0, ``}, {3, 2, `three`, 1, -1, ``, ``}, {3, 2, `three`, 1, -1, ``, 0}, {4, 1, `four`, 1, -1, 1, -1}, {4, 1, `four`, 1, -1, 2, 2}, {4, 1, `four`, 1, -1, 3, -3}, {4, 1, `four`, 1, -1, 2, 4}, {4, 1, `four`, 1, -1, 5, -5}, {4, 1, `four`, 1, -1, 5, -5}, {4, 1, `four`, 1, -1, 0, ``}, {4, 1, `four`, 1, -1, ``, ``}, {4, 1, `four`, 1, -1, ``, 0}, {5, 0, `five`, 1, -1, 1, -1}, {5, 0, `five`, 1, -1, 2, 2}, {5, 0, `five`, 1, -1, 3, -3}, {5, 0, `five`, 1, -1, 2, 4}, {5, 0, `five`, 1, -1, 5, -5}, {5, 0, `five`, 1, -1, 5, -5}, {5, 0, `five`, 1, -1, 0, ``}, {5, 0, `five`, 1, -1, ``, ``}, {5, 0, `five`, 1, -1, ``, 0}, {6, 6, `six`, 1, -1, 1, -1}, {6, 6, `six`, 1, -1, 2, 2}, {6, 6, `six`, 1, -1, 3, -3}, {6, 6, `six`, 1, -1, 2, 4}, {6, 6, `six`, 1, -1, 5, -5}, {6, 6, `six`, 1, -1, 5, -5}, {6, 6, `six`, 1, -1, 0, ``}, {6, 6, `six`, 1, -1, ``, ``}, {6, 6, `six`, 1, -1, ``, 0}, {7, 7, `seven`, 1, -1, 1, -1}, {7, 7, `seven`, 1, -1, 2, 2}, {7, 7, `seven`, 1, -1, 3, -3}, {7, 7, `seven`, 1, -1, 2, 4}, {7, 7, `seven`, 1, -1, 5, -5}, {7, 7, `seven`, 1, -1, 5, -5}, {7, 7, `seven`, 1, -1, 0, ``}, {7, 7, `seven`, 1, -1, ``, ``}, {7, 7, `seven`, 1, -1, ``, 0}, {8, 8, `eight`, 1, -1, 1, -1}, {8, 8, `eight`, 1, -1, 2, 2}, {8, 8, `eight`, 1, -1, 3, -3}, {8, 8, `eight`, 1, -1, 2, 4}, {8, 8, `eight`, 1, -1, 5, -5}, {8, 8, `eight`, 1, -1, 5, -5}, {8, 8, `eight`, 1, -1, 0, ``}, {8, 8, `eight`, 1, -1, ``, ``}, {8, 8, `eight`, 1, -1, ``, 0}, {0, ``, `zero`, 1, -1, 1, -1}, {0, ``, `zero`, 1, -1, 2, 2}, {0, ``, `zero`, 1, -1, 3, -3}, {0, ``, `zero`, 1, -1, 2, 4}, {0, ``, `zero`, 1, -1, 5, -5}, {0, ``, `zero`, 1, -1, 5, -5}, {0, ``, `zero`, 1, -1, 0, ``}, {0, ``, `zero`, 1, -1, ``, ``}, {0, ``, `zero`, 1, -1, ``, 0}, {``, ``, `null`, 1, -1, 1, -1}, {``, ``, `null`, 1, -1, 2, 2}, {``, ``, `null`, 1, -1, 3, -3}, {``, ``, `null`, 1, -1, 2, 4}, {``, ``, `null`, 1, -1, 5, -5}, {``, ``, `null`, 1, -1, 5, -5}, {``, ``, `null`, 1, -1, 0, ``}, {``, ``, `null`, 1, -1, ``, ``}, {``, ``, `null`, 1, -1, ``, 0}, {``, 0, `zero`, 1, -1, 1, -1}, {``, 0, `zero`, 1, -1, 2, 2}, {``, 0, `zero`, 1, -1, 3, -3}, {``, 0, `zero`, 1, -1, 2, 4}, {``, 0, `zero`, 1, -1, 5, -5}, {``, 0, `zero`, 1, -1, 5, -5}, {``, 0, `zero`, 1, -1, 0, ``}, {``, 0, `zero`, 1, -1, ``, ``}, {``, 0, `zero`, 1, -1, ``, 0}, {1, 4, `one`, 2, 2, 1, -1}, {1, 4, `one`, 2, 2, 2, 2}, {1, 4, `one`, 2, 2, 3, -3}, {1, 4, `one`, 2, 2, 2, 4}, {1, 4, `one`, 2, 2, 5, -5}, {1, 4, `one`, 2, 2, 5, -5}, {1, 4, `one`, 2, 2, 0, ``}, {1, 4, `one`, 2, 2, ``, ``}, {1, 4, `one`, 2, 2, ``, 0}, {2, 3, `two`, 2, 2, 1, -1}, {2, 3, `two`, 2, 2, 2, 2}, {2, 3, `two`, 2, 2, 3, -3}, {2, 3, `two`, 2, 2, 2, 4}, {2, 3, `two`, 2, 2, 5, -5}, {2, 3, `two`, 2, 2, 5, -5}, {2, 3, `two`, 2, 2, 0, ``}, {2, 3, `two`, 2, 2, ``, ``}, {2, 3, `two`, 2, 2, ``, 0}, {3, 2, `three`, 2, 2, 1, -1}, {3, 2, `three`, 2, 2, 2, 2}, {3, 2, `three`, 2, 2, 3, -3}, {3, 2, `three`, 2, 2, 2, 4}, {3, 2, `three`, 2, 2, 5, -5}, {3, 2, `three`, 2, 2, 5, -5}, {3, 2, `three`, 2, 2, 0, ``}, {3, 2, `three`, 2, 2, ``, ``}, {3, 2, `three`, 2, 2, ``, 0}, {4, 1, `four`, 2, 2, 1, -1}, {4, 1, `four`, 2, 2, 2, 2}, {4, 1, `four`, 2, 2, 3, -3}, {4, 1, `four`, 2, 2, 2, 4}, {4, 1, `four`, 2, 2, 5, -5}, {4, 1, `four`, 2, 2, 5, -5}, {4, 1, `four`, 2, 2, 0, ``}, {4, 1, `four`, 2, 2, ``, ``}, {4, 1, `four`, 2, 2, ``, 0}, {5, 0, `five`, 2, 2, 1, -1}, {5, 0, `five`, 2, 2, 2, 2}, {5, 0, `five`, 2, 2, 3, -3}, {5, 0, `five`, 2, 2, 2, 4}, {5, 0, `five`, 2, 2, 5, -5}, {5, 0, `five`, 2, 2, 5, -5}, {5, 0, `five`, 2, 2, 0, ``}, {5, 0, `five`, 2, 2, ``, ``}, {5, 0, `five`, 2, 2, ``, 0}, {6, 6, `six`, 2, 2, 1, -1}, {6, 6, `six`, 2, 2, 2, 2}, {6, 6, `six`, 2, 2, 3, -3}, {6, 6, `six`, 2, 2, 2, 4}, {6, 6, `six`, 2, 2, 5, -5}, {6, 6, `six`, 2, 2, 5, -5}, {6, 6, `six`, 2, 2, 0, ``}, {6, 6, `six`, 2, 2, ``, ``}, {6, 6, `six`, 2, 2, ``, 0}, {7, 7, `seven`, 2, 2, 1, -1}, {7, 7, `seven`, 2, 2, 2, 2}, {7, 7, `seven`, 2, 2, 3, -3}, {7, 7, `seven`, 2, 2, 2, 4}, {7, 7, `seven`, 2, 2, 5, -5}, {7, 7, `seven`, 2, 2, 5, -5}, {7, 7, `seven`, 2, 2, 0, ``}, {7, 7, `seven`, 2, 2, ``, ``}, {7, 7, `seven`, 2, 2, ``, 0}, {8, 8, `eight`, 2, 2, 1, -1}, {8, 8, `eight`, 2, 2, 2, 2}, {8, 8, `eight`, 2, 2, 3, -3}, {8, 8, `eight`, 2, 2, 2, 4}, {8, 8, `eight`, 2, 2, 5, -5}, {8, 8, `eight`, 2, 2, 5, -5}, {8, 8, `eight`, 2, 2, 0, ``}, {8, 8, `eight`, 2, 2, ``, ``}, {8, 8, `eight`, 2, 2, ``, 0}, {0, ``, `zero`, 2, 2, 1, -1}, {0, ``, `zero`, 2, 2, 2, 2}, {0, ``, `zero`, 2, 2, 3, -3}, {0, ``, `zero`, 2, 2, 2, 4}, {0, ``, `zero`, 2, 2, 5, -5}, {0, ``, `zero`, 2, 2, 5, -5}, {0, ``, `zero`, 2, 2, 0, ``}, {0, ``, `zero`, 2, 2, ``, ``}, {0, ``, `zero`, 2, 2, ``, 0}, {``, ``, `null`, 2, 2, 1, -1}, {``, ``, `null`, 2, 2, 2, 2}, {``, ``, `null`, 2, 2, 3, -3}, {``, ``, `null`, 2, 2, 2, 4}, {``, ``, `null`, 2, 2, 5, -5}, {``, ``, `null`, 2, 2, 5, -5}, {``, ``, `null`, 2, 2, 0, ``}, {``, ``, `null`, 2, 2, ``, ``}, {``, ``, `null`, 2, 2, ``, 0}, {``, 0, `zero`, 2, 2, 1, -1}, {``, 0, `zero`, 2, 2, 2, 2}, {``, 0, `zero`, 2, 2, 3, -3}, {``, 0, `zero`, 2, 2, 2, 4}, {``, 0, `zero`, 2, 2, 5, -5}, {``, 0, `zero`, 2, 2, 5, -5}, {``, 0, `zero`, 2, 2, 0, ``}, {``, 0, `zero`, 2, 2, ``, ``}, {``, 0, `zero`, 2, 2, ``, 0}, {1, 4, `one`, 3, -3, 1, -1}, {1, 4, `one`, 3, -3, 2, 2}, {1, 4, `one`, 3, -3, 3, -3}, {1, 4, `one`, 3, -3, 2, 4}, {1, 4, `one`, 3, -3, 5, -5}, {1, 4, `one`, 3, -3, 5, -5}, {1, 4, `one`, 3, -3, 0, ``}, {1, 4, `one`, 3, -3, ``, ``}, {1, 4, `one`, 3, -3, ``, 0}, {2, 3, `two`, 3, -3, 1, -1}, {2, 3, `two`, 3, -3, 2, 2}, {2, 3, `two`, 3, -3, 3, -3}, {2, 3, `two`, 3, -3, 2, 4}, {2, 3, `two`, 3, -3, 5, -5}, {2, 3, `two`, 3, -3, 5, -5}, {2, 3, `two`, 3, -3, 0, ``}, {2, 3, `two`, 3, -3, ``, ``}, {2, 3, `two`, 3, -3, ``, 0}, {3, 2, `three`, 3, -3, 1, -1}, {3, 2, `three`, 3, -3, 2, 2}, {3, 2, `three`, 3, -3, 3, -3}, {3, 2, `three`, 3, -3, 2, 4}, {3, 2, `three`, 3, -3, 5, -5}, {3, 2, `three`, 3, -3, 5, -5}, {3, 2, `three`, 3, -3, 0, ``}, {3, 2, `three`, 3, -3, ``, ``}, {3, 2, `three`, 3, -3, ``, 0}, {4, 1, `four`, 3, -3, 1, -1}, {4, 1, `four`, 3, -3, 2, 2}, {4, 1, `four`, 3, -3, 3, -3}, {4, 1, `four`, 3, -3, 2, 4}, {4, 1, `four`, 3, -3, 5, -5}, {4, 1, `four`, 3, -3, 5, -5}, {4, 1, `four`, 3, -3, 0, ``}, {4, 1, `four`, 3, -3, ``, ``}, {4, 1, `four`, 3, -3, ``, 0}, {5, 0, `five`, 3, -3, 1, -1}, {5, 0, `five`, 3, -3, 2, 2}, {5, 0, `five`, 3, -3, 3, -3}, {5, 0, `five`, 3, -3, 2, 4}, {5, 0, `five`, 3, -3, 5, -5}, {5, 0, `five`, 3, -3, 5, -5}, {5, 0, `five`, 3, -3, 0, ``}, {5, 0, `five`, 3, -3, ``, ``}, {5, 0, `five`, 3, -3, ``, 0}, {6, 6, `six`, 3, -3, 1, -1}, {6, 6, `six`, 3, -3, 2, 2}, {6, 6, `six`, 3, -3, 3, -3}, {6, 6, `six`, 3, -3, 2, 4}, {6, 6, `six`, 3, -3, 5, -5}, {6, 6, `six`, 3, -3, 5, -5}, {6, 6, `six`, 3, -3, 0, ``}, {6, 6, `six`, 3, -3, ``, ``}, {6, 6, `six`, 3, -3, ``, 0}, {7, 7, `seven`, 3, -3, 1, -1}, {7, 7, `seven`, 3, -3, 2, 2}, {7, 7, `seven`, 3, -3, 3, -3}, {7, 7, `seven`, 3, -3, 2, 4}, {7, 7, `seven`, 3, -3, 5, -5}, {7, 7, `seven`, 3, -3, 5, -5}, {7, 7, `seven`, 3, -3, 0, ``}, {7, 7, `seven`, 3, -3, ``, ``}, {7, 7, `seven`, 3, -3, ``, 0}, {8, 8, `eight`, 3, -3, 1, -1}, {8, 8, `eight`, 3, -3, 2, 2}, {8, 8, `eight`, 3, -3, 3, -3}, {8, 8, `eight`, 3, -3, 2, 4}, {8, 8, `eight`, 3, -3, 5, -5}, {8, 8, `eight`, 3, -3, 5, -5}, {8, 8, `eight`, 3, -3, 0, ``}, {8, 8, `eight`, 3, -3, ``, ``}, {8, 8, `eight`, 3, -3, ``, 0}, {0, ``, `zero`, 3, -3, 1, -1}, {0, ``, `zero`, 3, -3, 2, 2}, {0, ``, `zero`, 3, -3, 3, -3}, {0, ``, `zero`, 3, -3, 2, 4}, {0, ``, `zero`, 3, -3, 5, -5}, {0, ``, `zero`, 3, -3, 5, -5}, {0, ``, `zero`, 3, -3, 0, ``}, {0, ``, `zero`, 3, -3, ``, ``}, {0, ``, `zero`, 3, -3, ``, 0}, {``, ``, `null`, 3, -3, 1, -1}, {``, ``, `null`, 3, -3, 2, 2}, {``, ``, `null`, 3, -3, 3, -3}, {``, ``, `null`, 3, -3, 2, 4}, {``, ``, `null`, 3, -3, 5, -5}, {``, ``, `null`, 3, -3, 5, -5}, {``, ``, `null`, 3, -3, 0, ``}, {``, ``, `null`, 3, -3, ``, ``}, {``, ``, `null`, 3, -3, ``, 0}, {``, 0, `zero`, 3, -3, 1, -1}, {``, 0, `zero`, 3, -3, 2, 2}, {``, 0, `zero`, 3, -3, 3, -3}, {``, 0, `zero`, 3, -3, 2, 4}, {``, 0, `zero`, 3, -3, 5, -5}, {``, 0, `zero`, 3, -3, 5, -5}, {``, 0, `zero`, 3, -3, 0, ``}, {``, 0, `zero`, 3, -3, ``, ``}, {``, 0, `zero`, 3, -3, ``, 0}, {1, 4, `one`, 2, 4, 1, -1}, {1, 4, `one`, 2, 4, 2, 2}, {1, 4, `one`, 2, 4, 3, -3}, {1, 4, `one`, 2, 4, 2, 4}, {1, 4, `one`, 2, 4, 5, -5}, {1, 4, `one`, 2, 4, 5, -5}, {1, 4, `one`, 2, 4, 0, ``}, {1, 4, `one`, 2, 4, ``, ``}, {1, 4, `one`, 2, 4, ``, 0}, {2, 3, `two`, 2, 4, 1, -1}, {2, 3, `two`, 2, 4, 2, 2}, {2, 3, `two`, 2, 4, 3, -3}, {2, 3, `two`, 2, 4, 2, 4}, {2, 3, `two`, 2, 4, 5, -5}, {2, 3, `two`, 2, 4, 5, -5}, {2, 3, `two`, 2, 4, 0, ``}, {2, 3, `two`, 2, 4, ``, ``}, {2, 3, `two`, 2, 4, ``, 0}, {3, 2, `three`, 2, 4, 1, -1}, {3, 2, `three`, 2, 4, 2, 2}, {3, 2, `three`, 2, 4, 3, -3}, {3, 2, `three`, 2, 4, 2, 4}, {3, 2, `three`, 2, 4, 5, -5}, {3, 2, `three`, 2, 4, 5, -5}, {3, 2, `three`, 2, 4, 0, ``}, {3, 2, `three`, 2, 4, ``, ``}, {3, 2, `three`, 2, 4, ``, 0}, {4, 1, `four`, 2, 4, 1, -1}, {4, 1, `four`, 2, 4, 2, 2}, {4, 1, `four`, 2, 4, 3, -3}, {4, 1, `four`, 2, 4, 2, 4}, {4, 1, `four`, 2, 4, 5, -5}, {4, 1, `four`, 2, 4, 5, -5}, {4, 1, `four`, 2, 4, 0, ``}, {4, 1, `four`, 2, 4, ``, ``}, {4, 1, `four`, 2, 4, ``, 0}, {5, 0, `five`, 2, 4, 1, -1}, {5, 0, `five`, 2, 4, 2, 2}, {5, 0, `five`, 2, 4, 3, -3}, {5, 0, `five`, 2, 4, 2, 4}, {5, 0, `five`, 2, 4, 5, -5}, {5, 0, `five`, 2, 4, 5, -5}, {5, 0, `five`, 2, 4, 0, ``}, {5, 0, `five`, 2, 4, ``, ``}, {5, 0, `five`, 2, 4, ``, 0}, {6, 6, `six`, 2, 4, 1, -1}, {6, 6, `six`, 2, 4, 2, 2}, {6, 6, `six`, 2, 4, 3, -3}, {6, 6, `six`, 2, 4, 2, 4}, {6, 6, `six`, 2, 4, 5, -5}, {6, 6, `six`, 2, 4, 5, -5}, {6, 6, `six`, 2, 4, 0, ``}, {6, 6, `six`, 2, 4, ``, ``}, {6, 6, `six`, 2, 4, ``, 0}, {7, 7, `seven`, 2, 4, 1, -1}, {7, 7, `seven`, 2, 4, 2, 2}, {7, 7, `seven`, 2, 4, 3, -3}, {7, 7, `seven`, 2, 4, 2, 4}, {7, 7, `seven`, 2, 4, 5, -5}, {7, 7, `seven`, 2, 4, 5, -5}, {7, 7, `seven`, 2, 4, 0, ``}, {7, 7, `seven`, 2, 4, ``, ``}, {7, 7, `seven`, 2, 4, ``, 0}, {8, 8, `eight`, 2, 4, 1, -1}, {8, 8, `eight`, 2, 4, 2, 2}, {8, 8, `eight`, 2, 4, 3, -3}, {8, 8, `eight`, 2, 4, 2, 4}, {8, 8, `eight`, 2, 4, 5, -5}, {8, 8, `eight`, 2, 4, 5, -5}, {8, 8, `eight`, 2, 4, 0, ``}, {8, 8, `eight`, 2, 4, ``, ``}, {8, 8, `eight`, 2, 4, ``, 0}, {0, ``, `zero`, 2, 4, 1, -1}, {0, ``, `zero`, 2, 4, 2, 2}, {0, ``, `zero`, 2, 4, 3, -3}, {0, ``, `zero`, 2, 4, 2, 4}, {0, ``, `zero`, 2, 4, 5, -5}, {0, ``, `zero`, 2, 4, 5, -5}, {0, ``, `zero`, 2, 4, 0, ``}, {0, ``, `zero`, 2, 4, ``, ``}, {0, ``, `zero`, 2, 4, ``, 0}, {``, ``, `null`, 2, 4, 1, -1}, {``, ``, `null`, 2, 4, 2, 2}, {``, ``, `null`, 2, 4, 3, -3}, {``, ``, `null`, 2, 4, 2, 4}, {``, ``, `null`, 2, 4, 5, -5}, {``, ``, `null`, 2, 4, 5, -5}, {``, ``, `null`, 2, 4, 0, ``}, {``, ``, `null`, 2, 4, ``, ``}, {``, ``, `null`, 2, 4, ``, 0}, {``, 0, `zero`, 2, 4, 1, -1}, {``, 0, `zero`, 2, 4, 2, 2}, {``, 0, `zero`, 2, 4, 3, -3}, {``, 0, `zero`, 2, 4, 2, 4}, {``, 0, `zero`, 2, 4, 5, -5}, {``, 0, `zero`, 2, 4, 5, -5}, {``, 0, `zero`, 2, 4, 0, ``}, {``, 0, `zero`, 2, 4, ``, ``}, {``, 0, `zero`, 2, 4, ``, 0}, {1, 4, `one`, 5, -5, 1, -1}, {1, 4, `one`, 5, -5, 2, 2}, {1, 4, `one`, 5, -5, 3, -3}, {1, 4, `one`, 5, -5, 2, 4}, {1, 4, `one`, 5, -5, 5, -5}, {1, 4, `one`, 5, -5, 5, -5}, {1, 4, `one`, 5, -5, 0, ``}, {1, 4, `one`, 5, -5, ``, ``}, {1, 4, `one`, 5, -5, ``, 0}, {2, 3, `two`, 5, -5, 1, -1}, {2, 3, `two`, 5, -5, 2, 2}, {2, 3, `two`, 5, -5, 3, -3}, {2, 3, `two`, 5, -5, 2, 4}, {2, 3, `two`, 5, -5, 5, -5}, {2, 3, `two`, 5, -5, 5, -5}, {2, 3, `two`, 5, -5, 0, ``}, {2, 3, `two`, 5, -5, ``, ``}, {2, 3, `two`, 5, -5, ``, 0}, {3, 2, `three`, 5, -5, 1, -1}, {3, 2, `three`, 5, -5, 2, 2}, {3, 2, `three`, 5, -5, 3, -3}, {3, 2, `three`, 5, -5, 2, 4}, {3, 2, `three`, 5, -5, 5, -5}, {3, 2, `three`, 5, -5, 5, -5}, {3, 2, `three`, 5, -5, 0, ``}, {3, 2, `three`, 5, -5, ``, ``}, {3, 2, `three`, 5, -5, ``, 0}, {4, 1, `four`, 5, -5, 1, -1}, {4, 1, `four`, 5, -5, 2, 2}, {4, 1, `four`, 5, -5, 3, -3}, {4, 1, `four`, 5, -5, 2, 4}, {4, 1, `four`, 5, -5, 5, -5}, {4, 1, `four`, 5, -5, 5, -5}, {4, 1, `four`, 5, -5, 0, ``}, {4, 1, `four`, 5, -5, ``, ``}, {4, 1, `four`, 5, -5, ``, 0}, {5, 0, `five`, 5, -5, 1, -1}, {5, 0, `five`, 5, -5, 2, 2}, {5, 0, `five`, 5, -5, 3, -3}, {5, 0, `five`, 5, -5, 2, 4}, {5, 0, `five`, 5, -5, 5, -5}, {5, 0, `five`, 5, -5, 5, -5}, {5, 0, `five`, 5, -5, 0, ``}, {5, 0, `five`, 5, -5, ``, ``}, {5, 0, `five`, 5, -5, ``, 0}, {6, 6, `six`, 5, -5, 1, -1}, {6, 6, `six`, 5, -5, 2, 2}, {6, 6, `six`, 5, -5, 3, -3}, {6, 6, `six`, 5, -5, 2, 4}, {6, 6, `six`, 5, -5, 5, -5}, {6, 6, `six`, 5, -5, 5, -5}, {6, 6, `six`, 5, -5, 0, ``}, {6, 6, `six`, 5, -5, ``, ``}, {6, 6, `six`, 5, -5, ``, 0}, {7, 7, `seven`, 5, -5, 1, -1}, {7, 7, `seven`, 5, -5, 2, 2}, {7, 7, `seven`, 5, -5, 3, -3}, {7, 7, `seven`, 5, -5, 2, 4}, {7, 7, `seven`, 5, -5, 5, -5}, {7, 7, `seven`, 5, -5, 5, -5}, {7, 7, `seven`, 5, -5, 0, ``}, {7, 7, `seven`, 5, -5, ``, ``}, {7, 7, `seven`, 5, -5, ``, 0}, {8, 8, `eight`, 5, -5, 1, -1}, {8, 8, `eight`, 5, -5, 2, 2}, {8, 8, `eight`, 5, -5, 3, -3}, {8, 8, `eight`, 5, -5, 2, 4}, {8, 8, `eight`, 5, -5, 5, -5}, {8, 8, `eight`, 5, -5, 5, -5}, {8, 8, `eight`, 5, -5, 0, ``}, {8, 8, `eight`, 5, -5, ``, ``}, {8, 8, `eight`, 5, -5, ``, 0}, {0, ``, `zero`, 5, -5, 1, -1}, {0, ``, `zero`, 5, -5, 2, 2}, {0, ``, `zero`, 5, -5, 3, -3}, {0, ``, `zero`, 5, -5, 2, 4}, {0, ``, `zero`, 5, -5, 5, -5}, {0, ``, `zero`, 5, -5, 5, -5}, {0, ``, `zero`, 5, -5, 0, ``}, {0, ``, `zero`, 5, -5, ``, ``}, {0, ``, `zero`, 5, -5, ``, 0}, {``, ``, `null`, 5, -5, 1, -1}, {``, ``, `null`, 5, -5, 2, 2}, {``, ``, `null`, 5, -5, 3, -3}, {``, ``, `null`, 5, -5, 2, 4}, {``, ``, `null`, 5, -5, 5, -5}, {``, ``, `null`, 5, -5, 5, -5}, {``, ``, `null`, 5, -5, 0, ``}, {``, ``, `null`, 5, -5, ``, ``}, {``, ``, `null`, 5, -5, ``, 0}, {``, 0, `zero`, 5, -5, 1, -1}, {``, 0, `zero`, 5, -5, 2, 2}, {``, 0, `zero`, 5, -5, 3, -3}, {``, 0, `zero`, 5, -5, 2, 4}, {``, 0, `zero`, 5, -5, 5, -5}, {``, 0, `zero`, 5, -5, 5, -5}, {``, 0, `zero`, 5, -5, 0, ``}, {``, 0, `zero`, 5, -5, ``, ``}, {``, 0, `zero`, 5, -5, ``, 0}, {1, 4, `one`, 5, -5, 1, -1}, {1, 4, `one`, 5, -5, 2, 2}, {1, 4, `one`, 5, -5, 3, -3}, {1, 4, `one`, 5, -5, 2, 4}, {1, 4, `one`, 5, -5, 5, -5}, {1, 4, `one`, 5, -5, 5, -5}, {1, 4, `one`, 5, -5, 0, ``}, {1, 4, `one`, 5, -5, ``, ``}, {1, 4, `one`, 5, -5, ``, 0}, {2, 3, `two`, 5, -5, 1, -1}, {2, 3, `two`, 5, -5, 2, 2}, {2, 3, `two`, 5, -5, 3, -3}, {2, 3, `two`, 5, -5, 2, 4}, {2, 3, `two`, 5, -5, 5, -5}, {2, 3, `two`, 5, -5, 5, -5}, {2, 3, `two`, 5, -5, 0, ``}, {2, 3, `two`, 5, -5, ``, ``}, {2, 3, `two`, 5, -5, ``, 0}, {3, 2, `three`, 5, -5, 1, -1}, {3, 2, `three`, 5, -5, 2, 2}, {3, 2, `three`, 5, -5, 3, -3}, {3, 2, `three`, 5, -5, 2, 4}, {3, 2, `three`, 5, -5, 5, -5}, {3, 2, `three`, 5, -5, 5, -5}, {3, 2, `three`, 5, -5, 0, ``}, {3, 2, `three`, 5, -5, ``, ``}, {3, 2, `three`, 5, -5, ``, 0}, {4, 1, `four`, 5, -5, 1, -1}, {4, 1, `four`, 5, -5, 2, 2}, {4, 1, `four`, 5, -5, 3, -3}, {4, 1, `four`, 5, -5, 2, 4}, {4, 1, `four`, 5, -5, 5, -5}, {4, 1, `four`, 5, -5, 5, -5}, {4, 1, `four`, 5, -5, 0, ``}, {4, 1, `four`, 5, -5, ``, ``}, {4, 1, `four`, 5, -5, ``, 0}, {5, 0, `five`, 5, -5, 1, -1}, {5, 0, `five`, 5, -5, 2, 2}, {5, 0, `five`, 5, -5, 3, -3}, {5, 0, `five`, 5, -5, 2, 4}, {5, 0, `five`, 5, -5, 5, -5}, {5, 0, `five`, 5, -5, 5, -5}, {5, 0, `five`, 5, -5, 0, ``}, {5, 0, `five`, 5, -5, ``, ``}, {5, 0, `five`, 5, -5, ``, 0}, {6, 6, `six`, 5, -5, 1, -1}, {6, 6, `six`, 5, -5, 2, 2}, {6, 6, `six`, 5, -5, 3, -3}, {6, 6, `six`, 5, -5, 2, 4}, {6, 6, `six`, 5, -5, 5, -5}, {6, 6, `six`, 5, -5, 5, -5}, {6, 6, `six`, 5, -5, 0, ``}, {6, 6, `six`, 5, -5, ``, ``}, {6, 6, `six`, 5, -5, ``, 0}, {7, 7, `seven`, 5, -5, 1, -1}, {7, 7, `seven`, 5, -5, 2, 2}, {7, 7, `seven`, 5, -5, 3, -3}, {7, 7, `seven`, 5, -5, 2, 4}, {7, 7, `seven`, 5, -5, 5, -5}, {7, 7, `seven`, 5, -5, 5, -5}, {7, 7, `seven`, 5, -5, 0, ``}, {7, 7, `seven`, 5, -5, ``, ``}, {7, 7, `seven`, 5, -5, ``, 0}, {8, 8, `eight`, 5, -5, 1, -1}, {8, 8, `eight`, 5, -5, 2, 2}, {8, 8, `eight`, 5, -5, 3, -3}, {8, 8, `eight`, 5, -5, 2, 4}, {8, 8, `eight`, 5, -5, 5, -5}, {8, 8, `eight`, 5, -5, 5, -5}, {8, 8, `eight`, 5, -5, 0, ``}, {8, 8, `eight`, 5, -5, ``, ``}, {8, 8, `eight`, 5, -5, ``, 0}, {0, ``, `zero`, 5, -5, 1, -1}, {0, ``, `zero`, 5, -5, 2, 2}, {0, ``, `zero`, 5, -5, 3, -3}, {0, ``, `zero`, 5, -5, 2, 4}, {0, ``, `zero`, 5, -5, 5, -5}, {0, ``, `zero`, 5, -5, 5, -5}, {0, ``, `zero`, 5, -5, 0, ``}, {0, ``, `zero`, 5, -5, ``, ``}, {0, ``, `zero`, 5, -5, ``, 0}, {``, ``, `null`, 5, -5, 1, -1}, {``, ``, `null`, 5, -5, 2, 2}, {``, ``, `null`, 5, -5, 3, -3}, {``, ``, `null`, 5, -5, 2, 4}, {``, ``, `null`, 5, -5, 5, -5}, {``, ``, `null`, 5, -5, 5, -5}, {``, ``, `null`, 5, -5, 0, ``}, {``, ``, `null`, 5, -5, ``, ``}, {``, ``, `null`, 5, -5, ``, 0}, {``, 0, `zero`, 5, -5, 1, -1}, {``, 0, `zero`, 5, -5, 2, 2}, {``, 0, `zero`, 5, -5, 3, -3}, {``, 0, `zero`, 5, -5, 2, 4}, {``, 0, `zero`, 5, -5, 5, -5}, {``, 0, `zero`, 5, -5, 5, -5}, {``, 0, `zero`, 5, -5, 0, ``}, {``, 0, `zero`, 5, -5, ``, ``}, {``, 0, `zero`, 5, -5, ``, 0}, {1, 4, `one`, 0, ``, 1, -1}, {1, 4, `one`, 0, ``, 2, 2}, {1, 4, `one`, 0, ``, 3, -3}, {1, 4, `one`, 0, ``, 2, 4}, {1, 4, `one`, 0, ``, 5, -5}, {1, 4, `one`, 0, ``, 5, -5}, {1, 4, `one`, 0, ``, 0, ``}, {1, 4, `one`, 0, ``, ``, ``}, {1, 4, `one`, 0, ``, ``, 0}, {2, 3, `two`, 0, ``, 1, -1}, {2, 3, `two`, 0, ``, 2, 2}, {2, 3, `two`, 0, ``, 3, -3}, {2, 3, `two`, 0, ``, 2, 4}, {2, 3, `two`, 0, ``, 5, -5}, {2, 3, `two`, 0, ``, 5, -5}, {2, 3, `two`, 0, ``, 0, ``}, {2, 3, `two`, 0, ``, ``, ``}, {2, 3, `two`, 0, ``, ``, 0}, {3, 2, `three`, 0, ``, 1, -1}, {3, 2, `three`, 0, ``, 2, 2}, {3, 2, `three`, 0, ``, 3, -3}, {3, 2, `three`, 0, ``, 2, 4}, {3, 2, `three`, 0, ``, 5, -5}, {3, 2, `three`, 0, ``, 5, -5}, {3, 2, `three`, 0, ``, 0, ``}, {3, 2, `three`, 0, ``, ``, ``}, {3, 2, `three`, 0, ``, ``, 0}, {4, 1, `four`, 0, ``, 1, -1}, {4, 1, `four`, 0, ``, 2, 2}, {4, 1, `four`, 0, ``, 3, -3}, {4, 1, `four`, 0, ``, 2, 4}, {4, 1, `four`, 0, ``, 5, -5}, {4, 1, `four`, 0, ``, 5, -5}, {4, 1, `four`, 0, ``, 0, ``}, {4, 1, `four`, 0, ``, ``, ``}, {4, 1, `four`, 0, ``, ``, 0}, {5, 0, `five`, 0, ``, 1, -1}, {5, 0, `five`, 0, ``, 2, 2}, {5, 0, `five`, 0, ``, 3, -3}, {5, 0, `five`, 0, ``, 2, 4}, {5, 0, `five`, 0, ``, 5, -5}, {5, 0, `five`, 0, ``, 5, -5}, {5, 0, `five`, 0, ``, 0, ``}, {5, 0, `five`, 0, ``, ``, ``}, {5, 0, `five`, 0, ``, ``, 0}, {6, 6, `six`, 0, ``, 1, -1}, {6, 6, `six`, 0, ``, 2, 2}, {6, 6, `six`, 0, ``, 3, -3}, {6, 6, `six`, 0, ``, 2, 4}, {6, 6, `six`, 0, ``, 5, -5}, {6, 6, `six`, 0, ``, 5, -5}, {6, 6, `six`, 0, ``, 0, ``}, {6, 6, `six`, 0, ``, ``, ``}, {6, 6, `six`, 0, ``, ``, 0}, {7, 7, `seven`, 0, ``, 1, -1}, {7, 7, `seven`, 0, ``, 2, 2}, {7, 7, `seven`, 0, ``, 3, -3}, {7, 7, `seven`, 0, ``, 2, 4}, {7, 7, `seven`, 0, ``, 5, -5}, {7, 7, `seven`, 0, ``, 5, -5}, {7, 7, `seven`, 0, ``, 0, ``}, {7, 7, `seven`, 0, ``, ``, ``}, {7, 7, `seven`, 0, ``, ``, 0}, {8, 8, `eight`, 0, ``, 1, -1}, {8, 8, `eight`, 0, ``, 2, 2}, {8, 8, `eight`, 0, ``, 3, -3}, {8, 8, `eight`, 0, ``, 2, 4}, {8, 8, `eight`, 0, ``, 5, -5}, {8, 8, `eight`, 0, ``, 5, -5}, {8, 8, `eight`, 0, ``, 0, ``}, {8, 8, `eight`, 0, ``, ``, ``}, {8, 8, `eight`, 0, ``, ``, 0}, {0, ``, `zero`, 0, ``, 1, -1}, {0, ``, `zero`, 0, ``, 2, 2}, {0, ``, `zero`, 0, ``, 3, -3}, {0, ``, `zero`, 0, ``, 2, 4}, {0, ``, `zero`, 0, ``, 5, -5}, {0, ``, `zero`, 0, ``, 5, -5}, {0, ``, `zero`, 0, ``, 0, ``}, {0, ``, `zero`, 0, ``, ``, ``}, {0, ``, `zero`, 0, ``, ``, 0}, {``, ``, `null`, 0, ``, 1, -1}, {``, ``, `null`, 0, ``, 2, 2}, {``, ``, `null`, 0, ``, 3, -3}, {``, ``, `null`, 0, ``, 2, 4}, {``, ``, `null`, 0, ``, 5, -5}, {``, ``, `null`, 0, ``, 5, -5}, {``, ``, `null`, 0, ``, 0, ``}, {``, ``, `null`, 0, ``, ``, ``}, {``, ``, `null`, 0, ``, ``, 0}, {``, 0, `zero`, 0, ``, 1, -1}, {``, 0, `zero`, 0, ``, 2, 2}, {``, 0, `zero`, 0, ``, 3, -3}, {``, 0, `zero`, 0, ``, 2, 4}, {``, 0, `zero`, 0, ``, 5, -5}, {``, 0, `zero`, 0, ``, 5, -5}, {``, 0, `zero`, 0, ``, 0, ``}, {``, 0, `zero`, 0, ``, ``, ``}, {``, 0, `zero`, 0, ``, ``, 0}, {1, 4, `one`, ``, ``, 1, -1}, {1, 4, `one`, ``, ``, 2, 2}, {1, 4, `one`, ``, ``, 3, -3}, {1, 4, `one`, ``, ``, 2, 4}, {1, 4, `one`, ``, ``, 5, -5}, {1, 4, `one`, ``, ``, 5, -5}, {1, 4, `one`, ``, ``, 0, ``}, {1, 4, `one`, ``, ``, ``, ``}, {1, 4, `one`, ``, ``, ``, 0}, {2, 3, `two`, ``, ``, 1, -1}, {2, 3, `two`, ``, ``, 2, 2}, {2, 3, `two`, ``, ``, 3, -3}, {2, 3, `two`, ``, ``, 2, 4}, {2, 3, `two`, ``, ``, 5, -5}, {2, 3, `two`, ``, ``, 5, -5}, {2, 3, `two`, ``, ``, 0, ``}, {2, 3, `two`, ``, ``, ``, ``}, {2, 3, `two`, ``, ``, ``, 0}, {3, 2, `three`, ``, ``, 1, -1}, {3, 2, `three`, ``, ``, 2, 2}, {3, 2, `three`, ``, ``, 3, -3}, {3, 2, `three`, ``, ``, 2, 4}, {3, 2, `three`, ``, ``, 5, -5}, {3, 2, `three`, ``, ``, 5, -5}, {3, 2, `three`, ``, ``, 0, ``}, {3, 2, `three`, ``, ``, ``, ``}, {3, 2, `three`, ``, ``, ``, 0}, {4, 1, `four`, ``, ``, 1, -1}, {4, 1, `four`, ``, ``, 2, 2}, {4, 1, `four`, ``, ``, 3, -3}, {4, 1, `four`, ``, ``, 2, 4}, {4, 1, `four`, ``, ``, 5, -5}, {4, 1, `four`, ``, ``, 5, -5}, {4, 1, `four`, ``, ``, 0, ``}, {4, 1, `four`, ``, ``, ``, ``}, {4, 1, `four`, ``, ``, ``, 0}, {5, 0, `five`, ``, ``, 1, -1}, {5, 0, `five`, ``, ``, 2, 2}, {5, 0, `five`, ``, ``, 3, -3}, {5, 0, `five`, ``, ``, 2, 4}, {5, 0, `five`, ``, ``, 5, -5}, {5, 0, `five`, ``, ``, 5, -5}, {5, 0, `five`, ``, ``, 0, ``}, {5, 0, `five`, ``, ``, ``, ``}, {5, 0, `five`, ``, ``, ``, 0}, {6, 6, `six`, ``, ``, 1, -1}, {6, 6, `six`, ``, ``, 2, 2}, {6, 6, `six`, ``, ``, 3, -3}, {6, 6, `six`, ``, ``, 2, 4}, {6, 6, `six`, ``, ``, 5, -5}, {6, 6, `six`, ``, ``, 5, -5}, {6, 6, `six`, ``, ``, 0, ``}, {6, 6, `six`, ``, ``, ``, ``}, {6, 6, `six`, ``, ``, ``, 0}, {7, 7, `seven`, ``, ``, 1, -1}, {7, 7, `seven`, ``, ``, 2, 2}, {7, 7, `seven`, ``, ``, 3, -3}, {7, 7, `seven`, ``, ``, 2, 4}, {7, 7, `seven`, ``, ``, 5, -5}, {7, 7, `seven`, ``, ``, 5, -5}, {7, 7, `seven`, ``, ``, 0, ``}, {7, 7, `seven`, ``, ``, ``, ``}, {7, 7, `seven`, ``, ``, ``, 0}, {8, 8, `eight`, ``, ``, 1, -1}, {8, 8, `eight`, ``, ``, 2, 2}, {8, 8, `eight`, ``, ``, 3, -3}, {8, 8, `eight`, ``, ``, 2, 4}, {8, 8, `eight`, ``, ``, 5, -5}, {8, 8, `eight`, ``, ``, 5, -5}, {8, 8, `eight`, ``, ``, 0, ``}, {8, 8, `eight`, ``, ``, ``, ``}, {8, 8, `eight`, ``, ``, ``, 0}, {0, ``, `zero`, ``, ``, 1, -1}, {0, ``, `zero`, ``, ``, 2, 2}, {0, ``, `zero`, ``, ``, 3, -3}, {0, ``, `zero`, ``, ``, 2, 4}, {0, ``, `zero`, ``, ``, 5, -5}, {0, ``, `zero`, ``, ``, 5, -5}, {0, ``, `zero`, ``, ``, 0, ``}, {0, ``, `zero`, ``, ``, ``, ``}, {0, ``, `zero`, ``, ``, ``, 0}, {``, ``, `null`, ``, ``, 1, -1}, {``, ``, `null`, ``, ``, 2, 2}, {``, ``, `null`, ``, ``, 3, -3}, {``, ``, `null`, ``, ``, 2, 4}, {``, ``, `null`, ``, ``, 5, -5}, {``, ``, `null`, ``, ``, 5, -5}, {``, ``, `null`, ``, ``, 0, ``}, {``, ``, `null`, ``, ``, ``, ``}, {``, ``, `null`, ``, ``, ``, 0}, {``, 0, `zero`, ``, ``, 1, -1}, {``, 0, `zero`, ``, ``, 2, 2}, {``, 0, `zero`, ``, ``, 3, -3}, {``, 0, `zero`, ``, ``, 2, 4}, {``, 0, `zero`, ``, ``, 5, -5}, {``, 0, `zero`, ``, ``, 5, -5}, {``, 0, `zero`, ``, ``, 0, ``}, {``, 0, `zero`, ``, ``, ``, ``}, {``, 0, `zero`, ``, ``, ``, 0}, {1, 4, `one`, ``, 0, 1, -1}, {1, 4, `one`, ``, 0, 2, 2}, {1, 4, `one`, ``, 0, 3, -3}, {1, 4, `one`, ``, 0, 2, 4}, {1, 4, `one`, ``, 0, 5, -5}, {1, 4, `one`, ``, 0, 5, -5}, {1, 4, `one`, ``, 0, 0, ``}, {1, 4, `one`, ``, 0, ``, ``}, {1, 4, `one`, ``, 0, ``, 0}, {2, 3, `two`, ``, 0, 1, -1}, {2, 3, `two`, ``, 0, 2, 2}, {2, 3, `two`, ``, 0, 3, -3}, {2, 3, `two`, ``, 0, 2, 4}, {2, 3, `two`, ``, 0, 5, -5}, {2, 3, `two`, ``, 0, 5, -5}, {2, 3, `two`, ``, 0, 0, ``}, {2, 3, `two`, ``, 0, ``, ``}, {2, 3, `two`, ``, 0, ``, 0}, {3, 2, `three`, ``, 0, 1, -1}, {3, 2, `three`, ``, 0, 2, 2}, {3, 2, `three`, ``, 0, 3, -3}, {3, 2, `three`, ``, 0, 2, 4}, {3, 2, `three`, ``, 0, 5, -5}, {3, 2, `three`, ``, 0, 5, -5}, {3, 2, `three`, ``, 0, 0, ``}, {3, 2, `three`, ``, 0, ``, ``}, {3, 2, `three`, ``, 0, ``, 0}, {4, 1, `four`, ``, 0, 1, -1}, {4, 1, `four`, ``, 0, 2, 2}, {4, 1, `four`, ``, 0, 3, -3}, {4, 1, `four`, ``, 0, 2, 4}, {4, 1, `four`, ``, 0, 5, -5}, {4, 1, `four`, ``, 0, 5, -5}, {4, 1, `four`, ``, 0, 0, ``}, {4, 1, `four`, ``, 0, ``, ``}, {4, 1, `four`, ``, 0, ``, 0}, {5, 0, `five`, ``, 0, 1, -1}, {5, 0, `five`, ``, 0, 2, 2}, {5, 0, `five`, ``, 0, 3, -3}, {5, 0, `five`, ``, 0, 2, 4}, {5, 0, `five`, ``, 0, 5, -5}, {5, 0, `five`, ``, 0, 5, -5}, {5, 0, `five`, ``, 0, 0, ``}, {5, 0, `five`, ``, 0, ``, ``}, {5, 0, `five`, ``, 0, ``, 0}, {6, 6, `six`, ``, 0, 1, -1}, {6, 6, `six`, ``, 0, 2, 2}, {6, 6, `six`, ``, 0, 3, -3}, {6, 6, `six`, ``, 0, 2, 4}, {6, 6, `six`, ``, 0, 5, -5}, {6, 6, `six`, ``, 0, 5, -5}, {6, 6, `six`, ``, 0, 0, ``}, {6, 6, `six`, ``, 0, ``, ``}, {6, 6, `six`, ``, 0, ``, 0}, {7, 7, `seven`, ``, 0, 1, -1}, {7, 7, `seven`, ``, 0, 2, 2}, {7, 7, `seven`, ``, 0, 3, -3}, {7, 7, `seven`, ``, 0, 2, 4}, {7, 7, `seven`, ``, 0, 5, -5}, {7, 7, `seven`, ``, 0, 5, -5}, {7, 7, `seven`, ``, 0, 0, ``}, {7, 7, `seven`, ``, 0, ``, ``}, {7, 7, `seven`, ``, 0, ``, 0}, {8, 8, `eight`, ``, 0, 1, -1}, {8, 8, `eight`, ``, 0, 2, 2}, {8, 8, `eight`, ``, 0, 3, -3}, {8, 8, `eight`, ``, 0, 2, 4}, {8, 8, `eight`, ``, 0, 5, -5}, {8, 8, `eight`, ``, 0, 5, -5}, {8, 8, `eight`, ``, 0, 0, ``}, {8, 8, `eight`, ``, 0, ``, ``}, {8, 8, `eight`, ``, 0, ``, 0}, {0, ``, `zero`, ``, 0, 1, -1}, {0, ``, `zero`, ``, 0, 2, 2}, {0, ``, `zero`, ``, 0, 3, -3}, {0, ``, `zero`, ``, 0, 2, 4}, {0, ``, `zero`, ``, 0, 5, -5}, {0, ``, `zero`, ``, 0, 5, -5}, {0, ``, `zero`, ``, 0, 0, ``}, {0, ``, `zero`, ``, 0, ``, ``}, {0, ``, `zero`, ``, 0, ``, 0}, {``, ``, `null`, ``, 0, 1, -1}, {``, ``, `null`, ``, 0, 2, 2}, {``, ``, `null`, ``, 0, 3, -3}, {``, ``, `null`, ``, 0, 2, 4}, {``, ``, `null`, ``, 0, 5, -5}, {``, ``, `null`, ``, 0, 5, -5}, {``, ``, `null`, ``, 0, 0, ``}, {``, ``, `null`, ``, 0, ``, ``}, {``, ``, `null`, ``, 0, ``, 0}, {``, 0, `zero`, ``, 0, 1, -1}, {``, 0, `zero`, ``, 0, 2, 2}, {``, 0, `zero`, ``, 0, 3, -3}, {``, 0, `zero`, ``, 0, 2, 4}, {``, 0, `zero`, ``, 0, 5, -5}, {``, 0, `zero`, ``, 0, 5, -5}, {``, 0, `zero`, ``, 0, 0, ``}, {``, 0, `zero`, ``, 0, ``, ``}, {``, 0, `zero`, ``, 0, ``, 0}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL INNER JOIN J2_TBL USING (i);`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {5, 0, `five`, -5}, {5, 0, `five`, -5}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL JOIN J2_TBL USING (i);`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {5, 0, `five`, -5}, {5, 0, `five`, -5}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL t1 (a, b, c) JOIN J2_TBL t2 (a, d) USING (a)
  ORDER BY a, d;`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {5, 0, `five`, -5}, {5, 0, `five`, -5}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL t1 (a, b, c) JOIN J2_TBL t2 (a, b) USING (b)
  ORDER BY b, t1.a;`,
				Results: []sql.Row{{0, 5, `five`, ``}, {0, ``, `zero`, ``}, {2, 3, `three`, 2}, {4, 1, `one`, 2}},
			},
			{
				Statement: `SELECT * FROM J1_TBL JOIN J2_TBL USING (i) WHERE J1_TBL.t = 'one';  -- ok`,
				Results:   []sql.Row{{1, 4, `one`, -1}},
			},
			{
				Statement: `SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one';  -- ok`,
				Results:   []sql.Row{{1, 4, `one`, -1}},
			},
			{
				Statement:   `SELECT * FROM (J1_TBL JOIN J2_TBL USING (i)) AS x WHERE J1_TBL.t = 'one';  -- error`,
				ErrorString: `invalid reference to FROM-clause entry for table "j1_tbl"`,
			},
			{
				Statement: `SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE x.i = 1;  -- ok`,
				Results:   []sql.Row{{1, 4, `one`, -1}},
			},
			{
				Statement:   `SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE x.t = 'one';  -- error`,
				ErrorString: `column x.t does not exist`,
			},
			{
				Statement:   `SELECT * FROM (J1_TBL JOIN J2_TBL USING (i) AS x) AS xx WHERE x.i = 1;  -- error (XXX could use better hint)`,
				ErrorString: `missing FROM-clause entry for table "x"`,
			},
			{
				Statement:   `SELECT * FROM J1_TBL a1 JOIN J2_TBL a2 USING (i) AS a1;  -- error`,
				ErrorString: `table name "a1" specified more than once`,
			},
			{
				Statement: `SELECT x.* FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one';`,
				Results:   []sql.Row{{1}},
			},
			{
				Statement: `SELECT ROW(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one';`,
				Results:   []sql.Row{{`(1)`}},
			},
			{
				Statement: `SELECT row_to_json(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one';`,
				Results:   []sql.Row{{`{"i":1}`}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL NATURAL JOIN J2_TBL;`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {5, 0, `five`, -5}, {5, 0, `five`, -5}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL t1 (a, b, c) NATURAL JOIN J2_TBL t2 (a, d);`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {5, 0, `five`, -5}, {5, 0, `five`, -5}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL t1 (a, b, c) NATURAL JOIN J2_TBL t2 (d, a);`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {2, 3, `two`, 2}, {4, 1, `four`, 2}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL t1 (a, b) NATURAL JOIN J2_TBL t2 (a);`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {5, 0, `five`, -5}, {5, 0, `five`, -5}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.i);`,
				Results: []sql.Row{{0, ``, `zero`, 0, ``}, {1, 4, `one`, 1, -1}, {2, 3, `two`, 2, 2}, {2, 3, `two`, 2, 4}, {3, 2, `three`, 3, -3}, {5, 0, `five`, 5, -5}, {5, 0, `five`, 5, -5}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.k);`,
				Results: []sql.Row{{0, ``, `zero`, ``, 0}, {2, 3, `two`, 2, 2}, {4, 1, `four`, 2, 4}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i <= J2_TBL.k);`,
				Results: []sql.Row{{1, 4, `one`, 2, 2}, {2, 3, `two`, 2, 2}, {0, ``, `zero`, 2, 2}, {1, 4, `one`, 2, 4}, {2, 3, `two`, 2, 4}, {3, 2, `three`, 2, 4}, {4, 1, `four`, 2, 4}, {0, ``, `zero`, 2, 4}, {0, ``, `zero`, ``, 0}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL LEFT OUTER JOIN J2_TBL USING (i)
  ORDER BY i, k, t;`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {4, 1, `four`, ``}, {5, 0, `five`, -5}, {5, 0, `five`, -5}, {6, 6, `six`, ``}, {7, 7, `seven`, ``}, {8, 8, `eight`, ``}, {``, ``, `null`, ``}, {``, 0, `zero`, ``}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL LEFT JOIN J2_TBL USING (i)
  ORDER BY i, k, t;`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {4, 1, `four`, ``}, {5, 0, `five`, -5}, {5, 0, `five`, -5}, {6, 6, `six`, ``}, {7, 7, `seven`, ``}, {8, 8, `eight`, ``}, {``, ``, `null`, ``}, {``, 0, `zero`, ``}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL RIGHT OUTER JOIN J2_TBL USING (i);`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {5, 0, `five`, -5}, {5, 0, `five`, -5}, {``, ``, ``, ``}, {``, ``, ``, 0}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL RIGHT JOIN J2_TBL USING (i);`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {5, 0, `five`, -5}, {5, 0, `five`, -5}, {``, ``, ``, ``}, {``, ``, ``, 0}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL FULL OUTER JOIN J2_TBL USING (i)
  ORDER BY i, k, t;`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {4, 1, `four`, ``}, {5, 0, `five`, -5}, {5, 0, `five`, -5}, {6, 6, `six`, ``}, {7, 7, `seven`, ``}, {8, 8, `eight`, ``}, {``, ``, ``, 0}, {``, ``, `null`, ``}, {``, 0, `zero`, ``}, {``, ``, ``, ``}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL FULL JOIN J2_TBL USING (i)
  ORDER BY i, k, t;`,
				Results: []sql.Row{{0, ``, `zero`, ``}, {1, 4, `one`, -1}, {2, 3, `two`, 2}, {2, 3, `two`, 4}, {3, 2, `three`, -3}, {4, 1, `four`, ``}, {5, 0, `five`, -5}, {5, 0, `five`, -5}, {6, 6, `six`, ``}, {7, 7, `seven`, ``}, {8, 8, `eight`, ``}, {``, ``, ``, 0}, {``, ``, `null`, ``}, {``, 0, `zero`, ``}, {``, ``, ``, ``}},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL LEFT JOIN J2_TBL USING (i) WHERE (k = 1);`,
				Results: []sql.Row{},
			},
			{
				Statement: `SELECT *
  FROM J1_TBL LEFT JOIN J2_TBL USING (i) WHERE (i = 1);`,
				Results: []sql.Row{{1, 4, `one`, -1}},
			},
			{
				Statement: `explain (costs off)
select * from int4_tbl i4, tenk1 a
where exists(select * from tenk1 b
             where a.twothousand = b.twothousand and a.fivethous <> b.fivethous)
      and i4.f1 = a.tenthous;`,
				Results: []sql.Row{{`Hash Semi Join`}, {`Hash Cond: (a.twothousand = b.twothousand)`}, {`Join Filter: (a.fivethous <> b.fivethous)`}, {`->  Hash Join`}, {`Hash Cond: (a.tenthous = i4.f1)`}, {`->  Seq Scan on tenk1 a`}, {`->  Hash`}, {`->  Seq Scan on int4_tbl i4`}, {`->  Hash`}, {`->  Seq Scan on tenk1 b`}},
			},
			{
				Statement: `CREATE TABLE t1 (name TEXT, n INTEGER);`,
			},
			{
				Statement: `CREATE TABLE t2 (name TEXT, n INTEGER);`,
			},
			{
				Statement: `CREATE TABLE t3 (name TEXT, n INTEGER);`,
			},
			{
				Statement: `INSERT INTO t1 VALUES ( 'bb', 11 );`,
			},
			{
				Statement: `INSERT INTO t2 VALUES ( 'bb', 12 );`,
			},
			{
				Statement: `INSERT INTO t2 VALUES ( 'cc', 22 );`,
			},
			{
				Statement: `INSERT INTO t2 VALUES ( 'ee', 42 );`,
			},
			{
				Statement: `INSERT INTO t3 VALUES ( 'bb', 13 );`,
			},
			{
				Statement: `INSERT INTO t3 VALUES ( 'cc', 23 );`,
			},
			{
				Statement: `INSERT INTO t3 VALUES ( 'dd', 33 );`,
			},
			{
				Statement: `SELECT * FROM t1 FULL JOIN t2 USING (name) FULL JOIN t3 USING (name);`,
				Results:   []sql.Row{{`bb`, 11, 12, 13}, {`cc`, ``, 22, 23}, {`dd`, ``, ``, 33}, {`ee`, ``, 42, ``}},
			},
			{
				Statement: `SELECT * FROM
(SELECT * FROM t2) as s2
INNER JOIN
(SELECT * FROM t3) s3
USING (name);`,
				Results: []sql.Row{{`bb`, 12, 13}, {`cc`, 22, 23}},
			},
			{
				Statement: `SELECT * FROM
(SELECT * FROM t2) as s2
LEFT JOIN
(SELECT * FROM t3) s3
USING (name);`,
				Results: []sql.Row{{`bb`, 12, 13}, {`cc`, 22, 23}, {`ee`, 42, ``}},
			},
			{
				Statement: `SELECT * FROM
(SELECT * FROM t2) as s2
FULL JOIN
(SELECT * FROM t3) s3
USING (name);`,
				Results: []sql.Row{{`bb`, 12, 13}, {`cc`, 22, 23}, {`dd`, ``, 33}, {`ee`, 42, ``}},
			},
			{
				Statement: `SELECT * FROM
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL INNER JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;`,
				Results: []sql.Row{{`bb`, 12, 2, 13, 3}, {`cc`, 22, 2, 23, 3}},
			},
			{
				Statement: `SELECT * FROM
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL LEFT JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;`,
				Results: []sql.Row{{`bb`, 12, 2, 13, 3}, {`cc`, 22, 2, 23, 3}, {`ee`, 42, 2, ``, ``}},
			},
			{
				Statement: `SELECT * FROM
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL FULL JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;`,
				Results: []sql.Row{{`bb`, 12, 2, 13, 3}, {`cc`, 22, 2, 23, 3}, {`dd`, ``, ``, 33, 3}, {`ee`, 42, 2, ``, ``}},
			},
			{
				Statement: `SELECT * FROM
(SELECT name, n as s1_n, 1 as s1_1 FROM t1) as s1
NATURAL INNER JOIN
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL INNER JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;`,
				Results: []sql.Row{{`bb`, 11, 1, 12, 2, 13, 3}},
			},
			{
				Statement: `SELECT * FROM
(SELECT name, n as s1_n, 1 as s1_1 FROM t1) as s1
NATURAL FULL JOIN
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL FULL JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;`,
				Results: []sql.Row{{`bb`, 11, 1, 12, 2, 13, 3}, {`cc`, ``, ``, 22, 2, 23, 3}, {`dd`, ``, ``, ``, ``, 33, 3}, {`ee`, ``, ``, 42, 2, ``, ``}},
			},
			{
				Statement: `SELECT * FROM
(SELECT name, n as s1_n FROM t1) as s1
NATURAL FULL JOIN
  (SELECT * FROM
    (SELECT name, n as s2_n FROM t2) as s2
    NATURAL FULL JOIN
    (SELECT name, n as s3_n FROM t3) as s3
  ) ss2;`,
				Results: []sql.Row{{`bb`, 11, 12, 13}, {`cc`, ``, 22, 23}, {`dd`, ``, ``, 33}, {`ee`, ``, 42, ``}},
			},
			{
				Statement: `SELECT * FROM
(SELECT name, n as s1_n FROM t1) as s1
NATURAL FULL JOIN
  (SELECT * FROM
    (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
    NATURAL FULL JOIN
    (SELECT name, n as s3_n FROM t3) as s3
  ) ss2;`,
				Results: []sql.Row{{`bb`, 11, 12, 2, 13}, {`cc`, ``, 22, 2, 23}, {`dd`, ``, ``, ``, 33}, {`ee`, ``, 42, 2, ``}},
			},
			{
				Statement: `SELECT * FROM
  (SELECT name, n as s1_n FROM t1) as s1
FULL JOIN
  (SELECT name, 2 as s2_n FROM t2) as s2
ON (s1_n = s2_n);`,
				Results: []sql.Row{{``, ``, `bb`, 2}, {``, ``, `cc`, 2}, {``, ``, `ee`, 2}, {`bb`, 11, ``, ``}},
			},
			{
				Statement: `create temp table x (x1 int, x2 int);`,
			},
			{
				Statement: `insert into x values (1,11);`,
			},
			{
				Statement: `insert into x values (2,22);`,
			},
			{
				Statement: `insert into x values (3,null);`,
			},
			{
				Statement: `insert into x values (4,44);`,
			},
			{
				Statement: `insert into x values (5,null);`,
			},
			{
				Statement: `create temp table y (y1 int, y2 int);`,
			},
			{
				Statement: `insert into y values (1,111);`,
			},
			{
				Statement: `insert into y values (2,222);`,
			},
			{
				Statement: `insert into y values (3,333);`,
			},
			{
				Statement: `insert into y values (4,null);`,
			},
			{
				Statement: `select * from x;`,
				Results:   []sql.Row{{1, 11}, {2, 22}, {3, ``}, {4, 44}, {5, ``}},
			},
			{
				Statement: `select * from y;`,
				Results:   []sql.Row{{1, 111}, {2, 222}, {3, 333}, {4, ``}},
			},
			{
				Statement: `select * from x left join y on (x1 = y1 and x2 is not null);`,
				Results:   []sql.Row{{1, 11, 1, 111}, {2, 22, 2, 222}, {3, ``, ``, ``}, {4, 44, 4, ``}, {5, ``, ``, ``}},
			},
			{
				Statement: `select * from x left join y on (x1 = y1 and y2 is not null);`,
				Results:   []sql.Row{{1, 11, 1, 111}, {2, 22, 2, 222}, {3, ``, 3, 333}, {4, 44, ``, ``}, {5, ``, ``, ``}},
			},
			{
				Statement: `select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1);`,
				Results: []sql.Row{{1, 11, 1, 111, 1, 11}, {2, 22, 2, 222, 2, 22}, {3, ``, 3, 333, 3, ``}, {4, 44, 4, ``, 4, 44}, {5, ``, ``, ``, 5, ``}},
			},
			{
				Statement: `select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1 and x2 is not null);`,
				Results: []sql.Row{{1, 11, 1, 111, 1, 11}, {2, 22, 2, 222, 2, 22}, {3, ``, 3, 333, ``, ``}, {4, 44, 4, ``, 4, 44}, {5, ``, ``, ``, ``, ``}},
			},
			{
				Statement: `select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1 and y2 is not null);`,
				Results: []sql.Row{{1, 11, 1, 111, 1, 11}, {2, 22, 2, 222, 2, 22}, {3, ``, 3, 333, 3, ``}, {4, 44, 4, ``, ``, ``}, {5, ``, ``, ``, ``, ``}},
			},
			{
				Statement: `select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1 and xx2 is not null);`,
				Results: []sql.Row{{1, 11, 1, 111, 1, 11}, {2, 22, 2, 222, 2, 22}, {3, ``, 3, 333, ``, ``}, {4, 44, 4, ``, 4, 44}, {5, ``, ``, ``, ``, ``}},
			},
			{
				Statement: `select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1) where (x2 is not null);`,
				Results: []sql.Row{{1, 11, 1, 111, 1, 11}, {2, 22, 2, 222, 2, 22}, {4, 44, 4, ``, 4, 44}},
			},
			{
				Statement: `select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1) where (y2 is not null);`,
				Results: []sql.Row{{1, 11, 1, 111, 1, 11}, {2, 22, 2, 222, 2, 22}, {3, ``, 3, 333, 3, ``}},
			},
			{
				Statement: `select * from (x left join y on (x1 = y1)) left join x xx(xx1,xx2)
on (x1 = xx1) where (xx2 is not null);`,
				Results: []sql.Row{{1, 11, 1, 111, 1, 11}, {2, 22, 2, 222, 2, 22}, {4, 44, 4, ``, 4, 44}},
			},
			{
				Statement: `select count(*) from tenk1 a where unique1 in
  (select unique1 from tenk1 b join tenk1 c using (unique1)
   where b.unique2 = 42);`,
				Results: []sql.Row{{1}},
			},
			{
				Statement: `select count(*) from tenk1 x where
  x.unique1 in (select a.f1 from int4_tbl a,float8_tbl b where a.f1=b.f1) and
  x.unique1 = 0 and
  x.unique1 in (select aa.f1 from int4_tbl aa,float8_tbl bb where aa.f1=bb.f1);`,
				Results: []sql.Row{{1}},
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `set geqo = on;`,
			},
			{
				Statement: `set geqo_threshold = 2;`,
			},
			{
				Statement: `select count(*) from tenk1 x where
  x.unique1 in (select a.f1 from int4_tbl a,float8_tbl b where a.f1=b.f1) and
  x.unique1 = 0 and
  x.unique1 in (select aa.f1 from int4_tbl aa,float8_tbl bb where aa.f1=bb.f1);`,
				Results: []sql.Row{{1}},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `explain (costs off)
select aa, bb, unique1, unique1
  from tenk1 right join b_star on aa = unique1
  where bb < bb and bb is null;`,
				Results: []sql.Row{{`Result`}, {`One-Time Filter: false`}},
			},
			{
				Statement: `select aa, bb, unique1, unique1
  from tenk1 right join b_star on aa = unique1
  where bb < bb and bb is null;`,
				Results: []sql.Row{},
			},
			{
				Statement: `explain (costs off)
select * from int8_tbl i1 left join (int8_tbl i2 join
  (select 123 as x) ss on i2.q1 = x) on i1.q2 = i2.q2
order by 1, 2;`,
				Results: []sql.Row{{`Sort`}, {`Sort Key: i1.q1, i1.q2`}, {`->  Hash Left Join`}, {`Hash Cond: (i1.q2 = i2.q2)`}, {`->  Seq Scan on int8_tbl i1`}, {`->  Hash`}, {`->  Seq Scan on int8_tbl i2`}, {`Filter: (q1 = 123)`}},
			},
			{
				Statement: `select * from int8_tbl i1 left join (int8_tbl i2 join
  (select 123 as x) ss on i2.q1 = x) on i1.q2 = i2.q2
order by 1, 2;`,
				Results: []sql.Row{{123, 456, 123, 456, 123}, {123, 4567890123456789, 123, 4567890123456789, 123}, {4567890123456789, -4567890123456789, ``, ``, ``}, {4567890123456789, 123, ``, ``, ``}, {4567890123456789, 4567890123456789, 123, 4567890123456789, 123}},
			},
			{
				Statement: `select count(*)
from
  (select t3.tenthous as x1, coalesce(t1.stringu1, t2.stringu1) as x2
   from tenk1 t1
   left join tenk1 t2 on t1.unique1 = t2.unique1
   join tenk1 t3 on t1.unique2 = t3.unique2) ss,
  tenk1 t4,
  tenk1 t5
where t4.thousand = t5.unique1 and ss.x1 = t4.tenthous and ss.x2 = t5.stringu1;`,
				Results: []sql.Row{{1000}},
			},
			{
				Statement: `explain (costs off)
select a.f1, b.f1, t.thousand, t.tenthous from
  tenk1 t,
  (select sum(f1)+1 as f1 from int4_tbl i4a) a,
  (select sum(f1) as f1 from int4_tbl i4b) b
where b.f1 = t.thousand and a.f1 = b.f1 and (a.f1+b.f1+999) = t.tenthous;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Aggregate`}, {`->  Seq Scan on int4_tbl i4b`}, {`->  Nested Loop`}, {`Join Filter: ((sum(i4b.f1)) = ((sum(i4a.f1) + 1)))`}, {`->  Aggregate`}, {`->  Seq Scan on int4_tbl i4a`}, {`->  Index Only Scan using tenk1_thous_tenthous on tenk1 t`}, {`Index Cond: ((thousand = (sum(i4b.f1))) AND (tenthous = ((((sum(i4a.f1) + 1)) + (sum(i4b.f1))) + 999)))`}},
			},
			{
				Statement: `select a.f1, b.f1, t.thousand, t.tenthous from
  tenk1 t,
  (select sum(f1)+1 as f1 from int4_tbl i4a) a,
  (select sum(f1) as f1 from int4_tbl i4b) b
where b.f1 = t.thousand and a.f1 = b.f1 and (a.f1+b.f1+999) = t.tenthous;`,
				Results: []sql.Row{},
			},
			{
				Statement: `explain (costs off)
select * from
  j1_tbl full join
  (select * from j2_tbl order by j2_tbl.i desc, j2_tbl.k asc) j2_tbl
  on j1_tbl.i = j2_tbl.i and j1_tbl.i = j2_tbl.k;`,
				Results: []sql.Row{{`Merge Full Join`}, {`Merge Cond: ((j2_tbl.i = j1_tbl.i) AND (j2_tbl.k = j1_tbl.i))`}, {`->  Sort`}, {`Sort Key: j2_tbl.i DESC, j2_tbl.k`}, {`->  Seq Scan on j2_tbl`}, {`->  Sort`}, {`Sort Key: j1_tbl.i DESC`}, {`->  Seq Scan on j1_tbl`}},
			},
			{
				Statement: `select * from
  j1_tbl full join
  (select * from j2_tbl order by j2_tbl.i desc, j2_tbl.k asc) j2_tbl
  on j1_tbl.i = j2_tbl.i and j1_tbl.i = j2_tbl.k;`,
				Results: []sql.Row{{``, ``, ``, ``, 0}, {``, ``, ``, ``, ``}, {``, 0, `zero`, ``, ``}, {``, ``, `null`, ``, ``}, {8, 8, `eight`, ``, ``}, {7, 7, `seven`, ``, ``}, {6, 6, `six`, ``, ``}, {``, ``, ``, 5, -5}, {``, ``, ``, 5, -5}, {5, 0, `five`, ``, ``}, {4, 1, `four`, ``, ``}, {``, ``, ``, 3, -3}, {3, 2, `three`, ``, ``}, {2, 3, `two`, 2, 2}, {``, ``, ``, 2, 4}, {``, ``, ``, 1, -1}, {``, ``, ``, 0, ``}, {1, 4, `one`, ``, ``}, {0, ``, `zero`, ``, ``}},
			},
			{
				Statement: `explain (costs off)
select count(*) from
  (select * from tenk1 x order by x.thousand, x.twothousand, x.fivethous) x
  left join
  (select * from tenk1 y order by y.unique2) y
  on x.thousand = y.unique2 and x.twothousand = y.hundred and x.fivethous = y.unique2;`,
				Results: []sql.Row{{`Aggregate`}, {`->  Merge Left Join`}, {`Merge Cond: (x.thousand = y.unique2)`}, {`Join Filter: ((x.twothousand = y.hundred) AND (x.fivethous = y.unique2))`}, {`->  Sort`}, {`Sort Key: x.thousand, x.twothousand, x.fivethous`}, {`->  Seq Scan on tenk1 x`}, {`->  Materialize`}, {`->  Index Scan using tenk1_unique2 on tenk1 y`}},
			},
			{
				Statement: `select count(*) from
  (select * from tenk1 x order by x.thousand, x.twothousand, x.fivethous) x
  left join
  (select * from tenk1 y order by y.unique2) y
  on x.thousand = y.unique2 and x.twothousand = y.hundred and x.fivethous = y.unique2;`,
				Results: []sql.Row{{10000}},
			},
			{
				Statement: `DROP TABLE t1;`,
			},
			{
				Statement: `DROP TABLE t2;`,
			},
			{
				Statement: `DROP TABLE t3;`,
			},
			{
				Statement: `DROP TABLE J1_TBL;`,
			},
			{
				Statement: `DROP TABLE J2_TBL;`,
			},
			{
				Statement: `CREATE TEMP TABLE t1 (a int, b int);`,
			},
			{
				Statement: `CREATE TEMP TABLE t2 (a int, b int);`,
			},
			{
				Statement: `CREATE TEMP TABLE t3 (x int, y int);`,
			},
			{
				Statement: `INSERT INTO t1 VALUES (5, 10);`,
			},
			{
				Statement: `INSERT INTO t1 VALUES (15, 20);`,
			},
			{
				Statement: `INSERT INTO t1 VALUES (100, 100);`,
			},
			{
				Statement: `INSERT INTO t1 VALUES (200, 1000);`,
			},
			{
				Statement: `INSERT INTO t2 VALUES (200, 2000);`,
			},
			{
				Statement: `INSERT INTO t3 VALUES (5, 20);`,
			},
			{
				Statement: `INSERT INTO t3 VALUES (6, 7);`,
			},
			{
				Statement: `INSERT INTO t3 VALUES (7, 8);`,
			},
			{
				Statement: `INSERT INTO t3 VALUES (500, 100);`,
			},
			{
				Statement: `DELETE FROM t3 USING t1 table1 WHERE t3.x = table1.a;`,
			},
			{
				Statement: `SELECT * FROM t3;`,
				Results:   []sql.Row{{6, 7}, {7, 8}, {500, 100}},
			},
			{
				Statement: `DELETE FROM t3 USING t1 JOIN t2 USING (a) WHERE t3.x > t1.a;`,
			},
			{
				Statement: `SELECT * FROM t3;`,
				Results:   []sql.Row{{6, 7}, {7, 8}},
			},
			{
				Statement: `DELETE FROM t3 USING t3 t3_other WHERE t3.x = t3_other.x AND t3.y = t3_other.y;`,
			},
			{
				Statement: `SELECT * FROM t3;`,
				Results:   []sql.Row{},
			},
			{
				Statement: `create temp table t2a () inherits (t2);`,
			},
			{
				Statement: `insert into t2a values (200, 2001);`,
			},
			{
				Statement: `select * from t1 left join t2 on (t1.a = t2.a);`,
				Results:   []sql.Row{{5, 10, ``, ``}, {15, 20, ``, ``}, {100, 100, ``, ``}, {200, 1000, 200, 2000}, {200, 1000, 200, 2001}},
			},
			{
				Statement:   `select t1.x from t1 join t3 on (t1.a = t3.x);`,
				ErrorString: `column t1.x does not exist`,
			},
			{
				Statement: `select t1.*, t2.*, unnamed_join.* from
  t1 join t2 on (t1.a = t2.a), t3 as unnamed_join
  for update of unnamed_join;`,
				Results: []sql.Row{},
			},
			{
				Statement: `select foo.*, unnamed_join.* from
  t1 join t2 using (a) as foo, t3 as unnamed_join
  for update of unnamed_join;`,
				Results: []sql.Row{},
			},
			{
				Statement: `select foo.*, unnamed_join.* from
  t1 join t2 using (a) as foo, t3 as unnamed_join
  for update of foo;`,
				ErrorString: `FOR UPDATE cannot be applied to a join`,
			},
			{
				Statement: `select bar.*, unnamed_join.* from
  (t1 join t2 using (a) as foo) as bar, t3 as unnamed_join
  for update of foo;`,
				ErrorString: `relation "foo" in FOR UPDATE clause not found in FROM clause`,
			},
			{
				Statement: `select bar.*, unnamed_join.* from
  (t1 join t2 using (a) as foo) as bar, t3 as unnamed_join
  for update of bar;`,
				ErrorString: `FOR UPDATE cannot be applied to a join`,
			},
			{
				Statement: `CREATE TEMP TABLE tt1 ( tt1_id int4, joincol int4 );`,
			},
			{
				Statement: `INSERT INTO tt1 VALUES (1, 11);`,
			},
			{
				Statement: `INSERT INTO tt1 VALUES (2, NULL);`,
			},
			{
				Statement: `CREATE TEMP TABLE tt2 ( tt2_id int4, joincol int4 );`,
			},
			{
				Statement: `INSERT INTO tt2 VALUES (21, 11);`,
			},
			{
				Statement: `INSERT INTO tt2 VALUES (22, 11);`,
			},
			{
				Statement: `set enable_hashjoin to off;`,
			},
			{
				Statement: `set enable_nestloop to off;`,
			},
			{
				Statement: `select tt1.*, tt2.* from tt1 left join tt2 on tt1.joincol = tt2.joincol;`,
				Results:   []sql.Row{{1, 11, 21, 11}, {1, 11, 22, 11}, {2, ``, ``, ``}},
			},
			{
				Statement: `select tt1.*, tt2.* from tt2 right join tt1 on tt1.joincol = tt2.joincol;`,
				Results:   []sql.Row{{1, 11, 21, 11}, {1, 11, 22, 11}, {2, ``, ``, ``}},
			},
			{
				Statement: `reset enable_hashjoin;`,
			},
			{
				Statement: `reset enable_nestloop;`,
			},
			{
				Statement: `set work_mem to '64kB';`,
			},
			{
				Statement: `set enable_mergejoin to off;`,
			},
			{
				Statement: `set enable_memoize to off;`,
			},
			{
				Statement: `explain (costs off)
select count(*) from tenk1 a, tenk1 b
  where a.hundred = b.thousand and (b.fivethous % 10) < 10;`,
				Results: []sql.Row{{`Aggregate`}, {`->  Hash Join`}, {`Hash Cond: (a.hundred = b.thousand)`}, {`->  Index Only Scan using tenk1_hundred on tenk1 a`}, {`->  Hash`}, {`->  Seq Scan on tenk1 b`}, {`Filter: ((fivethous % 10) < 10)`}},
			},
			{
				Statement: `select count(*) from tenk1 a, tenk1 b
  where a.hundred = b.thousand and (b.fivethous % 10) < 10;`,
				Results: []sql.Row{{100000}},
			},
			{
				Statement: `reset work_mem;`,
			},
			{
				Statement: `reset enable_mergejoin;`,
			},
			{
				Statement: `reset enable_memoize;`,
			},
			{
				Statement: `create temp table tt3(f1 int, f2 text);`,
			},
			{
				Statement: `insert into tt3 select x, repeat('xyzzy', 100) from generate_series(1,10000) x;`,
			},
			{
				Statement: `create index tt3i on tt3(f1);`,
			},
			{
				Statement: `analyze tt3;`,
			},
			{
				Statement: `create temp table tt4(f1 int);`,
			},
			{
				Statement: `insert into tt4 values (0),(1),(9999);`,
			},
			{
				Statement: `analyze tt4;`,
			},
			{
				Statement: `SELECT a.f1
FROM tt4 a
LEFT JOIN (
        SELECT b.f1
        FROM tt3 b LEFT JOIN tt3 c ON (b.f1 = c.f1)
        WHERE c.f1 IS NULL
) AS d ON (a.f1 = d.f1)
WHERE d.f1 IS NULL;`,
				Results: []sql.Row{{0}, {1}, {9999}},
			},
			{
				Statement: `create temp table tt4x(c1 int, c2 int, c3 int);`,
			},
			{
				Statement: `explain (costs off)
select * from tt4x t1
where not exists (
  select 1 from tt4x t2
    left join tt4x t3 on t2.c3 = t3.c1
    left join ( select t5.c1 as c1
                from tt4x t4 left join tt4x t5 on t4.c2 = t5.c1
              ) a1 on t3.c2 = a1.c1
  where t1.c1 = t2.c2
);`,
				Results: []sql.Row{{`Hash Anti Join`}, {`Hash Cond: (t1.c1 = t2.c2)`}, {`->  Seq Scan on tt4x t1`}, {`->  Hash`}, {`->  Merge Right Join`}, {`Merge Cond: (t5.c1 = t3.c2)`}, {`->  Merge Join`}, {`Merge Cond: (t4.c2 = t5.c1)`}, {`->  Sort`}, {`Sort Key: t4.c2`}, {`->  Seq Scan on tt4x t4`}, {`->  Sort`}, {`Sort Key: t5.c1`}, {`->  Seq Scan on tt4x t5`}, {`->  Sort`}, {`Sort Key: t3.c2`}, {`->  Merge Left Join`}, {`Merge Cond: (t2.c3 = t3.c1)`}, {`->  Sort`}, {`Sort Key: t2.c3`}, {`->  Seq Scan on tt4x t2`}, {`->  Sort`}, {`Sort Key: t3.c1`}, {`->  Seq Scan on tt4x t3`}},
			},
			{
				Statement: `create temp table tt5(f1 int, f2 int);`,
			},
			{
				Statement: `create temp table tt6(f1 int, f2 int);`,
			},
			{
				Statement: `insert into tt5 values(1, 10);`,
			},
			{
				Statement: `insert into tt5 values(1, 11);`,
			},
			{
				Statement: `insert into tt6 values(1, 9);`,
			},
			{
				Statement: `insert into tt6 values(1, 2);`,
			},
			{
				Statement: `insert into tt6 values(2, 9);`,
			},
			{
				Statement: `select * from tt5,tt6 where tt5.f1 = tt6.f1 and tt5.f1 = tt5.f2 - tt6.f2;`,
				Results:   []sql.Row{{1, 10, 1, 9}},
			},
			{
				Statement: `create temp table xx (pkxx int);`,
			},
			{
				Statement: `create temp table yy (pkyy int, pkxx int);`,
			},
			{
				Statement: `insert into xx values (1);`,
			},
			{
				Statement: `insert into xx values (2);`,
			},
			{
				Statement: `insert into xx values (3);`,
			},
			{
				Statement: `insert into yy values (101, 1);`,
			},
			{
				Statement: `insert into yy values (201, 2);`,
			},
			{
				Statement: `insert into yy values (301, NULL);`,
			},
			{
				Statement: `select yy.pkyy as yy_pkyy, yy.pkxx as yy_pkxx, yya.pkyy as yya_pkyy,
       xxa.pkxx as xxa_pkxx, xxb.pkxx as xxb_pkxx
from yy
     left join (SELECT * FROM yy where pkyy = 101) as yya ON yy.pkyy = yya.pkyy
     left join xx xxa on yya.pkxx = xxa.pkxx
     left join xx xxb on coalesce (xxa.pkxx, 1) = xxb.pkxx;`,
				Results: []sql.Row{{101, 1, 101, 1, 1}, {201, 2, ``, ``, 1}, {301, ``, ``, ``, 1}},
			},
			{
				Statement: `create temp table zt1 (f1 int primary key);`,
			},
			{
				Statement: `create temp table zt2 (f2 int primary key);`,
			},
			{
				Statement: `create temp table zt3 (f3 int primary key);`,
			},
			{
				Statement: `insert into zt1 values(53);`,
			},
			{
				Statement: `insert into zt2 values(53);`,
			},
			{
				Statement: `select * from
  zt2 left join zt3 on (f2 = f3)
      left join zt1 on (f3 = f1)
where f2 = 53;`,
				Results: []sql.Row{{53, ``, ``}},
			},
			{
				Statement: `create temp view zv1 as select *,'dummy'::text AS junk from zt1;`,
			},
			{
				Statement: `select * from
  zt2 left join zt3 on (f2 = f3)
      left join zv1 on (f3 = f1)
where f2 = 53;`,
				Results: []sql.Row{{53, ``, ``, ``}},
			},
			{
				Statement: `select a.unique2, a.ten, b.tenthous, b.unique2, b.hundred
from tenk1 a left join tenk1 b on a.unique2 = b.tenthous
where a.unique1 = 42 and
      ((b.unique2 is null and a.ten = 2) or b.hundred = 3);`,
				Results: []sql.Row{},
			},
			{
				Statement: `prepare foo(bool) as
  select count(*) from tenk1 a left join tenk1 b
    on (a.unique2 = b.unique1 and exists
        (select 1 from tenk1 c where c.thousand = b.unique2 and $1));`,
			},
			{
				Statement: `execute foo(true);`,
				Results:   []sql.Row{{10000}},
			},
			{
				Statement: `execute foo(false);`,
				Results:   []sql.Row{{10000}},
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `set enable_mergejoin = 1;`,
			},
			{
				Statement: `set enable_hashjoin = 0;`,
			},
			{
				Statement: `set enable_nestloop = 0;`,
			},
			{
				Statement: `create temp table a (i integer);`,
			},
			{
				Statement: `create temp table b (x integer, y integer);`,
			},
			{
				Statement: `select * from a left join b on i = x and i = y and x = i;`,
				Results:   []sql.Row{},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `create type mycomptype as (id int, v bigint);`,
			},
			{
				Statement: `create temp table tidv (idv mycomptype);`,
			},
			{
				Statement: `create index on tidv (idv);`,
			},
			{
				Statement: `explain (costs off)
select a.idv, b.idv from tidv a, tidv b where a.idv = b.idv;`,
				Results: []sql.Row{{`Merge Join`}, {`Merge Cond: (a.idv = b.idv)`}, {`->  Index Only Scan using tidv_idv_idx on tidv a`}, {`->  Materialize`}, {`->  Index Only Scan using tidv_idv_idx on tidv b`}},
			},
			{
				Statement: `set enable_mergejoin = 0;`,
			},
			{
				Statement: `set enable_hashjoin = 0;`,
			},
			{
				Statement: `explain (costs off)
select a.idv, b.idv from tidv a, tidv b where a.idv = b.idv;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Seq Scan on tidv a`}, {`->  Index Only Scan using tidv_idv_idx on tidv b`}, {`Index Cond: (idv = a.idv)`}},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `select t1.q2, count(t2.*)
from int8_tbl t1 left join int8_tbl t2 on (t1.q2 = t2.q1)
group by t1.q2 order by 1;`,
				Results: []sql.Row{{-4567890123456789, 0}, {123, 2}, {456, 0}, {4567890123456789, 6}},
			},
			{
				Statement: `select t1.q2, count(t2.*)
from int8_tbl t1 left join (select * from int8_tbl) t2 on (t1.q2 = t2.q1)
group by t1.q2 order by 1;`,
				Results: []sql.Row{{-4567890123456789, 0}, {123, 2}, {456, 0}, {4567890123456789, 6}},
			},
			{
				Statement: `select t1.q2, count(t2.*)
from int8_tbl t1 left join (select * from int8_tbl offset 0) t2 on (t1.q2 = t2.q1)
group by t1.q2 order by 1;`,
				Results: []sql.Row{{-4567890123456789, 0}, {123, 2}, {456, 0}, {4567890123456789, 6}},
			},
			{
				Statement: `select t1.q2, count(t2.*)
from int8_tbl t1 left join
  (select q1, case when q2=1 then 1 else q2 end as q2 from int8_tbl) t2
  on (t1.q2 = t2.q1)
group by t1.q2 order by 1;`,
				Results: []sql.Row{{-4567890123456789, 0}, {123, 2}, {456, 0}, {4567890123456789, 6}},
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `create temp table a (
     code char not null,
     constraint a_pk primary key (code)
);`,
			},
			{
				Statement: `create temp table b (
     a char not null,
     num integer not null,
     constraint b_pk primary key (a, num)
);`,
			},
			{
				Statement: `create temp table c (
     name char not null,
     a char,
     constraint c_pk primary key (name)
);`,
			},
			{
				Statement: `insert into a (code) values ('p');`,
			},
			{
				Statement: `insert into a (code) values ('q');`,
			},
			{
				Statement: `insert into b (a, num) values ('p', 1);`,
			},
			{
				Statement: `insert into b (a, num) values ('p', 2);`,
			},
			{
				Statement: `insert into c (name, a) values ('A', 'p');`,
			},
			{
				Statement: `insert into c (name, a) values ('B', 'q');`,
			},
			{
				Statement: `insert into c (name, a) values ('C', null);`,
			},
			{
				Statement: `select c.name, ss.code, ss.b_cnt, ss.const
from c left join
  (select a.code, coalesce(b_grp.cnt, 0) as b_cnt, -1 as const
   from a left join
     (select count(1) as cnt, b.a from b group by b.a) as b_grp
     on a.code = b_grp.a
  ) as ss
  on (c.a = ss.code)
order by c.name;`,
				Results: []sql.Row{{`A`, `p`, 2, -1}, {`B`, `q`, 0, -1}, {`C`, ``, ``, ``}},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `SELECT * FROM
( SELECT 1 as key1 ) sub1
LEFT JOIN
( SELECT sub3.key3, sub4.value2, COALESCE(sub4.value2, 66) as value3 FROM
    ( SELECT 1 as key3 ) sub3
    LEFT JOIN
    ( SELECT sub5.key5, COALESCE(sub6.value1, 1) as value2 FROM
        ( SELECT 1 as key5 ) sub5
        LEFT JOIN
        ( SELECT 2 as key6, 42 as value1 ) sub6
        ON sub5.key5 = sub6.key6
    ) sub4
    ON sub4.key5 = sub3.key3
) sub2
ON sub1.key1 = sub2.key3;`,
				Results: []sql.Row{{1, 1, 1, 1}},
			},
			{
				Statement: `SELECT * FROM
( SELECT 1 as key1 ) sub1
LEFT JOIN
( SELECT sub3.key3, value2, COALESCE(value2, 66) as value3 FROM
    ( SELECT 1 as key3 ) sub3
    LEFT JOIN
    ( SELECT sub5.key5, COALESCE(sub6.value1, 1) as value2 FROM
        ( SELECT 1 as key5 ) sub5
        LEFT JOIN
        ( SELECT 2 as key6, 42 as value1 ) sub6
        ON sub5.key5 = sub6.key6
    ) sub4
    ON sub4.key5 = sub3.key3
) sub2
ON sub1.key1 = sub2.key3;`,
				Results: []sql.Row{{1, 1, 1, 1}},
			},
			{
				Statement: `EXPLAIN (COSTS OFF)
SELECT qq, unique1
  FROM
  ( SELECT COALESCE(q1, 0) AS qq FROM int8_tbl a ) AS ss1
  FULL OUTER JOIN
  ( SELECT COALESCE(q2, -1) AS qq FROM int8_tbl b ) AS ss2
  USING (qq)
  INNER JOIN tenk1 c ON qq = unique2;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Hash Full Join`}, {`Hash Cond: ((COALESCE(a.q1, '0'::bigint)) = (COALESCE(b.q2, '-1'::bigint)))`}, {`->  Seq Scan on int8_tbl a`}, {`->  Hash`}, {`->  Seq Scan on int8_tbl b`}, {`->  Index Scan using tenk1_unique2 on tenk1 c`}, {`Index Cond: (unique2 = COALESCE((COALESCE(a.q1, '0'::bigint)), (COALESCE(b.q2, '-1'::bigint))))`}},
			},
			{
				Statement: `SELECT qq, unique1
  FROM
  ( SELECT COALESCE(q1, 0) AS qq FROM int8_tbl a ) AS ss1
  FULL OUTER JOIN
  ( SELECT COALESCE(q2, -1) AS qq FROM int8_tbl b ) AS ss2
  USING (qq)
  INNER JOIN tenk1 c ON qq = unique2;`,
				Results: []sql.Row{{123, 4596}, {123, 4596}, {456, 7318}},
			},
			{
				Statement: `create temp table nt1 (
  id int primary key,
  a1 boolean,
  a2 boolean
);`,
			},
			{
				Statement: `create temp table nt2 (
  id int primary key,
  nt1_id int,
  b1 boolean,
  b2 boolean,
  foreign key (nt1_id) references nt1(id)
);`,
			},
			{
				Statement: `create temp table nt3 (
  id int primary key,
  nt2_id int,
  c1 boolean,
  foreign key (nt2_id) references nt2(id)
);`,
			},
			{
				Statement: `insert into nt1 values (1,true,true);`,
			},
			{
				Statement: `insert into nt1 values (2,true,false);`,
			},
			{
				Statement: `insert into nt1 values (3,false,false);`,
			},
			{
				Statement: `insert into nt2 values (1,1,true,true);`,
			},
			{
				Statement: `insert into nt2 values (2,2,true,false);`,
			},
			{
				Statement: `insert into nt2 values (3,3,false,false);`,
			},
			{
				Statement: `insert into nt3 values (1,1,true);`,
			},
			{
				Statement: `insert into nt3 values (2,2,false);`,
			},
			{
				Statement: `insert into nt3 values (3,3,true);`,
			},
			{
				Statement: `explain (costs off)
select nt3.id
from nt3 as nt3
  left join
    (select nt2.*, (nt2.b1 and ss1.a3) AS b3
     from nt2 as nt2
       left join
         (select nt1.*, (nt1.id is not null) as a3 from nt1) as ss1
         on ss1.id = nt2.nt1_id
    ) as ss2
    on ss2.id = nt3.nt2_id
where nt3.id = 1 and ss2.b3;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Nested Loop`}, {`->  Index Scan using nt3_pkey on nt3`}, {`Index Cond: (id = 1)`}, {`->  Index Scan using nt2_pkey on nt2`}, {`Index Cond: (id = nt3.nt2_id)`}, {`->  Index Only Scan using nt1_pkey on nt1`}, {`Index Cond: (id = nt2.nt1_id)`}, {`Filter: (nt2.b1 AND (id IS NOT NULL))`}},
			},
			{
				Statement: `select nt3.id
from nt3 as nt3
  left join
    (select nt2.*, (nt2.b1 and ss1.a3) AS b3
     from nt2 as nt2
       left join
         (select nt1.*, (nt1.id is not null) as a3 from nt1) as ss1
         on ss1.id = nt2.nt1_id
    ) as ss2
    on ss2.id = nt3.nt2_id
where nt3.id = 1 and ss2.b3;`,
				Results: []sql.Row{{1}},
			},
			{
				Statement: `explain (costs off)
select * from
  int8_tbl t1 left join
  (select q1 as x, 42 as y from int8_tbl t2) ss
  on t1.q2 = ss.x
where
  1 = (select 1 from int8_tbl t3 where ss.y is not null limit 1)
order by 1,2;`,
				Results: []sql.Row{{`Sort`}, {`Sort Key: t1.q1, t1.q2`}, {`->  Hash Left Join`}, {`Hash Cond: (t1.q2 = t2.q1)`}, {`Filter: (1 = (SubPlan 1))`}, {`->  Seq Scan on int8_tbl t1`}, {`->  Hash`}, {`->  Seq Scan on int8_tbl t2`}, {`SubPlan 1`}, {`->  Limit`}, {`->  Result`}, {`One-Time Filter: ((42) IS NOT NULL)`}, {`->  Seq Scan on int8_tbl t3`}},
			},
			{
				Statement: `select * from
  int8_tbl t1 left join
  (select q1 as x, 42 as y from int8_tbl t2) ss
  on t1.q2 = ss.x
where
  1 = (select 1 from int8_tbl t3 where ss.y is not null limit 1)
order by 1,2;`,
				Results: []sql.Row{{123, 4567890123456789, 4567890123456789, 42}, {123, 4567890123456789, 4567890123456789, 42}, {123, 4567890123456789, 4567890123456789, 42}, {4567890123456789, 123, 123, 42}, {4567890123456789, 123, 123, 42}, {4567890123456789, 4567890123456789, 4567890123456789, 42}, {4567890123456789, 4567890123456789, 4567890123456789, 42}, {4567890123456789, 4567890123456789, 4567890123456789, 42}},
			},
			{
				Statement: `explain (costs off)
select * from
  int4_tbl as i41,
  lateral
    (select 1 as x from
      (select i41.f1 as lat,
              i42.f1 as loc from
         int8_tbl as i81, int4_tbl as i42) as ss1
      right join int4_tbl as i43 on (i43.f1 > 1)
      where ss1.loc = ss1.lat) as ss2
where i41.f1 > 0;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Nested Loop`}, {`->  Seq Scan on int4_tbl i41`}, {`Filter: (f1 > 0)`}, {`->  Nested Loop`}, {`Join Filter: (i41.f1 = i42.f1)`}, {`->  Seq Scan on int8_tbl i81`}, {`->  Materialize`}, {`->  Seq Scan on int4_tbl i42`}, {`->  Materialize`}, {`->  Seq Scan on int4_tbl i43`}, {`Filter: (f1 > 1)`}},
			},
			{
				Statement: `select * from
  int4_tbl as i41,
  lateral
    (select 1 as x from
      (select i41.f1 as lat,
              i42.f1 as loc from
         int8_tbl as i81, int4_tbl as i42) as ss1
      right join int4_tbl as i43 on (i43.f1 > 1)
      where ss1.loc = ss1.lat) as ss2
where i41.f1 > 0;`,
				Results: []sql.Row{{123456, 1}, {123456, 1}, {123456, 1}, {123456, 1}, {123456, 1}, {123456, 1}, {123456, 1}, {123456, 1}, {123456, 1}, {123456, 1}, {2147483647, 1}, {2147483647, 1}, {2147483647, 1}, {2147483647, 1}, {2147483647, 1}, {2147483647, 1}, {2147483647, 1}, {2147483647, 1}, {2147483647, 1}, {2147483647, 1}},
			},
			{
				Statement: `select * from int4_tbl a full join int4_tbl b on true;`,
				Results:   []sql.Row{{0, 0}, {0, 123456}, {0, -123456}, {0, 2147483647}, {0, -2147483647}, {123456, 0}, {123456, 123456}, {123456, -123456}, {123456, 2147483647}, {123456, -2147483647}, {-123456, 0}, {-123456, 123456}, {-123456, -123456}, {-123456, 2147483647}, {-123456, -2147483647}, {2147483647, 0}, {2147483647, 123456}, {2147483647, -123456}, {2147483647, 2147483647}, {2147483647, -2147483647}, {-2147483647, 0}, {-2147483647, 123456}, {-2147483647, -123456}, {-2147483647, 2147483647}, {-2147483647, -2147483647}},
			},
			{
				Statement: `select * from int4_tbl a full join int4_tbl b on false;`,
				Results:   []sql.Row{{``, 0}, {``, 123456}, {``, -123456}, {``, 2147483647}, {``, -2147483647}, {0, ``}, {123456, ``}, {-123456, ``}, {2147483647, ``}, {-2147483647, ``}},
			},
			{
				Statement: `create temp table q1 as select 1 as q1;`,
			},
			{
				Statement: `create temp table q2 as select 0 as q2;`,
			},
			{
				Statement: `analyze q1;`,
			},
			{
				Statement: `analyze q2;`,
			},
			{
				Statement: `explain (costs off)
select * from
  tenk1 join int4_tbl on f1 = twothousand,
  q1, q2
where q1 = thousand or q2 = thousand;`,
				Results: []sql.Row{{`Hash Join`}, {`Hash Cond: (tenk1.twothousand = int4_tbl.f1)`}, {`->  Nested Loop`}, {`->  Nested Loop`}, {`->  Seq Scan on q1`}, {`->  Seq Scan on q2`}, {`->  Bitmap Heap Scan on tenk1`}, {`Recheck Cond: ((q1.q1 = thousand) OR (q2.q2 = thousand))`}, {`->  BitmapOr`}, {`->  Bitmap Index Scan on tenk1_thous_tenthous`}, {`Index Cond: (thousand = q1.q1)`}, {`->  Bitmap Index Scan on tenk1_thous_tenthous`}, {`Index Cond: (thousand = q2.q2)`}, {`->  Hash`}, {`->  Seq Scan on int4_tbl`}},
			},
			{
				Statement: `explain (costs off)
select * from
  tenk1 join int4_tbl on f1 = twothousand,
  q1, q2
where thousand = (q1 + q2);`,
				Results: []sql.Row{{`Hash Join`}, {`Hash Cond: (tenk1.twothousand = int4_tbl.f1)`}, {`->  Nested Loop`}, {`->  Nested Loop`}, {`->  Seq Scan on q1`}, {`->  Seq Scan on q2`}, {`->  Bitmap Heap Scan on tenk1`}, {`Recheck Cond: (thousand = (q1.q1 + q2.q2))`}, {`->  Bitmap Index Scan on tenk1_thous_tenthous`}, {`Index Cond: (thousand = (q1.q1 + q2.q2))`}, {`->  Hash`}, {`->  Seq Scan on int4_tbl`}},
			},
			{
				Statement: `explain (costs off)
select * from
  tenk1, int8_tbl a, int8_tbl b
where thousand = a.q1 and tenthous = b.q1 and a.q2 = 1 and b.q2 = 2;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Seq Scan on int8_tbl b`}, {`Filter: (q2 = 2)`}, {`->  Nested Loop`}, {`->  Seq Scan on int8_tbl a`}, {`Filter: (q2 = 1)`}, {`->  Index Scan using tenk1_thous_tenthous on tenk1`}, {`Index Cond: ((thousand = a.q1) AND (tenthous = b.q1))`}},
			},
			{
				Statement: `explain (costs off)
select t1.unique2, t1.stringu1, t2.unique1, t2.stringu2 from
  tenk1 t1
  inner join int4_tbl i1
    left join (select v1.x2, v2.y1, 11 AS d1
               from (select 1,0 from onerow) v1(x1,x2)
               left join (select 3,1 from onerow) v2(y1,y2)
               on v1.x1 = v2.y2) subq1
    on (i1.f1 = subq1.x2)
  on (t1.unique2 = subq1.d1)
  left join tenk1 t2
  on (subq1.y1 = t2.unique1)
where t1.unique2 < 42 and t1.stringu1 > t2.stringu2;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Nested Loop`}, {`Join Filter: (t1.stringu1 > t2.stringu2)`}, {`->  Nested Loop`}, {`->  Nested Loop`}, {`->  Seq Scan on onerow`}, {`->  Seq Scan on onerow onerow_1`}, {`->  Index Scan using tenk1_unique2 on tenk1 t1`}, {`Index Cond: ((unique2 = (11)) AND (unique2 < 42))`}, {`->  Index Scan using tenk1_unique1 on tenk1 t2`}, {`Index Cond: (unique1 = (3))`}, {`->  Seq Scan on int4_tbl i1`}, {`Filter: (f1 = 0)`}},
			},
			{
				Statement: `select t1.unique2, t1.stringu1, t2.unique1, t2.stringu2 from
  tenk1 t1
  inner join int4_tbl i1
    left join (select v1.x2, v2.y1, 11 AS d1
               from (select 1,0 from onerow) v1(x1,x2)
               left join (select 3,1 from onerow) v2(y1,y2)
               on v1.x1 = v2.y2) subq1
    on (i1.f1 = subq1.x2)
  on (t1.unique2 = subq1.d1)
  left join tenk1 t2
  on (subq1.y1 = t2.unique1)
where t1.unique2 < 42 and t1.stringu1 > t2.stringu2;`,
				Results: []sql.Row{{11, `WFAAAA`, 3, `LKIAAA`}},
			},
			{
				Statement: `select ss1.d1 from
  tenk1 as t1
  inner join tenk1 as t2
  on t1.tenthous = t2.ten
  inner join
    int8_tbl as i8
    left join int4_tbl as i4
      inner join (select 64::information_schema.cardinal_number as d1
                  from tenk1 t3,
                       lateral (select abs(t3.unique1) + random()) ss0(x)
                  where t3.fivethous < 0) as ss1
      on i4.f1 = ss1.d1
    on i8.q1 = i4.f1
  on t1.tenthous = ss1.d1
where t1.unique1 < i4.f1;`,
				Results: []sql.Row{},
			},
			{
				Statement: `explain (costs off)
select t1.unique2, t1.stringu1, t2.unique1, t2.stringu2 from
  tenk1 t1
  inner join int4_tbl i1
    left join (select v1.x2, v2.y1, 11 AS d1
               from (values(1,0)) v1(x1,x2)
               left join (values(3,1)) v2(y1,y2)
               on v1.x1 = v2.y2) subq1
    on (i1.f1 = subq1.x2)
  on (t1.unique2 = subq1.d1)
  left join tenk1 t2
  on (subq1.y1 = t2.unique1)
where t1.unique2 < 42 and t1.stringu1 > t2.stringu2;`,
				Results: []sql.Row{{`Nested Loop`}, {`Join Filter: (t1.stringu1 > t2.stringu2)`}, {`->  Nested Loop`}, {`->  Seq Scan on int4_tbl i1`}, {`Filter: (f1 = 0)`}, {`->  Index Scan using tenk1_unique2 on tenk1 t1`}, {`Index Cond: ((unique2 = (11)) AND (unique2 < 42))`}, {`->  Index Scan using tenk1_unique1 on tenk1 t2`}, {`Index Cond: (unique1 = (3))`}},
			},
			{
				Statement: `select t1.unique2, t1.stringu1, t2.unique1, t2.stringu2 from
  tenk1 t1
  inner join int4_tbl i1
    left join (select v1.x2, v2.y1, 11 AS d1
               from (values(1,0)) v1(x1,x2)
               left join (values(3,1)) v2(y1,y2)
               on v1.x1 = v2.y2) subq1
    on (i1.f1 = subq1.x2)
  on (t1.unique2 = subq1.d1)
  left join tenk1 t2
  on (subq1.y1 = t2.unique1)
where t1.unique2 < 42 and t1.stringu1 > t2.stringu2;`,
				Results: []sql.Row{{11, `WFAAAA`, 3, `LKIAAA`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  (select 1 as x) ss1 left join (select 2 as y) ss2 on (true),
  lateral (select ss2.y as z limit 1) ss3;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: 1, (2), ((2))`}, {`->  Result`}, {`Output: 2`}, {`->  Limit`}, {`Output: ((2))`}, {`->  Result`}, {`Output: (2)`}},
			},
			{
				Statement: `select * from
  (select 1 as x) ss1 left join (select 2 as y) ss2 on (true),
  lateral (select ss2.y as z limit 1) ss3;`,
				Results: []sql.Row{{1, 2, 2}},
			},
			{
				Statement: `explain (costs off)
select * from
  (select 0 as z) as t1
  left join
  (select true as a) as t2
  on true,
  lateral (select true as b
           union all
           select a as b) as t3
where b;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Result`}, {`->  Append`}, {`->  Result`}, {`->  Result`}, {`One-Time Filter: (true)`}},
			},
			{
				Statement: `select * from
  (select 0 as z) as t1
  left join
  (select true as a) as t2
  on true,
  lateral (select true as b
           union all
           select a as b) as t3
where b;`,
				Results: []sql.Row{{0, true, true}, {0, true, true}},
			},
			{
				Statement: `explain (verbose, costs off)
with ctetable as not materialized ( select 1 as f1 )
select * from ctetable c1
where f1 in ( select c3.f1 from ctetable c2 full join ctetable c3 on true );`,
				Results: []sql.Row{{`Result`}, {`Output: 1`}, {`One-Time Filter: (1 = 1)`}},
			},
			{
				Statement: `with ctetable as not materialized ( select 1 as f1 )
select * from ctetable c1
where f1 in ( select c3.f1 from ctetable c2 full join ctetable c3 on true );`,
				Results: []sql.Row{{1}},
			},
			{
				Statement: `create function f_immutable_int4(i integer) returns integer as
$$ begin return i; end; $$ language plpgsql immutable;`,
			},
			{
				Statement: `explain (costs off)
select unique1 from tenk1, (select * from f_immutable_int4(1) x) x
where x = unique1;`,
				Results: []sql.Row{{`Index Only Scan using tenk1_unique1 on tenk1`}, {`Index Cond: (unique1 = 1)`}},
			},
			{
				Statement: `explain (verbose, costs off)
select unique1, x.*
from tenk1, (select *, random() from f_immutable_int4(1) x) x
where x = unique1;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: tenk1.unique1, (1), (random())`}, {`->  Result`}, {`Output: 1, random()`}, {`->  Index Only Scan using tenk1_unique1 on public.tenk1`}, {`Output: tenk1.unique1`}, {`Index Cond: (tenk1.unique1 = (1))`}},
			},
			{
				Statement: `explain (costs off)
select unique1 from tenk1, f_immutable_int4(1) x where x = unique1;`,
				Results: []sql.Row{{`Index Only Scan using tenk1_unique1 on tenk1`}, {`Index Cond: (unique1 = 1)`}},
			},
			{
				Statement: `explain (costs off)
select unique1 from tenk1, lateral f_immutable_int4(1) x where x = unique1;`,
				Results: []sql.Row{{`Index Only Scan using tenk1_unique1 on tenk1`}, {`Index Cond: (unique1 = 1)`}},
			},
			{
				Statement: `explain (costs off)
select unique1 from tenk1, lateral f_immutable_int4(1) x where x in (select 17);`,
				Results: []sql.Row{{`Result`}, {`One-Time Filter: false`}},
			},
			{
				Statement: `explain (costs off)
select unique1, x from tenk1 join f_immutable_int4(1) x on unique1 = x;`,
				Results: []sql.Row{{`Index Only Scan using tenk1_unique1 on tenk1`}, {`Index Cond: (unique1 = 1)`}},
			},
			{
				Statement: `explain (costs off)
select unique1, x from tenk1 left join f_immutable_int4(1) x on unique1 = x;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Join Filter: (tenk1.unique1 = 1)`}, {`->  Index Only Scan using tenk1_unique1 on tenk1`}, {`->  Materialize`}, {`->  Result`}},
			},
			{
				Statement: `explain (costs off)
select unique1, x from tenk1 right join f_immutable_int4(1) x on unique1 = x;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`->  Result`}, {`->  Index Only Scan using tenk1_unique1 on tenk1`}, {`Index Cond: (unique1 = 1)`}},
			},
			{
				Statement: `explain (costs off)
select unique1, x from tenk1 full join f_immutable_int4(1) x on unique1 = x;`,
				Results: []sql.Row{{`Merge Full Join`}, {`Merge Cond: (tenk1.unique1 = (1))`}, {`->  Index Only Scan using tenk1_unique1 on tenk1`}, {`->  Sort`}, {`Sort Key: (1)`}, {`->  Result`}},
			},
			{
				Statement: `explain (costs off)
select unique1 from tenk1, f_immutable_int4(1) x where x = 42;`,
				Results: []sql.Row{{`Result`}, {`One-Time Filter: false`}},
			},
			{
				Statement: `explain (costs off)
select nt3.id
from nt3 as nt3
  left join
    (select nt2.*, (nt2.b1 or i4 = 42) AS b3
     from nt2 as nt2
       left join
         f_immutable_int4(0) i4
         on i4 = nt2.nt1_id
    ) as ss2
    on ss2.id = nt3.nt2_id
where nt3.id = 1 and ss2.b3;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Filter: ((nt2.b1 OR ((0) = 42)))`}, {`->  Index Scan using nt3_pkey on nt3`}, {`Index Cond: (id = 1)`}, {`->  Nested Loop Left Join`}, {`Join Filter: (0 = nt2.nt1_id)`}, {`->  Index Scan using nt2_pkey on nt2`}, {`Index Cond: (id = nt3.nt2_id)`}, {`->  Result`}},
			},
			{
				Statement: `drop function f_immutable_int4(int);`,
			},
			{
				Statement: `create function mki8(bigint, bigint) returns int8_tbl as
$$select row($1,$2)::int8_tbl$$ language sql;`,
			},
			{
				Statement: `create function mki4(int) returns int4_tbl as
$$select row($1)::int4_tbl$$ language sql;`,
			},
			{
				Statement: `explain (verbose, costs off)
select * from mki8(1,2);`,
				Results: []sql.Row{{`Function Scan on mki8`}, {`Output: q1, q2`}, {`Function Call: '(1,2)'::int8_tbl`}},
			},
			{
				Statement: `select * from mki8(1,2);`,
				Results:   []sql.Row{{1, 2}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from mki4(42);`,
				Results: []sql.Row{{`Function Scan on mki4`}, {`Output: f1`}, {`Function Call: '(42)'::int4_tbl`}},
			},
			{
				Statement: `select * from mki4(42);`,
				Results:   []sql.Row{{42}},
			},
			{
				Statement: `drop function mki8(bigint, bigint);`,
			},
			{
				Statement: `drop function mki4(int);`,
			},
			{
				Statement: `explain (costs off)
select * from tenk1 a join tenk1 b on
  (a.unique1 = 1 and b.unique1 = 2) or (a.unique2 = 3 and b.hundred = 4);`,
				Results: []sql.Row{{`Nested Loop`}, {`Join Filter: (((a.unique1 = 1) AND (b.unique1 = 2)) OR ((a.unique2 = 3) AND (b.hundred = 4)))`}, {`->  Bitmap Heap Scan on tenk1 b`}, {`Recheck Cond: ((unique1 = 2) OR (hundred = 4))`}, {`->  BitmapOr`}, {`->  Bitmap Index Scan on tenk1_unique1`}, {`Index Cond: (unique1 = 2)`}, {`->  Bitmap Index Scan on tenk1_hundred`}, {`Index Cond: (hundred = 4)`}, {`->  Materialize`}, {`->  Bitmap Heap Scan on tenk1 a`}, {`Recheck Cond: ((unique1 = 1) OR (unique2 = 3))`}, {`->  BitmapOr`}, {`->  Bitmap Index Scan on tenk1_unique1`}, {`Index Cond: (unique1 = 1)`}, {`->  Bitmap Index Scan on tenk1_unique2`}, {`Index Cond: (unique2 = 3)`}},
			},
			{
				Statement: `explain (costs off)
select * from tenk1 a join tenk1 b on
  (a.unique1 = 1 and b.unique1 = 2) or (a.unique2 = 3 and b.ten = 4);`,
				Results: []sql.Row{{`Nested Loop`}, {`Join Filter: (((a.unique1 = 1) AND (b.unique1 = 2)) OR ((a.unique2 = 3) AND (b.ten = 4)))`}, {`->  Seq Scan on tenk1 b`}, {`Filter: ((unique1 = 2) OR (ten = 4))`}, {`->  Materialize`}, {`->  Bitmap Heap Scan on tenk1 a`}, {`Recheck Cond: ((unique1 = 1) OR (unique2 = 3))`}, {`->  BitmapOr`}, {`->  Bitmap Index Scan on tenk1_unique1`}, {`Index Cond: (unique1 = 1)`}, {`->  Bitmap Index Scan on tenk1_unique2`}, {`Index Cond: (unique2 = 3)`}},
			},
			{
				Statement: `explain (costs off)
select * from tenk1 a join tenk1 b on
  (a.unique1 = 1 and b.unique1 = 2) or
  ((a.unique2 = 3 or a.unique2 = 7) and b.hundred = 4);`,
				Results: []sql.Row{{`Nested Loop`}, {`Join Filter: (((a.unique1 = 1) AND (b.unique1 = 2)) OR (((a.unique2 = 3) OR (a.unique2 = 7)) AND (b.hundred = 4)))`}, {`->  Bitmap Heap Scan on tenk1 b`}, {`Recheck Cond: ((unique1 = 2) OR (hundred = 4))`}, {`->  BitmapOr`}, {`->  Bitmap Index Scan on tenk1_unique1`}, {`Index Cond: (unique1 = 2)`}, {`->  Bitmap Index Scan on tenk1_hundred`}, {`Index Cond: (hundred = 4)`}, {`->  Materialize`}, {`->  Bitmap Heap Scan on tenk1 a`}, {`Recheck Cond: ((unique1 = 1) OR (unique2 = 3) OR (unique2 = 7))`}, {`->  BitmapOr`}, {`->  Bitmap Index Scan on tenk1_unique1`}, {`Index Cond: (unique1 = 1)`}, {`->  Bitmap Index Scan on tenk1_unique2`}, {`Index Cond: (unique2 = 3)`}, {`->  Bitmap Index Scan on tenk1_unique2`}, {`Index Cond: (unique2 = 7)`}},
			},
			{
				Statement: `explain (costs off)
select * from tenk1 t1 left join
  (tenk1 t2 join tenk1 t3 on t2.thousand = t3.unique2)
  on t1.hundred = t2.hundred and t1.ten = t3.ten
where t1.unique1 = 1;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`->  Index Scan using tenk1_unique1 on tenk1 t1`}, {`Index Cond: (unique1 = 1)`}, {`->  Nested Loop`}, {`Join Filter: (t1.ten = t3.ten)`}, {`->  Bitmap Heap Scan on tenk1 t2`}, {`Recheck Cond: (t1.hundred = hundred)`}, {`->  Bitmap Index Scan on tenk1_hundred`}, {`Index Cond: (hundred = t1.hundred)`}, {`->  Index Scan using tenk1_unique2 on tenk1 t3`}, {`Index Cond: (unique2 = t2.thousand)`}},
			},
			{
				Statement: `explain (costs off)
select * from tenk1 t1 left join
  (tenk1 t2 join tenk1 t3 on t2.thousand = t3.unique2)
  on t1.hundred = t2.hundred and t1.ten + t2.ten = t3.ten
where t1.unique1 = 1;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`->  Index Scan using tenk1_unique1 on tenk1 t1`}, {`Index Cond: (unique1 = 1)`}, {`->  Nested Loop`}, {`Join Filter: ((t1.ten + t2.ten) = t3.ten)`}, {`->  Bitmap Heap Scan on tenk1 t2`}, {`Recheck Cond: (t1.hundred = hundred)`}, {`->  Bitmap Index Scan on tenk1_hundred`}, {`Index Cond: (hundred = t1.hundred)`}, {`->  Index Scan using tenk1_unique2 on tenk1 t3`}, {`Index Cond: (unique2 = t2.thousand)`}},
			},
			{
				Statement: `explain (costs off)
select count(*) from
  tenk1 a join tenk1 b on a.unique1 = b.unique2
  left join tenk1 c on a.unique2 = b.unique1 and c.thousand = a.thousand
  join int4_tbl on b.thousand = f1;`,
				Results: []sql.Row{{`Aggregate`}, {`->  Nested Loop Left Join`}, {`Join Filter: (a.unique2 = b.unique1)`}, {`->  Nested Loop`}, {`->  Nested Loop`}, {`->  Seq Scan on int4_tbl`}, {`->  Bitmap Heap Scan on tenk1 b`}, {`Recheck Cond: (thousand = int4_tbl.f1)`}, {`->  Bitmap Index Scan on tenk1_thous_tenthous`}, {`Index Cond: (thousand = int4_tbl.f1)`}, {`->  Index Scan using tenk1_unique1 on tenk1 a`}, {`Index Cond: (unique1 = b.unique2)`}, {`->  Index Only Scan using tenk1_thous_tenthous on tenk1 c`}, {`Index Cond: (thousand = a.thousand)`}},
			},
			{
				Statement: `select count(*) from
  tenk1 a join tenk1 b on a.unique1 = b.unique2
  left join tenk1 c on a.unique2 = b.unique1 and c.thousand = a.thousand
  join int4_tbl on b.thousand = f1;`,
				Results: []sql.Row{{10}},
			},
			{
				Statement: `explain (costs off)
select b.unique1 from
  tenk1 a join tenk1 b on a.unique1 = b.unique2
  left join tenk1 c on b.unique1 = 42 and c.thousand = a.thousand
  join int4_tbl i1 on b.thousand = f1
  right join int4_tbl i2 on i2.f1 = b.tenthous
  order by 1;`,
				Results: []sql.Row{{`Sort`}, {`Sort Key: b.unique1`}, {`->  Nested Loop Left Join`}, {`->  Seq Scan on int4_tbl i2`}, {`->  Nested Loop Left Join`}, {`Join Filter: (b.unique1 = 42)`}, {`->  Nested Loop`}, {`->  Nested Loop`}, {`->  Seq Scan on int4_tbl i1`}, {`->  Index Scan using tenk1_thous_tenthous on tenk1 b`}, {`Index Cond: ((thousand = i1.f1) AND (tenthous = i2.f1))`}, {`->  Index Scan using tenk1_unique1 on tenk1 a`}, {`Index Cond: (unique1 = b.unique2)`}, {`->  Index Only Scan using tenk1_thous_tenthous on tenk1 c`}, {`Index Cond: (thousand = a.thousand)`}},
			},
			{
				Statement: `select b.unique1 from
  tenk1 a join tenk1 b on a.unique1 = b.unique2
  left join tenk1 c on b.unique1 = 42 and c.thousand = a.thousand
  join int4_tbl i1 on b.thousand = f1
  right join int4_tbl i2 on i2.f1 = b.tenthous
  order by 1;`,
				Results: []sql.Row{{0}, {``}, {``}, {``}, {``}},
			},
			{
				Statement: `explain (costs off)
select * from
(
  select unique1, q1, coalesce(unique1, -1) + q1 as fault
  from int8_tbl left join tenk1 on (q2 = unique2)
) ss
where fault = 122
order by fault;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Filter: ((COALESCE(tenk1.unique1, '-1'::integer) + int8_tbl.q1) = 122)`}, {`->  Seq Scan on int8_tbl`}, {`->  Index Scan using tenk1_unique2 on tenk1`}, {`Index Cond: (unique2 = int8_tbl.q2)`}},
			},
			{
				Statement: `select * from
(
  select unique1, q1, coalesce(unique1, -1) + q1 as fault
  from int8_tbl left join tenk1 on (q2 = unique2)
) ss
where fault = 122
order by fault;`,
				Results: []sql.Row{{``, 123, 122}},
			},
			{
				Statement: `explain (costs off)
select * from
(values (1, array[10,20]), (2, array[20,30])) as v1(v1x,v1ys)
left join (values (1, 10), (2, 20)) as v2(v2x,v2y) on v2x = v1x
left join unnest(v1ys) as u1(u1y) on u1y = v2y;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`->  Values Scan on "*VALUES*"`}, {`->  Hash Right Join`}, {`Hash Cond: (u1.u1y = "*VALUES*_1".column2)`}, {`Filter: ("*VALUES*_1".column1 = "*VALUES*".column1)`}, {`->  Function Scan on unnest u1`}, {`->  Hash`}, {`->  Values Scan on "*VALUES*_1"`}},
			},
			{
				Statement: `select * from
(values (1, array[10,20]), (2, array[20,30])) as v1(v1x,v1ys)
left join (values (1, 10), (2, 20)) as v2(v2x,v2y) on v2x = v1x
left join unnest(v1ys) as u1(u1y) on u1y = v2y;`,
				Results: []sql.Row{{1, `{10,20}`, 1, 10, 10}, {2, `{20,30}`, 2, 20, 20}},
			},
			{
				Statement: `explain (costs off)
select q1, unique2, thousand, hundred
  from int8_tbl a left join tenk1 b on q1 = unique2
  where coalesce(thousand,123) = q1 and q1 = coalesce(hundred,123);`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Filter: ((COALESCE(b.thousand, 123) = a.q1) AND (a.q1 = COALESCE(b.hundred, 123)))`}, {`->  Seq Scan on int8_tbl a`}, {`->  Index Scan using tenk1_unique2 on tenk1 b`}, {`Index Cond: (unique2 = a.q1)`}},
			},
			{
				Statement: `select q1, unique2, thousand, hundred
  from int8_tbl a left join tenk1 b on q1 = unique2
  where coalesce(thousand,123) = q1 and q1 = coalesce(hundred,123);`,
				Results: []sql.Row{},
			},
			{
				Statement: `explain (costs off)
select f1, unique2, case when unique2 is null then f1 else 0 end
  from int4_tbl a left join tenk1 b on f1 = unique2
  where (case when unique2 is null then f1 else 0 end) = 0;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Filter: (CASE WHEN (b.unique2 IS NULL) THEN a.f1 ELSE 0 END = 0)`}, {`->  Seq Scan on int4_tbl a`}, {`->  Index Only Scan using tenk1_unique2 on tenk1 b`}, {`Index Cond: (unique2 = a.f1)`}},
			},
			{
				Statement: `select f1, unique2, case when unique2 is null then f1 else 0 end
  from int4_tbl a left join tenk1 b on f1 = unique2
  where (case when unique2 is null then f1 else 0 end) = 0;`,
				Results: []sql.Row{{0, 0, 0}},
			},
			{
				Statement: `explain (costs off)
select a.unique1, b.unique1, c.unique1, coalesce(b.twothousand, a.twothousand)
  from tenk1 a left join tenk1 b on b.thousand = a.unique1                        left join tenk1 c on c.unique2 = coalesce(b.twothousand, a.twothousand)
  where a.unique2 < 10 and coalesce(b.twothousand, a.twothousand) = 44;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`->  Nested Loop Left Join`}, {`Filter: (COALESCE(b.twothousand, a.twothousand) = 44)`}, {`->  Index Scan using tenk1_unique2 on tenk1 a`}, {`Index Cond: (unique2 < 10)`}, {`->  Bitmap Heap Scan on tenk1 b`}, {`Recheck Cond: (thousand = a.unique1)`}, {`->  Bitmap Index Scan on tenk1_thous_tenthous`}, {`Index Cond: (thousand = a.unique1)`}, {`->  Index Scan using tenk1_unique2 on tenk1 c`}, {`Index Cond: ((unique2 = COALESCE(b.twothousand, a.twothousand)) AND (unique2 = 44))`}},
			},
			{
				Statement: `select a.unique1, b.unique1, c.unique1, coalesce(b.twothousand, a.twothousand)
  from tenk1 a left join tenk1 b on b.thousand = a.unique1                        left join tenk1 c on c.unique2 = coalesce(b.twothousand, a.twothousand)
  where a.unique2 < 10 and coalesce(b.twothousand, a.twothousand) = 44;`,
				Results: []sql.Row{},
			},
			{
				Statement: `explain (verbose, costs off)
select foo1.join_key as foo1_id, foo3.join_key AS foo3_id, bug_field from
  (values (0),(1)) foo1(join_key)
left join
  (select join_key, bug_field from
    (select ss1.join_key, ss1.bug_field from
      (select f1 as join_key, 666 as bug_field from int4_tbl i1) ss1
    ) foo2
   left join
    (select unique2 as join_key from tenk1 i2) ss2
   using (join_key)
  ) foo3
using (join_key);`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: "*VALUES*".column1, i1.f1, (666)`}, {`Join Filter: ("*VALUES*".column1 = i1.f1)`}, {`->  Values Scan on "*VALUES*"`}, {`Output: "*VALUES*".column1`}, {`->  Materialize`}, {`Output: i1.f1, (666)`}, {`->  Nested Loop Left Join`}, {`Output: i1.f1, 666`}, {`->  Seq Scan on public.int4_tbl i1`}, {`Output: i1.f1`}, {`->  Index Only Scan using tenk1_unique2 on public.tenk1 i2`}, {`Output: i2.unique2`}, {`Index Cond: (i2.unique2 = i1.f1)`}},
			},
			{
				Statement: `select foo1.join_key as foo1_id, foo3.join_key AS foo3_id, bug_field from
  (values (0),(1)) foo1(join_key)
left join
  (select join_key, bug_field from
    (select ss1.join_key, ss1.bug_field from
      (select f1 as join_key, 666 as bug_field from int4_tbl i1) ss1
    ) foo2
   left join
    (select unique2 as join_key from tenk1 i2) ss2
   using (join_key)
  ) foo3
using (join_key);`,
				Results: []sql.Row{{0, 0, 666}, {1, ``, ``}},
			},
			{
				Statement: `explain (verbose, costs off)
select t1.* from
  text_tbl t1
  left join (select *, '***'::text as d1 from int8_tbl i8b1) b1
    left join int8_tbl i8
      left join (select *, null::int as d2 from int8_tbl i8b2) b2
      on (i8.q1 = b2.q1)
    on (b2.d2 = b1.q2)
  on (t1.f1 = b1.d1)
  left join int4_tbl i4
  on (i8.q2 = i4.f1);`,
				Results: []sql.Row{{`Hash Left Join`}, {`Output: t1.f1`}, {`Hash Cond: (i8.q2 = i4.f1)`}, {`->  Nested Loop Left Join`}, {`Output: t1.f1, i8.q2`}, {`Join Filter: (t1.f1 = '***'::text)`}, {`->  Seq Scan on public.text_tbl t1`}, {`Output: t1.f1`}, {`->  Materialize`}, {`Output: i8.q2`}, {`->  Hash Right Join`}, {`Output: i8.q2`}, {`Hash Cond: ((NULL::integer) = i8b1.q2)`}, {`->  Hash Join`}, {`Output: i8.q2, (NULL::integer)`}, {`Hash Cond: (i8.q1 = i8b2.q1)`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`->  Hash`}, {`Output: i8b2.q1, (NULL::integer)`}, {`->  Seq Scan on public.int8_tbl i8b2`}, {`Output: i8b2.q1, NULL::integer`}, {`->  Hash`}, {`Output: i8b1.q2`}, {`->  Seq Scan on public.int8_tbl i8b1`}, {`Output: i8b1.q2`}, {`->  Hash`}, {`Output: i4.f1`}, {`->  Seq Scan on public.int4_tbl i4`}, {`Output: i4.f1`}},
			},
			{
				Statement: `select t1.* from
  text_tbl t1
  left join (select *, '***'::text as d1 from int8_tbl i8b1) b1
    left join int8_tbl i8
      left join (select *, null::int as d2 from int8_tbl i8b2) b2
      on (i8.q1 = b2.q1)
    on (b2.d2 = b1.q2)
  on (t1.f1 = b1.d1)
  left join int4_tbl i4
  on (i8.q2 = i4.f1);`,
				Results: []sql.Row{{`doh!`}, {`hi de ho neighbor`}},
			},
			{
				Statement: `explain (verbose, costs off)
select t1.* from
  text_tbl t1
  left join (select *, '***'::text as d1 from int8_tbl i8b1) b1
    left join int8_tbl i8
      left join (select *, null::int as d2 from int8_tbl i8b2, int4_tbl i4b2) b2
      on (i8.q1 = b2.q1)
    on (b2.d2 = b1.q2)
  on (t1.f1 = b1.d1)
  left join int4_tbl i4
  on (i8.q2 = i4.f1);`,
				Results: []sql.Row{{`Hash Left Join`}, {`Output: t1.f1`}, {`Hash Cond: (i8.q2 = i4.f1)`}, {`->  Nested Loop Left Join`}, {`Output: t1.f1, i8.q2`}, {`Join Filter: (t1.f1 = '***'::text)`}, {`->  Seq Scan on public.text_tbl t1`}, {`Output: t1.f1`}, {`->  Materialize`}, {`Output: i8.q2`}, {`->  Hash Right Join`}, {`Output: i8.q2`}, {`Hash Cond: ((NULL::integer) = i8b1.q2)`}, {`->  Hash Right Join`}, {`Output: i8.q2, (NULL::integer)`}, {`Hash Cond: (i8b2.q1 = i8.q1)`}, {`->  Nested Loop`}, {`Output: i8b2.q1, NULL::integer`}, {`->  Seq Scan on public.int8_tbl i8b2`}, {`Output: i8b2.q1, i8b2.q2`}, {`->  Materialize`}, {`->  Seq Scan on public.int4_tbl i4b2`}, {`->  Hash`}, {`Output: i8.q1, i8.q2`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`->  Hash`}, {`Output: i8b1.q2`}, {`->  Seq Scan on public.int8_tbl i8b1`}, {`Output: i8b1.q2`}, {`->  Hash`}, {`Output: i4.f1`}, {`->  Seq Scan on public.int4_tbl i4`}, {`Output: i4.f1`}},
			},
			{
				Statement: `select t1.* from
  text_tbl t1
  left join (select *, '***'::text as d1 from int8_tbl i8b1) b1
    left join int8_tbl i8
      left join (select *, null::int as d2 from int8_tbl i8b2, int4_tbl i4b2) b2
      on (i8.q1 = b2.q1)
    on (b2.d2 = b1.q2)
  on (t1.f1 = b1.d1)
  left join int4_tbl i4
  on (i8.q2 = i4.f1);`,
				Results: []sql.Row{{`doh!`}, {`hi de ho neighbor`}},
			},
			{
				Statement: `explain (verbose, costs off)
select t1.* from
  text_tbl t1
  left join (select *, '***'::text as d1 from int8_tbl i8b1) b1
    left join int8_tbl i8
      left join (select *, null::int as d2 from int8_tbl i8b2, int4_tbl i4b2
                 where q1 = f1) b2
      on (i8.q1 = b2.q1)
    on (b2.d2 = b1.q2)
  on (t1.f1 = b1.d1)
  left join int4_tbl i4
  on (i8.q2 = i4.f1);`,
				Results: []sql.Row{{`Hash Left Join`}, {`Output: t1.f1`}, {`Hash Cond: (i8.q2 = i4.f1)`}, {`->  Nested Loop Left Join`}, {`Output: t1.f1, i8.q2`}, {`Join Filter: (t1.f1 = '***'::text)`}, {`->  Seq Scan on public.text_tbl t1`}, {`Output: t1.f1`}, {`->  Materialize`}, {`Output: i8.q2`}, {`->  Hash Right Join`}, {`Output: i8.q2`}, {`Hash Cond: ((NULL::integer) = i8b1.q2)`}, {`->  Hash Right Join`}, {`Output: i8.q2, (NULL::integer)`}, {`Hash Cond: (i8b2.q1 = i8.q1)`}, {`->  Hash Join`}, {`Output: i8b2.q1, NULL::integer`}, {`Hash Cond: (i8b2.q1 = i4b2.f1)`}, {`->  Seq Scan on public.int8_tbl i8b2`}, {`Output: i8b2.q1, i8b2.q2`}, {`->  Hash`}, {`Output: i4b2.f1`}, {`->  Seq Scan on public.int4_tbl i4b2`}, {`Output: i4b2.f1`}, {`->  Hash`}, {`Output: i8.q1, i8.q2`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`->  Hash`}, {`Output: i8b1.q2`}, {`->  Seq Scan on public.int8_tbl i8b1`}, {`Output: i8b1.q2`}, {`->  Hash`}, {`Output: i4.f1`}, {`->  Seq Scan on public.int4_tbl i4`}, {`Output: i4.f1`}},
			},
			{
				Statement: `select t1.* from
  text_tbl t1
  left join (select *, '***'::text as d1 from int8_tbl i8b1) b1
    left join int8_tbl i8
      left join (select *, null::int as d2 from int8_tbl i8b2, int4_tbl i4b2
                 where q1 = f1) b2
      on (i8.q1 = b2.q1)
    on (b2.d2 = b1.q2)
  on (t1.f1 = b1.d1)
  left join int4_tbl i4
  on (i8.q2 = i4.f1);`,
				Results: []sql.Row{{`doh!`}, {`hi de ho neighbor`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  text_tbl t1
  inner join int8_tbl i8
  on i8.q2 = 456
  right join text_tbl t2
  on t1.f1 = 'doh!'
  left join int4_tbl i4
  on i8.q1 = i4.f1;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: t1.f1, i8.q1, i8.q2, t2.f1, i4.f1`}, {`->  Seq Scan on public.text_tbl t2`}, {`Output: t2.f1`}, {`->  Materialize`}, {`Output: i8.q1, i8.q2, i4.f1, t1.f1`}, {`->  Nested Loop`}, {`Output: i8.q1, i8.q2, i4.f1, t1.f1`}, {`->  Nested Loop Left Join`}, {`Output: i8.q1, i8.q2, i4.f1`}, {`Join Filter: (i8.q1 = i4.f1)`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`Filter: (i8.q2 = 456)`}, {`->  Seq Scan on public.int4_tbl i4`}, {`Output: i4.f1`}, {`->  Seq Scan on public.text_tbl t1`}, {`Output: t1.f1`}, {`Filter: (t1.f1 = 'doh!'::text)`}},
			},
			{
				Statement: `select * from
  text_tbl t1
  inner join int8_tbl i8
  on i8.q2 = 456
  right join text_tbl t2
  on t1.f1 = 'doh!'
  left join int4_tbl i4
  on i8.q1 = i4.f1;`,
				Results: []sql.Row{{`doh!`, 123, 456, `doh!`, ``}, {`doh!`, 123, 456, `hi de ho neighbor`, ``}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  text_tbl t1
  left join int8_tbl i8
  on i8.q2 = 123,
  lateral (select i8.q1, t2.f1 from text_tbl t2 limit 1) as ss
where t1.f1 = ss.f1;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: t1.f1, i8.q1, i8.q2, (i8.q1), t2.f1`}, {`Join Filter: (t1.f1 = t2.f1)`}, {`->  Nested Loop Left Join`}, {`Output: t1.f1, i8.q1, i8.q2`}, {`->  Seq Scan on public.text_tbl t1`}, {`Output: t1.f1`}, {`->  Materialize`}, {`Output: i8.q1, i8.q2`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`Filter: (i8.q2 = 123)`}, {`->  Memoize`}, {`Output: (i8.q1), t2.f1`}, {`Cache Key: i8.q1`}, {`Cache Mode: binary`}, {`->  Limit`}, {`Output: (i8.q1), t2.f1`}, {`->  Seq Scan on public.text_tbl t2`}, {`Output: i8.q1, t2.f1`}},
			},
			{
				Statement: `select * from
  text_tbl t1
  left join int8_tbl i8
  on i8.q2 = 123,
  lateral (select i8.q1, t2.f1 from text_tbl t2 limit 1) as ss
where t1.f1 = ss.f1;`,
				Results: []sql.Row{{`doh!`, 4567890123456789, 123, 4567890123456789, `doh!`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  text_tbl t1
  left join int8_tbl i8
  on i8.q2 = 123,
  lateral (select i8.q1, t2.f1 from text_tbl t2 limit 1) as ss1,
  lateral (select ss1.* from text_tbl t3 limit 1) as ss2
where t1.f1 = ss2.f1;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: t1.f1, i8.q1, i8.q2, (i8.q1), t2.f1, ((i8.q1)), (t2.f1)`}, {`Join Filter: (t1.f1 = (t2.f1))`}, {`->  Nested Loop`}, {`Output: t1.f1, i8.q1, i8.q2, (i8.q1), t2.f1`}, {`->  Nested Loop Left Join`}, {`Output: t1.f1, i8.q1, i8.q2`}, {`->  Seq Scan on public.text_tbl t1`}, {`Output: t1.f1`}, {`->  Materialize`}, {`Output: i8.q1, i8.q2`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`Filter: (i8.q2 = 123)`}, {`->  Memoize`}, {`Output: (i8.q1), t2.f1`}, {`Cache Key: i8.q1`}, {`Cache Mode: binary`}, {`->  Limit`}, {`Output: (i8.q1), t2.f1`}, {`->  Seq Scan on public.text_tbl t2`}, {`Output: i8.q1, t2.f1`}, {`->  Memoize`}, {`Output: ((i8.q1)), (t2.f1)`}, {`Cache Key: (i8.q1), t2.f1`}, {`Cache Mode: binary`}, {`->  Limit`}, {`Output: ((i8.q1)), (t2.f1)`}, {`->  Seq Scan on public.text_tbl t3`}, {`Output: (i8.q1), t2.f1`}},
			},
			{
				Statement: `select * from
  text_tbl t1
  left join int8_tbl i8
  on i8.q2 = 123,
  lateral (select i8.q1, t2.f1 from text_tbl t2 limit 1) as ss1,
  lateral (select ss1.* from text_tbl t3 limit 1) as ss2
where t1.f1 = ss2.f1;`,
				Results: []sql.Row{{`doh!`, 4567890123456789, 123, 4567890123456789, `doh!`, 4567890123456789, `doh!`}},
			},
			{
				Statement: `explain (verbose, costs off)
select 1 from
  text_tbl as tt1
  inner join text_tbl as tt2 on (tt1.f1 = 'foo')
  left join text_tbl as tt3 on (tt3.f1 = 'foo')
  left join text_tbl as tt4 on (tt3.f1 = tt4.f1),
  lateral (select tt4.f1 as c0 from text_tbl as tt5 limit 1) as ss1
where tt1.f1 = ss1.c0;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: 1`}, {`->  Nested Loop Left Join`}, {`Output: tt1.f1, tt4.f1`}, {`->  Nested Loop`}, {`Output: tt1.f1`}, {`->  Seq Scan on public.text_tbl tt1`}, {`Output: tt1.f1`}, {`Filter: (tt1.f1 = 'foo'::text)`}, {`->  Seq Scan on public.text_tbl tt2`}, {`Output: tt2.f1`}, {`->  Materialize`}, {`Output: tt4.f1`}, {`->  Nested Loop Left Join`}, {`Output: tt4.f1`}, {`Join Filter: (tt3.f1 = tt4.f1)`}, {`->  Seq Scan on public.text_tbl tt3`}, {`Output: tt3.f1`}, {`Filter: (tt3.f1 = 'foo'::text)`}, {`->  Seq Scan on public.text_tbl tt4`}, {`Output: tt4.f1`}, {`Filter: (tt4.f1 = 'foo'::text)`}, {`->  Memoize`}, {`Output: ss1.c0`}, {`Cache Key: tt4.f1`}, {`Cache Mode: binary`}, {`->  Subquery Scan on ss1`}, {`Output: ss1.c0`}, {`Filter: (ss1.c0 = 'foo'::text)`}, {`->  Limit`}, {`Output: (tt4.f1)`}, {`->  Seq Scan on public.text_tbl tt5`}, {`Output: tt4.f1`}},
			},
			{
				Statement: `select 1 from
  text_tbl as tt1
  inner join text_tbl as tt2 on (tt1.f1 = 'foo')
  left join text_tbl as tt3 on (tt3.f1 = 'foo')
  left join text_tbl as tt4 on (tt3.f1 = tt4.f1),
  lateral (select tt4.f1 as c0 from text_tbl as tt5 limit 1) as ss1
where tt1.f1 = ss1.c0;`,
				Results: []sql.Row{},
			},
			{
				Statement: `explain (verbose, costs off)
select ss2.* from
  int4_tbl i41
  left join int8_tbl i8
    join (select i42.f1 as c1, i43.f1 as c2, 42 as c3
          from int4_tbl i42, int4_tbl i43) ss1
    on i8.q1 = ss1.c2
  on i41.f1 = ss1.c1,
  lateral (select i41.*, i8.*, ss1.* from text_tbl limit 1) ss2
where ss1.c2 = 0;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: (i41.f1), (i8.q1), (i8.q2), (i42.f1), (i43.f1), ((42))`}, {`->  Hash Join`}, {`Output: i41.f1, i42.f1, i8.q1, i8.q2, i43.f1, 42`}, {`Hash Cond: (i41.f1 = i42.f1)`}, {`->  Nested Loop`}, {`Output: i8.q1, i8.q2, i43.f1, i41.f1`}, {`->  Nested Loop`}, {`Output: i8.q1, i8.q2, i43.f1`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`Filter: (i8.q1 = 0)`}, {`->  Seq Scan on public.int4_tbl i43`}, {`Output: i43.f1`}, {`Filter: (i43.f1 = 0)`}, {`->  Seq Scan on public.int4_tbl i41`}, {`Output: i41.f1`}, {`->  Hash`}, {`Output: i42.f1`}, {`->  Seq Scan on public.int4_tbl i42`}, {`Output: i42.f1`}, {`->  Limit`}, {`Output: (i41.f1), (i8.q1), (i8.q2), (i42.f1), (i43.f1), ((42))`}, {`->  Seq Scan on public.text_tbl`}, {`Output: i41.f1, i8.q1, i8.q2, i42.f1, i43.f1, (42)`}},
			},
			{
				Statement: `select ss2.* from
  int4_tbl i41
  left join int8_tbl i8
    join (select i42.f1 as c1, i43.f1 as c2, 42 as c3
          from int4_tbl i42, int4_tbl i43) ss1
    on i8.q1 = ss1.c2
  on i41.f1 = ss1.c1,
  lateral (select i41.*, i8.*, ss1.* from text_tbl limit 1) ss2
where ss1.c2 = 0;`,
				Results: []sql.Row{},
			},
			{
				Statement: `explain (costs off)
select * from
  (select 1 as id) as xx
  left join
    (tenk1 as a1 full join (select 1 as id) as yy on (a1.unique1 = yy.id))
  on (xx.id = coalesce(yy.id));`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`->  Result`}, {`->  Hash Full Join`}, {`Hash Cond: (a1.unique1 = (1))`}, {`Filter: (1 = COALESCE((1)))`}, {`->  Seq Scan on tenk1 a1`}, {`->  Hash`}, {`->  Result`}},
			},
			{
				Statement: `select * from
  (select 1 as id) as xx
  left join
    (tenk1 as a1 full join (select 1 as id) as yy on (a1.unique1 = yy.id))
  on (xx.id = coalesce(yy.id));`,
				Results: []sql.Row{{1, 1, 2838, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, `BAAAAA`, `EFEAAA`, `OOOOxx`, 1}},
			},
			{
				Statement: `explain (costs off)
  select * from int4_tbl a left join tenk1 b on f1 = unique2 where f1 = 0;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Join Filter: (a.f1 = b.unique2)`}, {`->  Seq Scan on int4_tbl a`}, {`Filter: (f1 = 0)`}, {`->  Index Scan using tenk1_unique2 on tenk1 b`}, {`Index Cond: (unique2 = 0)`}},
			},
			{
				Statement: `explain (costs off)
  select * from tenk1 a full join tenk1 b using(unique2) where unique2 = 42;`,
				Results: []sql.Row{{`Merge Full Join`}, {`Merge Cond: (a.unique2 = b.unique2)`}, {`->  Index Scan using tenk1_unique2 on tenk1 a`}, {`Index Cond: (unique2 = 42)`}, {`->  Index Scan using tenk1_unique2 on tenk1 b`}, {`Index Cond: (unique2 = 42)`}},
			},
			{
				Statement: `set enable_hashjoin to off;`,
			},
			{
				Statement: `set enable_nestloop to off;`,
			},
			{
				Statement: `explain (verbose, costs off)
  select a.q2, b.q1
    from int8_tbl a left join int8_tbl b on a.q2 = coalesce(b.q1, 1)
    where coalesce(b.q1, 1) > 0;`,
				Results: []sql.Row{{`Merge Left Join`}, {`Output: a.q2, b.q1`}, {`Merge Cond: (a.q2 = (COALESCE(b.q1, '1'::bigint)))`}, {`Filter: (COALESCE(b.q1, '1'::bigint) > 0)`}, {`->  Sort`}, {`Output: a.q2`}, {`Sort Key: a.q2`}, {`->  Seq Scan on public.int8_tbl a`}, {`Output: a.q2`}, {`->  Sort`}, {`Output: b.q1, (COALESCE(b.q1, '1'::bigint))`}, {`Sort Key: (COALESCE(b.q1, '1'::bigint))`}, {`->  Seq Scan on public.int8_tbl b`}, {`Output: b.q1, COALESCE(b.q1, '1'::bigint)`}},
			},
			{
				Statement: `select a.q2, b.q1
  from int8_tbl a left join int8_tbl b on a.q2 = coalesce(b.q1, 1)
  where coalesce(b.q1, 1) > 0;`,
				Results: []sql.Row{{-4567890123456789, ``}, {123, 123}, {123, 123}, {456, ``}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}},
			},
			{
				Statement: `reset enable_hashjoin;`,
			},
			{
				Statement: `reset enable_nestloop;`,
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `CREATE TEMP TABLE a (id int PRIMARY KEY, b_id int);`,
			},
			{
				Statement: `CREATE TEMP TABLE b (id int PRIMARY KEY, c_id int);`,
			},
			{
				Statement: `CREATE TEMP TABLE c (id int PRIMARY KEY);`,
			},
			{
				Statement: `CREATE TEMP TABLE d (a int, b int);`,
			},
			{
				Statement: `INSERT INTO a VALUES (0, 0), (1, NULL);`,
			},
			{
				Statement: `INSERT INTO b VALUES (0, 0), (1, NULL);`,
			},
			{
				Statement: `INSERT INTO c VALUES (0), (1);`,
			},
			{
				Statement: `INSERT INTO d VALUES (1,3), (2,2), (3,1);`,
			},
			{
				Statement: `explain (costs off) SELECT a.* FROM a LEFT JOIN b ON a.b_id = b.id;`,
				Results:   []sql.Row{{`Seq Scan on a`}},
			},
			{
				Statement: `explain (costs off) SELECT b.* FROM b LEFT JOIN c ON b.c_id = c.id;`,
				Results:   []sql.Row{{`Seq Scan on b`}},
			},
			{
				Statement: `explain (costs off)
  SELECT a.* FROM a LEFT JOIN (b left join c on b.c_id = c.id)
  ON (a.b_id = b.id);`,
				Results: []sql.Row{{`Seq Scan on a`}},
			},
			{
				Statement: `explain (costs off)
select id from a where id in (
	select b.id from b left join c on b.id = c.id
);`,
				Results: []sql.Row{{`Hash Join`}, {`Hash Cond: (a.id = b.id)`}, {`->  Seq Scan on a`}, {`->  Hash`}, {`->  Seq Scan on b`}},
			},
			{
				Statement: `explain (costs off)
select d.* from d left join (select * from b group by b.id, b.c_id) s
  on d.a = s.id and d.b = s.c_id;`,
				Results: []sql.Row{{`Seq Scan on d`}},
			},
			{
				Statement: `explain (costs off)
select d.* from d left join (select distinct * from b) s
  on d.a = s.id and d.b = s.c_id;`,
				Results: []sql.Row{{`Seq Scan on d`}},
			},
			{
				Statement: `explain (costs off)
select d.* from d left join (select * from b group by b.id, b.c_id) s
  on d.a = s.id;`,
				Results: []sql.Row{{`Merge Right Join`}, {`Merge Cond: (b.id = d.a)`}, {`->  Group`}, {`Group Key: b.id`}, {`->  Index Scan using b_pkey on b`}, {`->  Sort`}, {`Sort Key: d.a`}, {`->  Seq Scan on d`}},
			},
			{
				Statement: `explain (costs off)
select d.* from d left join (select distinct * from b) s
  on d.a = s.id;`,
				Results: []sql.Row{{`Merge Right Join`}, {`Merge Cond: (b.id = d.a)`}, {`->  Unique`}, {`->  Sort`}, {`Sort Key: b.id, b.c_id`}, {`->  Seq Scan on b`}, {`->  Sort`}, {`Sort Key: d.a`}, {`->  Seq Scan on d`}},
			},
			{
				Statement: `explain (costs off)
select d.* from d left join (select id from a union select id from b) s
  on d.a = s.id;`,
				Results: []sql.Row{{`Seq Scan on d`}},
			},
			{
				Statement: `explain (costs off)
select i8.* from int8_tbl i8 left join (select f1 from int4_tbl group by f1) i4
  on i8.q1 = i4.f1;`,
				Results: []sql.Row{{`Seq Scan on int8_tbl i8`}},
			},
			{
				Statement: `explain (costs off)
select 1 from (select a.id FROM a left join b on a.b_id = b.id) q,
			  lateral generate_series(1, q.id) gs(i) where q.id = gs.i;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Seq Scan on a`}, {`->  Function Scan on generate_series gs`}, {`Filter: (a.id = i)`}},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `create temp table parent (k int primary key, pd int);`,
			},
			{
				Statement: `create temp table child (k int unique, cd int);`,
			},
			{
				Statement: `insert into parent values (1, 10), (2, 20), (3, 30);`,
			},
			{
				Statement: `insert into child values (1, 100), (4, 400);`,
			},
			{
				Statement: `select p.* from parent p left join child c on (p.k = c.k);`,
				Results:   []sql.Row{{1, 10}, {2, 20}, {3, 30}},
			},
			{
				Statement: `explain (costs off)
  select p.* from parent p left join child c on (p.k = c.k);`,
				Results: []sql.Row{{`Seq Scan on parent p`}},
			},
			{
				Statement: `select p.*, linked from parent p
  left join (select c.*, true as linked from child c) as ss
  on (p.k = ss.k);`,
				Results: []sql.Row{{1, 10, true}, {2, 20, ``}, {3, 30, ``}},
			},
			{
				Statement: `explain (costs off)
  select p.*, linked from parent p
    left join (select c.*, true as linked from child c) as ss
    on (p.k = ss.k);`,
				Results: []sql.Row{{`Hash Left Join`}, {`Hash Cond: (p.k = c.k)`}, {`->  Seq Scan on parent p`}, {`->  Hash`}, {`->  Seq Scan on child c`}},
			},
			{
				Statement: `select p.* from
  parent p left join child c on (p.k = c.k)
  where p.k = 1 and p.k = 2;`,
				Results: []sql.Row{},
			},
			{
				Statement: `explain (costs off)
select p.* from
  parent p left join child c on (p.k = c.k)
  where p.k = 1 and p.k = 2;`,
				Results: []sql.Row{{`Result`}, {`One-Time Filter: false`}, {`->  Index Scan using parent_pkey on parent p`}, {`Index Cond: (k = 1)`}},
			},
			{
				Statement: `select p.* from
  (parent p left join child c on (p.k = c.k)) join parent x on p.k = x.k
  where p.k = 1 and p.k = 2;`,
				Results: []sql.Row{},
			},
			{
				Statement: `explain (costs off)
select p.* from
  (parent p left join child c on (p.k = c.k)) join parent x on p.k = x.k
  where p.k = 1 and p.k = 2;`,
				Results: []sql.Row{{`Result`}, {`One-Time Filter: false`}},
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `CREATE TEMP TABLE a (id int PRIMARY KEY);`,
			},
			{
				Statement: `CREATE TEMP TABLE b (id int PRIMARY KEY, a_id int);`,
			},
			{
				Statement: `INSERT INTO a VALUES (0), (1);`,
			},
			{
				Statement: `INSERT INTO b VALUES (0, 0), (1, NULL);`,
			},
			{
				Statement: `SELECT * FROM b LEFT JOIN a ON (b.a_id = a.id) WHERE (a.id IS NULL OR a.id > 0);`,
				Results:   []sql.Row{{1, ``, ``}},
			},
			{
				Statement: `SELECT b.* FROM b LEFT JOIN a ON (b.a_id = a.id) WHERE (a.id IS NULL OR a.id > 0);`,
				Results:   []sql.Row{{1, ``}},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `create temp table innertab (id int8 primary key, dat1 int8);`,
			},
			{
				Statement: `insert into innertab values(123, 42);`,
			},
			{
				Statement: `SELECT * FROM
    (SELECT 1 AS x) ss1
  LEFT JOIN
    (SELECT q1, q2, COALESCE(dat1, q1) AS y
     FROM int8_tbl LEFT JOIN innertab ON q2 = id) ss2
  ON true;`,
				Results: []sql.Row{{1, 123, 456, 123}, {1, 123, 4567890123456789, 123}, {1, 4567890123456789, 123, 42}, {1, 4567890123456789, 4567890123456789, 4567890123456789}, {1, 4567890123456789, -4567890123456789, 4567890123456789}},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `create temp table uniquetbl (f1 text unique);`,
			},
			{
				Statement: `explain (costs off)
select t1.* from
  uniquetbl as t1
  left join (select *, '***'::text as d1 from uniquetbl) t2
  on t1.f1 = t2.f1
  left join uniquetbl t3
  on t2.d1 = t3.f1;`,
				Results: []sql.Row{{`Seq Scan on uniquetbl t1`}},
			},
			{
				Statement: `explain (costs off)
select t0.*
from
 text_tbl t0
 left join
   (select case t1.ten when 0 then 'doh!'::text else null::text end as case1,
           t1.stringu2
     from tenk1 t1
     join int4_tbl i4 ON i4.f1 = t1.unique2
     left join uniquetbl u1 ON u1.f1 = t1.string4) ss
  on t0.f1 = ss.case1
where ss.stringu2 !~* ss.case1;`,
				Results: []sql.Row{{`Nested Loop`}, {`Join Filter: (CASE t1.ten WHEN 0 THEN 'doh!'::text ELSE NULL::text END = t0.f1)`}, {`->  Nested Loop`}, {`->  Seq Scan on int4_tbl i4`}, {`->  Index Scan using tenk1_unique2 on tenk1 t1`}, {`Index Cond: (unique2 = i4.f1)`}, {`Filter: (stringu2 !~* CASE ten WHEN 0 THEN 'doh!'::text ELSE NULL::text END)`}, {`->  Materialize`}, {`->  Seq Scan on text_tbl t0`}},
			},
			{
				Statement: `select t0.*
from
 text_tbl t0
 left join
   (select case t1.ten when 0 then 'doh!'::text else null::text end as case1,
           t1.stringu2
     from tenk1 t1
     join int4_tbl i4 ON i4.f1 = t1.unique2
     left join uniquetbl u1 ON u1.f1 = t1.string4) ss
  on t0.f1 = ss.case1
where ss.stringu2 !~* ss.case1;`,
				Results: []sql.Row{{`doh!`}},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `explain (verbose, costs off)
select i8.*, ss.v, t.unique2
  from int8_tbl i8
    left join int4_tbl i4 on i4.f1 = 1
    left join lateral (select i4.f1 + 1 as v) as ss on true
    left join tenk1 t on t.unique2 = ss.v
where q2 = 456;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: i8.q1, i8.q2, ((i4.f1 + 1)), t.unique2`}, {`->  Nested Loop Left Join`}, {`Output: i8.q1, i8.q2, (i4.f1 + 1)`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`Filter: (i8.q2 = 456)`}, {`->  Seq Scan on public.int4_tbl i4`}, {`Output: i4.f1`}, {`Filter: (i4.f1 = 1)`}, {`->  Index Only Scan using tenk1_unique2 on public.tenk1 t`}, {`Output: t.unique2`}, {`Index Cond: (t.unique2 = ((i4.f1 + 1)))`}},
			},
			{
				Statement: `select i8.*, ss.v, t.unique2
  from int8_tbl i8
    left join int4_tbl i4 on i4.f1 = 1
    left join lateral (select i4.f1 + 1 as v) as ss on true
    left join tenk1 t on t.unique2 = ss.v
where q2 = 456;`,
				Results: []sql.Row{{123, 456, ``, ``}},
			},
			{
				Statement: `create temp table parttbl (a integer primary key) partition by range (a);`,
			},
			{
				Statement: `create temp table parttbl1 partition of parttbl for values from (1) to (100);`,
			},
			{
				Statement: `insert into parttbl values (11), (12);`,
			},
			{
				Statement: `explain (costs off)
select * from
  (select *, 12 as phv from parttbl) as ss
  right join int4_tbl on true
where ss.a = ss.phv and f1 = 0;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Seq Scan on int4_tbl`}, {`Filter: (f1 = 0)`}, {`->  Seq Scan on parttbl1 parttbl`}, {`Filter: (a = 12)`}},
			},
			{
				Statement: `select * from
  (select *, 12 as phv from parttbl) as ss
  right join int4_tbl on true
where ss.a = ss.phv and f1 = 0;`,
				Results: []sql.Row{{12, 12, 0}},
			},
			{
				Statement: `select * from
  int8_tbl x join (int4_tbl x cross join int4_tbl y) j on q1 = f1; -- error`,
				ErrorString: `column reference "f1" is ambiguous`,
			},
			{
				Statement: `select * from
  int8_tbl x join (int4_tbl x cross join int4_tbl y) j on q1 = y.f1; -- error`,
				ErrorString: `invalid reference to FROM-clause entry for table "y"`,
			},
			{
				Statement: `select * from
  int8_tbl x join (int4_tbl x cross join int4_tbl y(ff)) j on q1 = f1; -- ok`,
				Results: []sql.Row{},
			},
			{
				Statement: `select t1.uunique1 from
  tenk1 t1 join tenk2 t2 on t1.two = t2.two; -- error, prefer "t1" suggestion`,
				ErrorString: `column t1.uunique1 does not exist`,
			},
			{
				Statement: `select t2.uunique1 from
  tenk1 t1 join tenk2 t2 on t1.two = t2.two; -- error, prefer "t2" suggestion`,
				ErrorString: `column t2.uunique1 does not exist`,
			},
			{
				Statement: `select uunique1 from
  tenk1 t1 join tenk2 t2 on t1.two = t2.two; -- error, suggest both at once`,
				ErrorString: `column "uunique1" does not exist`,
			},
			{
				Statement: `select atts.relid::regclass, s.* from pg_stats s join
    pg_attribute a on s.attname = a.attname and s.tablename =
    a.attrelid::regclass::text join (select unnest(indkey) attnum,
    indexrelid from pg_index i) atts on atts.attnum = a.attnum where
    schemaname != 'pg_catalog';`,
				ErrorString: `column atts.relid does not exist`,
			},
			{
				Statement: `select unique2, x.*
from tenk1 a, lateral (select * from int4_tbl b where f1 = a.unique1) x;`,
				Results: []sql.Row{{9998, 0}},
			},
			{
				Statement: `explain (costs off)
  select unique2, x.*
  from tenk1 a, lateral (select * from int4_tbl b where f1 = a.unique1) x;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Seq Scan on int4_tbl b`}, {`->  Index Scan using tenk1_unique1 on tenk1 a`}, {`Index Cond: (unique1 = b.f1)`}},
			},
			{
				Statement: `select unique2, x.*
from int4_tbl x, lateral (select unique2 from tenk1 where f1 = unique1) ss;`,
				Results: []sql.Row{{9998, 0}},
			},
			{
				Statement: `explain (costs off)
  select unique2, x.*
  from int4_tbl x, lateral (select unique2 from tenk1 where f1 = unique1) ss;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Seq Scan on int4_tbl x`}, {`->  Index Scan using tenk1_unique1 on tenk1`}, {`Index Cond: (unique1 = x.f1)`}},
			},
			{
				Statement: `explain (costs off)
  select unique2, x.*
  from int4_tbl x cross join lateral (select unique2 from tenk1 where f1 = unique1) ss;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Seq Scan on int4_tbl x`}, {`->  Index Scan using tenk1_unique1 on tenk1`}, {`Index Cond: (unique1 = x.f1)`}},
			},
			{
				Statement: `select unique2, x.*
from int4_tbl x left join lateral (select unique1, unique2 from tenk1 where f1 = unique1) ss on true;`,
				Results: []sql.Row{{9998, 0}, {``, 123456}, {``, -123456}, {``, 2147483647}, {``, -2147483647}},
			},
			{
				Statement: `explain (costs off)
  select unique2, x.*
  from int4_tbl x left join lateral (select unique1, unique2 from tenk1 where f1 = unique1) ss on true;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`->  Seq Scan on int4_tbl x`}, {`->  Index Scan using tenk1_unique1 on tenk1`}, {`Index Cond: (unique1 = x.f1)`}},
			},
			{
				Statement: `select *, (select r from (select q1 as q2) x, (select q2 as r) y) from int8_tbl;`,
				Results:   []sql.Row{{123, 456, 456}, {123, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 123}, {4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, -4567890123456789}},
			},
			{
				Statement: `select *, (select r from (select q1 as q2) x, lateral (select q2 as r) y) from int8_tbl;`,
				Results:   []sql.Row{{123, 456, 123}, {123, 4567890123456789, 123}, {4567890123456789, 123, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 4567890123456789}},
			},
			{
				Statement: `select count(*) from tenk1 a, lateral generate_series(1,two) g;`,
				Results:   []sql.Row{{5000}},
			},
			{
				Statement: `explain (costs off)
  select count(*) from tenk1 a, lateral generate_series(1,two) g;`,
				Results: []sql.Row{{`Aggregate`}, {`->  Nested Loop`}, {`->  Seq Scan on tenk1 a`}, {`->  Memoize`}, {`Cache Key: a.two`}, {`Cache Mode: binary`}, {`->  Function Scan on generate_series g`}},
			},
			{
				Statement: `explain (costs off)
  select count(*) from tenk1 a cross join lateral generate_series(1,two) g;`,
				Results: []sql.Row{{`Aggregate`}, {`->  Nested Loop`}, {`->  Seq Scan on tenk1 a`}, {`->  Memoize`}, {`Cache Key: a.two`}, {`Cache Mode: binary`}, {`->  Function Scan on generate_series g`}},
			},
			{
				Statement: `explain (costs off)
  select count(*) from tenk1 a, generate_series(1,two) g;`,
				Results: []sql.Row{{`Aggregate`}, {`->  Nested Loop`}, {`->  Seq Scan on tenk1 a`}, {`->  Memoize`}, {`Cache Key: a.two`}, {`Cache Mode: binary`}, {`->  Function Scan on generate_series g`}},
			},
			{
				Statement: `explain (costs off)
  select * from generate_series(100,200) g,
    lateral (select * from int8_tbl a where g = q1 union all
             select * from int8_tbl b where g = q2) ss;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Function Scan on generate_series g`}, {`->  Append`}, {`->  Seq Scan on int8_tbl a`}, {`Filter: (g.g = q1)`}, {`->  Seq Scan on int8_tbl b`}, {`Filter: (g.g = q2)`}},
			},
			{
				Statement: `select * from generate_series(100,200) g,
  lateral (select * from int8_tbl a where g = q1 union all
           select * from int8_tbl b where g = q2) ss;`,
				Results: []sql.Row{{123, 123, 456}, {123, 123, 4567890123456789}, {123, 4567890123456789, 123}},
			},
			{
				Statement: `explain (costs off)
  select count(*) from tenk1 a,
    tenk1 b join lateral (values(a.unique1)) ss(x) on b.unique2 = ss.x;`,
				Results: []sql.Row{{`Aggregate`}, {`->  Merge Join`}, {`Merge Cond: (a.unique1 = b.unique2)`}, {`->  Index Only Scan using tenk1_unique1 on tenk1 a`}, {`->  Index Only Scan using tenk1_unique2 on tenk1 b`}},
			},
			{
				Statement: `select count(*) from tenk1 a,
  tenk1 b join lateral (values(a.unique1)) ss(x) on b.unique2 = ss.x;`,
				Results: []sql.Row{{10000}},
			},
			{
				Statement: `explain (costs off)
  select count(*) from tenk1 a,
    tenk1 b join lateral (values(a.unique1),(-1)) ss(x) on b.unique2 = ss.x;`,
				Results: []sql.Row{{`Aggregate`}, {`->  Nested Loop`}, {`->  Nested Loop`}, {`->  Index Only Scan using tenk1_unique1 on tenk1 a`}, {`->  Values Scan on "*VALUES*"`}, {`->  Memoize`}, {`Cache Key: "*VALUES*".column1`}, {`Cache Mode: logical`}, {`->  Index Only Scan using tenk1_unique2 on tenk1 b`}, {`Index Cond: (unique2 = "*VALUES*".column1)`}},
			},
			{
				Statement: `select count(*) from tenk1 a,
  tenk1 b join lateral (values(a.unique1),(-1)) ss(x) on b.unique2 = ss.x;`,
				Results: []sql.Row{{10000}},
			},
			{
				Statement: `explain (costs off)
  select * from int8_tbl a,
    int8_tbl x left join lateral (select a.q1 from int4_tbl y) ss(z)
      on x.q2 = ss.z
  order by a.q1, a.q2, x.q1, x.q2, ss.z;`,
				Results: []sql.Row{{`Sort`}, {`Sort Key: a.q1, a.q2, x.q1, x.q2, (a.q1)`}, {`->  Nested Loop`}, {`->  Seq Scan on int8_tbl a`}, {`->  Hash Right Join`}, {`Hash Cond: ((a.q1) = x.q2)`}, {`->  Seq Scan on int4_tbl y`}, {`->  Hash`}, {`->  Seq Scan on int8_tbl x`}},
			},
			{
				Statement: `select * from int8_tbl a,
  int8_tbl x left join lateral (select a.q1 from int4_tbl y) ss(z)
    on x.q2 = ss.z
  order by a.q1, a.q2, x.q1, x.q2, ss.z;`,
				Results: []sql.Row{{123, 456, 123, 456, ``}, {123, 456, 123, 4567890123456789, ``}, {123, 456, 4567890123456789, -4567890123456789, ``}, {123, 456, 4567890123456789, 123, 123}, {123, 456, 4567890123456789, 123, 123}, {123, 456, 4567890123456789, 123, 123}, {123, 456, 4567890123456789, 123, 123}, {123, 456, 4567890123456789, 123, 123}, {123, 456, 4567890123456789, 4567890123456789, ``}, {123, 4567890123456789, 123, 456, ``}, {123, 4567890123456789, 123, 4567890123456789, ``}, {123, 4567890123456789, 4567890123456789, -4567890123456789, ``}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, ``}, {4567890123456789, -4567890123456789, 123, 456, ``}, {4567890123456789, -4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 4567890123456789, -4567890123456789, ``}, {4567890123456789, -4567890123456789, 4567890123456789, 123, ``}, {4567890123456789, -4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 123, 456, ``}, {4567890123456789, 123, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 4567890123456789, -4567890123456789, ``}, {4567890123456789, 123, 4567890123456789, 123, ``}, {4567890123456789, 123, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 123, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 123, 456, ``}, {4567890123456789, 4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 123, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, -4567890123456789, ``}, {4567890123456789, 4567890123456789, 4567890123456789, 123, ``}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}},
			},
			{
				Statement: `select * from (select f1/2 as x from int4_tbl) ss1 join int4_tbl i4 on x = f1,
  lateral (select x) ss2(y);`,
				Results: []sql.Row{{0, 0, 0}},
			},
			{
				Statement: `select * from (select f1 as x from int4_tbl) ss1 join int4_tbl i4 on x = f1,
  lateral (values(x)) ss2(y);`,
				Results: []sql.Row{{0, 0, 0}, {123456, 123456, 123456}, {-123456, -123456, -123456}, {2147483647, 2147483647, 2147483647}, {-2147483647, -2147483647, -2147483647}},
			},
			{
				Statement: `select * from ((select f1/2 as x from int4_tbl) ss1 join int4_tbl i4 on x = f1) j,
  lateral (select x) ss2(y);`,
				Results: []sql.Row{{0, 0, 0}},
			},
			{
				Statement: `select * from (values(1)) x(lb),
  lateral generate_series(lb,4) x4;`,
				Results: []sql.Row{{1, 1}, {1, 2}, {1, 3}, {1, 4}},
			},
			{
				Statement: `select * from (select f1/1000000000 from int4_tbl) x(lb),
  lateral generate_series(lb,4) x4;`,
				Results: []sql.Row{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {2, 2}, {2, 3}, {2, 4}, {-2, -2}, {-2, -1}, {-2, 0}, {-2, 1}, {-2, 2}, {-2, 3}, {-2, 4}},
			},
			{
				Statement: `select * from (values(1)) x(lb),
  lateral (values(lb)) y(lbcopy);`,
				Results: []sql.Row{{1, 1}},
			},
			{
				Statement: `select * from (values(1)) x(lb),
  lateral (select lb from int4_tbl) y(lbcopy);`,
				Results: []sql.Row{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}},
			},
			{
				Statement: `select * from
  int8_tbl x left join (select q1,coalesce(q2,0) q2 from int8_tbl) y on x.q2 = y.q1,
  lateral (values(x.q1,y.q1,y.q2)) v(xq1,yq1,yq2);`,
				Results: []sql.Row{{123, 456, ``, ``, 123, ``, ``}, {123, 4567890123456789, 4567890123456789, -4567890123456789, 123, 4567890123456789, -4567890123456789}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123, 4567890123456789, 4567890123456789}, {123, 4567890123456789, 4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 123, 123, 4567890123456789, 4567890123456789, 123, 4567890123456789}, {4567890123456789, 123, 123, 456, 4567890123456789, 123, 456}, {4567890123456789, 4567890123456789, 4567890123456789, -4567890123456789, 4567890123456789, 4567890123456789, -4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 4567890123456789, 4567890123456789, 123}, {4567890123456789, -4567890123456789, ``, ``, 4567890123456789, ``, ``}},
			},
			{
				Statement: `select * from
  int8_tbl x left join (select q1,coalesce(q2,0) q2 from int8_tbl) y on x.q2 = y.q1,
  lateral (select x.q1,y.q1,y.q2) v(xq1,yq1,yq2);`,
				Results: []sql.Row{{123, 456, ``, ``, 123, ``, ``}, {123, 4567890123456789, 4567890123456789, -4567890123456789, 123, 4567890123456789, -4567890123456789}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123, 4567890123456789, 4567890123456789}, {123, 4567890123456789, 4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 123, 123, 4567890123456789, 4567890123456789, 123, 4567890123456789}, {4567890123456789, 123, 123, 456, 4567890123456789, 123, 456}, {4567890123456789, 4567890123456789, 4567890123456789, -4567890123456789, 4567890123456789, 4567890123456789, -4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 4567890123456789, 4567890123456789, 123}, {4567890123456789, -4567890123456789, ``, ``, 4567890123456789, ``, ``}},
			},
			{
				Statement: `select x.* from
  int8_tbl x left join (select q1,coalesce(q2,0) q2 from int8_tbl) y on x.q2 = y.q1,
  lateral (select x.q1,y.q1,y.q2) v(xq1,yq1,yq2);`,
				Results: []sql.Row{{123, 456}, {123, 4567890123456789}, {123, 4567890123456789}, {123, 4567890123456789}, {4567890123456789, 123}, {4567890123456789, 123}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789}},
			},
			{
				Statement: `select v.* from
  (int8_tbl x left join (select q1,coalesce(q2,0) q2 from int8_tbl) y on x.q2 = y.q1)
  left join int4_tbl z on z.f1 = x.q2,
  lateral (select x.q1,y.q1 union all select x.q2,y.q2) v(vx,vy);`,
				Results: []sql.Row{{123, ``}, {456, ``}, {123, 4567890123456789}, {4567890123456789, -4567890123456789}, {123, 4567890123456789}, {4567890123456789, 4567890123456789}, {123, 4567890123456789}, {4567890123456789, 123}, {4567890123456789, 123}, {123, 4567890123456789}, {4567890123456789, 123}, {123, 456}, {4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 123}, {4567890123456789, ``}, {-4567890123456789, ``}},
			},
			{
				Statement: `select v.* from
  (int8_tbl x left join (select q1,(select coalesce(q2,0)) q2 from int8_tbl) y on x.q2 = y.q1)
  left join int4_tbl z on z.f1 = x.q2,
  lateral (select x.q1,y.q1 union all select x.q2,y.q2) v(vx,vy);`,
				Results: []sql.Row{{4567890123456789, 123}, {123, 456}, {4567890123456789, 123}, {123, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 123}, {123, 4567890123456789}, {4567890123456789, 123}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {123, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789}, {123, 4567890123456789}, {4567890123456789, -4567890123456789}, {123, ``}, {456, ``}, {4567890123456789, ``}, {-4567890123456789, ``}},
			},
			{
				Statement: `select v.* from
  (int8_tbl x left join (select q1,(select coalesce(q2,0)) q2 from int8_tbl) y on x.q2 = y.q1)
  left join int4_tbl z on z.f1 = x.q2,
  lateral (select x.q1,y.q1 from onerow union all select x.q2,y.q2 from onerow) v(vx,vy);`,
				Results: []sql.Row{{4567890123456789, 123}, {123, 456}, {4567890123456789, 123}, {123, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 123}, {123, 4567890123456789}, {4567890123456789, 123}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {123, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789}, {123, 4567890123456789}, {4567890123456789, -4567890123456789}, {123, ``}, {456, ``}, {4567890123456789, ``}, {-4567890123456789, ``}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  int8_tbl a left join
  lateral (select *, a.q2 as x from int8_tbl b) ss on a.q2 = ss.q1;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: a.q1, a.q2, b.q1, b.q2, (a.q2)`}, {`->  Seq Scan on public.int8_tbl a`}, {`Output: a.q1, a.q2`}, {`->  Seq Scan on public.int8_tbl b`}, {`Output: b.q1, b.q2, a.q2`}, {`Filter: (a.q2 = b.q1)`}},
			},
			{
				Statement: `select * from
  int8_tbl a left join
  lateral (select *, a.q2 as x from int8_tbl b) ss on a.q2 = ss.q1;`,
				Results: []sql.Row{{123, 456, ``, ``, ``}, {123, 4567890123456789, 4567890123456789, 123, 4567890123456789}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {123, 4567890123456789, 4567890123456789, -4567890123456789, 4567890123456789}, {4567890123456789, 123, 123, 456, 123}, {4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, -4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, ``, ``, ``}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  int8_tbl a left join
  lateral (select *, coalesce(a.q2, 42) as x from int8_tbl b) ss on a.q2 = ss.q1;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: a.q1, a.q2, b.q1, b.q2, (COALESCE(a.q2, '42'::bigint))`}, {`->  Seq Scan on public.int8_tbl a`}, {`Output: a.q1, a.q2`}, {`->  Seq Scan on public.int8_tbl b`}, {`Output: b.q1, b.q2, COALESCE(a.q2, '42'::bigint)`}, {`Filter: (a.q2 = b.q1)`}},
			},
			{
				Statement: `select * from
  int8_tbl a left join
  lateral (select *, coalesce(a.q2, 42) as x from int8_tbl b) ss on a.q2 = ss.q1;`,
				Results: []sql.Row{{123, 456, ``, ``, ``}, {123, 4567890123456789, 4567890123456789, 123, 4567890123456789}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {123, 4567890123456789, 4567890123456789, -4567890123456789, 4567890123456789}, {4567890123456789, 123, 123, 456, 123}, {4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, -4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, ``, ``, ``}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from int4_tbl i left join
  lateral (select * from int2_tbl j where i.f1 = j.f1) k on true;`,
				Results: []sql.Row{{`Hash Left Join`}, {`Output: i.f1, j.f1`}, {`Hash Cond: (i.f1 = j.f1)`}, {`->  Seq Scan on public.int4_tbl i`}, {`Output: i.f1`}, {`->  Hash`}, {`Output: j.f1`}, {`->  Seq Scan on public.int2_tbl j`}, {`Output: j.f1`}},
			},
			{
				Statement: `select * from int4_tbl i left join
  lateral (select * from int2_tbl j where i.f1 = j.f1) k on true;`,
				Results: []sql.Row{{0, 0}, {123456, ``}, {-123456, ``}, {2147483647, ``}, {-2147483647, ``}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from int4_tbl i left join
  lateral (select coalesce(i) from int2_tbl j where i.f1 = j.f1) k on true;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: i.f1, (COALESCE(i.*))`}, {`->  Seq Scan on public.int4_tbl i`}, {`Output: i.f1, i.*`}, {`->  Seq Scan on public.int2_tbl j`}, {`Output: j.f1, COALESCE(i.*)`}, {`Filter: (i.f1 = j.f1)`}},
			},
			{
				Statement: `select * from int4_tbl i left join
  lateral (select coalesce(i) from int2_tbl j where i.f1 = j.f1) k on true;`,
				Results: []sql.Row{{0, `(0)`}, {123456, ``}, {-123456, ``}, {2147483647, ``}, {-2147483647, ``}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from int4_tbl a,
  lateral (
    select * from int4_tbl b left join int8_tbl c on (b.f1 = q1 and a.f1 = q2)
  ) ss;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: a.f1, b.f1, c.q1, c.q2`}, {`->  Seq Scan on public.int4_tbl a`}, {`Output: a.f1`}, {`->  Hash Left Join`}, {`Output: b.f1, c.q1, c.q2`}, {`Hash Cond: (b.f1 = c.q1)`}, {`->  Seq Scan on public.int4_tbl b`}, {`Output: b.f1`}, {`->  Hash`}, {`Output: c.q1, c.q2`}, {`->  Seq Scan on public.int8_tbl c`}, {`Output: c.q1, c.q2`}, {`Filter: (a.f1 = c.q2)`}},
			},
			{
				Statement: `select * from int4_tbl a,
  lateral (
    select * from int4_tbl b left join int8_tbl c on (b.f1 = q1 and a.f1 = q2)
  ) ss;`,
				Results: []sql.Row{{0, 0, ``, ``}, {0, 123456, ``, ``}, {0, -123456, ``, ``}, {0, 2147483647, ``, ``}, {0, -2147483647, ``, ``}, {123456, 0, ``, ``}, {123456, 123456, ``, ``}, {123456, -123456, ``, ``}, {123456, 2147483647, ``, ``}, {123456, -2147483647, ``, ``}, {-123456, 0, ``, ``}, {-123456, 123456, ``, ``}, {-123456, -123456, ``, ``}, {-123456, 2147483647, ``, ``}, {-123456, -2147483647, ``, ``}, {2147483647, 0, ``, ``}, {2147483647, 123456, ``, ``}, {2147483647, -123456, ``, ``}, {2147483647, 2147483647, ``, ``}, {2147483647, -2147483647, ``, ``}, {-2147483647, 0, ``, ``}, {-2147483647, 123456, ``, ``}, {-2147483647, -123456, ``, ``}, {-2147483647, 2147483647, ``, ``}, {-2147483647, -2147483647, ``, ``}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  int8_tbl a left join lateral
  (select b.q1 as bq1, c.q1 as cq1, least(a.q1,b.q1,c.q1) from
   int8_tbl b cross join int8_tbl c) ss
  on a.q2 = ss.bq1;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: a.q1, a.q2, b.q1, c.q1, (LEAST(a.q1, b.q1, c.q1))`}, {`->  Seq Scan on public.int8_tbl a`}, {`Output: a.q1, a.q2`}, {`->  Nested Loop`}, {`Output: b.q1, c.q1, LEAST(a.q1, b.q1, c.q1)`}, {`->  Seq Scan on public.int8_tbl b`}, {`Output: b.q1, b.q2`}, {`Filter: (a.q2 = b.q1)`}, {`->  Seq Scan on public.int8_tbl c`}, {`Output: c.q1, c.q2`}},
			},
			{
				Statement: `select * from
  int8_tbl a left join lateral
  (select b.q1 as bq1, c.q1 as cq1, least(a.q1,b.q1,c.q1) from
   int8_tbl b cross join int8_tbl c) ss
  on a.q2 = ss.bq1;`,
				Results: []sql.Row{{123, 456, ``, ``, ``}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 123, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123}, {123, 4567890123456789, 4567890123456789, 4567890123456789, 123}, {4567890123456789, 123, 123, 123, 123}, {4567890123456789, 123, 123, 123, 123}, {4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 123, 123, 123, 123}, {4567890123456789, 123, 123, 123, 123}, {4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 123, 123, 4567890123456789, 123}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 123}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 123}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 123}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 123}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 123}, {4567890123456789, 4567890123456789, 4567890123456789, 123, 123}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {4567890123456789, -4567890123456789, ``, ``, ``}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  int8_tbl c left join (
    int8_tbl a left join (select q1, coalesce(q2,42) as x from int8_tbl b) ss1
      on a.q2 = ss1.q1
    cross join
    lateral (select q1, coalesce(ss1.x,q2) as y from int8_tbl d) ss2
  ) on c.q2 = ss2.q1,
  lateral (select ss2.y offset 0) ss3;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: c.q1, c.q2, a.q1, a.q2, b.q1, (COALESCE(b.q2, '42'::bigint)), d.q1, (COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2)), ((COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2)))`}, {`->  Hash Right Join`}, {`Output: c.q1, c.q2, a.q1, a.q2, b.q1, d.q1, (COALESCE(b.q2, '42'::bigint)), (COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2))`}, {`Hash Cond: (d.q1 = c.q2)`}, {`->  Nested Loop`}, {`Output: a.q1, a.q2, b.q1, d.q1, (COALESCE(b.q2, '42'::bigint)), (COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2))`}, {`->  Hash Left Join`}, {`Output: a.q1, a.q2, b.q1, (COALESCE(b.q2, '42'::bigint))`}, {`Hash Cond: (a.q2 = b.q1)`}, {`->  Seq Scan on public.int8_tbl a`}, {`Output: a.q1, a.q2`}, {`->  Hash`}, {`Output: b.q1, (COALESCE(b.q2, '42'::bigint))`}, {`->  Seq Scan on public.int8_tbl b`}, {`Output: b.q1, COALESCE(b.q2, '42'::bigint)`}, {`->  Seq Scan on public.int8_tbl d`}, {`Output: d.q1, COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2)`}, {`->  Hash`}, {`Output: c.q1, c.q2`}, {`->  Seq Scan on public.int8_tbl c`}, {`Output: c.q1, c.q2`}, {`->  Result`}, {`Output: (COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2))`}},
			},
			{
				Statement: `explain (verbose, costs off)
select c.*,a.*,ss1.q1,ss2.q1,ss3.* from
  int8_tbl c left join (
    int8_tbl a left join
      (select q1, coalesce(q2,f1) as x from int8_tbl b, int4_tbl b2
       where q1 < f1) ss1
      on a.q2 = ss1.q1
    cross join
    lateral (select q1, coalesce(ss1.x,q2) as y from int8_tbl d) ss2
  ) on c.q2 = ss2.q1,
  lateral (select * from int4_tbl i where ss2.y > f1) ss3;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: c.q1, c.q2, a.q1, a.q2, b.q1, d.q1, i.f1`}, {`Join Filter: ((COALESCE((COALESCE(b.q2, (b2.f1)::bigint)), d.q2)) > i.f1)`}, {`->  Hash Right Join`}, {`Output: c.q1, c.q2, a.q1, a.q2, b.q1, d.q1, (COALESCE((COALESCE(b.q2, (b2.f1)::bigint)), d.q2))`}, {`Hash Cond: (d.q1 = c.q2)`}, {`->  Nested Loop`}, {`Output: a.q1, a.q2, b.q1, d.q1, (COALESCE((COALESCE(b.q2, (b2.f1)::bigint)), d.q2))`}, {`->  Hash Right Join`}, {`Output: a.q1, a.q2, b.q1, (COALESCE(b.q2, (b2.f1)::bigint))`}, {`Hash Cond: (b.q1 = a.q2)`}, {`->  Nested Loop`}, {`Output: b.q1, COALESCE(b.q2, (b2.f1)::bigint)`}, {`Join Filter: (b.q1 < b2.f1)`}, {`->  Seq Scan on public.int8_tbl b`}, {`Output: b.q1, b.q2`}, {`->  Materialize`}, {`Output: b2.f1`}, {`->  Seq Scan on public.int4_tbl b2`}, {`Output: b2.f1`}, {`->  Hash`}, {`Output: a.q1, a.q2`}, {`->  Seq Scan on public.int8_tbl a`}, {`Output: a.q1, a.q2`}, {`->  Seq Scan on public.int8_tbl d`}, {`Output: d.q1, COALESCE((COALESCE(b.q2, (b2.f1)::bigint)), d.q2)`}, {`->  Hash`}, {`Output: c.q1, c.q2`}, {`->  Seq Scan on public.int8_tbl c`}, {`Output: c.q1, c.q2`}, {`->  Materialize`}, {`Output: i.f1`}, {`->  Seq Scan on public.int4_tbl i`}, {`Output: i.f1`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  (select 1 as x offset 0) x cross join (select 2 as y offset 0) y
  left join lateral (
    select * from (select 3 as z offset 0) z where z.z = x.x
  ) zz on zz.z = y.y;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: (1), (2), (3)`}, {`Join Filter: (((3) = (1)) AND ((3) = (2)))`}, {`->  Nested Loop`}, {`Output: (1), (2)`}, {`->  Result`}, {`Output: 1`}, {`->  Result`}, {`Output: 2`}, {`->  Result`}, {`Output: 3`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from int8_tbl i8 left join lateral
  (select *, i8.q2 from int4_tbl where false) ss on true;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: i8.q1, i8.q2, f1, (i8.q2)`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`->  Result`}, {`Output: f1, i8.q2`}, {`One-Time Filter: false`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from int8_tbl i8 left join lateral
  (select *, i8.q2 from int4_tbl i1, int4_tbl i2 where false) ss on true;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: i8.q1, i8.q2, f1, f1, (i8.q2)`}, {`->  Seq Scan on public.int8_tbl i8`}, {`Output: i8.q1, i8.q2`}, {`->  Result`}, {`Output: f1, f1, i8.q2`}, {`One-Time Filter: false`}},
			},
			{
				Statement: `select * from
  ((select 2 as v) union all (select 3 as v)) as q1
  cross join lateral
  ((select * from
      ((select 4 as v) union all (select 5 as v)) as q3)
   union all
   (select q1.v)
  ) as q2;`,
				Results: []sql.Row{{2, 4}, {2, 5}, {2, 2}, {3, 4}, {3, 5}, {3, 3}},
			},
			{
				Statement:   `SELECT * FROM (int8_tbl i cross join int4_tbl j) ss(a,b,c,d);`,
				ErrorString: `join expression "ss" has 3 columns available but 4 columns specified`,
			},
			{
				Statement: `explain (verbose, costs off)
select * from
  (values (0,9998), (1,1000)) v(id,x),
  lateral (select f1 from int4_tbl
           where f1 = any (select unique1 from tenk1
                           where unique2 = v.x offset 0)) ss;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: "*VALUES*".column1, "*VALUES*".column2, int4_tbl.f1`}, {`->  Values Scan on "*VALUES*"`}, {`Output: "*VALUES*".column1, "*VALUES*".column2`}, {`->  Nested Loop Semi Join`}, {`Output: int4_tbl.f1`}, {`Join Filter: (int4_tbl.f1 = tenk1.unique1)`}, {`->  Seq Scan on public.int4_tbl`}, {`Output: int4_tbl.f1`}, {`->  Materialize`}, {`Output: tenk1.unique1`}, {`->  Index Scan using tenk1_unique2 on public.tenk1`}, {`Output: tenk1.unique1`}, {`Index Cond: (tenk1.unique2 = "*VALUES*".column2)`}},
			},
			{
				Statement: `select * from
  (values (0,9998), (1,1000)) v(id,x),
  lateral (select f1 from int4_tbl
           where f1 = any (select unique1 from tenk1
                           where unique2 = v.x offset 0)) ss;`,
				Results: []sql.Row{{0, 9998, 0}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from (values (0), (1)) v(id),
lateral (select * from int8_tbl t1,
         lateral (select * from
                    (select * from int8_tbl t2
                     where q1 = any (select q2 from int8_tbl t3
                                     where q2 = (select greatest(t1.q1,t2.q2))
                                       and (select v.id=0)) offset 0) ss2) ss
         where t1.q1 = ss.q2) ss0;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: "*VALUES*".column1, t1.q1, t1.q2, ss2.q1, ss2.q2`}, {`->  Seq Scan on public.int8_tbl t1`}, {`Output: t1.q1, t1.q2`}, {`->  Nested Loop`}, {`Output: "*VALUES*".column1, ss2.q1, ss2.q2`}, {`->  Values Scan on "*VALUES*"`}, {`Output: "*VALUES*".column1`}, {`->  Subquery Scan on ss2`}, {`Output: ss2.q1, ss2.q2`}, {`Filter: (t1.q1 = ss2.q2)`}, {`->  Seq Scan on public.int8_tbl t2`}, {`Output: t2.q1, t2.q2`}, {`Filter: (SubPlan 3)`}, {`SubPlan 3`}, {`->  Result`}, {`Output: t3.q2`}, {`One-Time Filter: $4`}, {`InitPlan 1 (returns $2)`}, {`->  Result`}, {`Output: GREATEST($0, t2.q2)`}, {`InitPlan 2 (returns $4)`}, {`->  Result`}, {`Output: ($3 = 0)`}, {`->  Seq Scan on public.int8_tbl t3`}, {`Output: t3.q1, t3.q2`}, {`Filter: (t3.q2 = $2)`}},
			},
			{
				Statement: `select * from (values (0), (1)) v(id),
lateral (select * from int8_tbl t1,
         lateral (select * from
                    (select * from int8_tbl t2
                     where q1 = any (select q2 from int8_tbl t3
                                     where q2 = (select greatest(t1.q1,t2.q2))
                                       and (select v.id=0)) offset 0) ss2) ss
         where t1.q1 = ss.q2) ss0;`,
				Results: []sql.Row{{0, 4567890123456789, 123, 4567890123456789, 4567890123456789}, {0, 4567890123456789, 4567890123456789, 4567890123456789, 4567890123456789}, {0, 4567890123456789, -4567890123456789, 4567890123456789, 4567890123456789}},
			},
			{
				Statement:   `select f1,g from int4_tbl a, (select f1 as g) ss;`,
				ErrorString: `column "f1" does not exist`,
			},
			{
				Statement:   `select f1,g from int4_tbl a, (select a.f1 as g) ss;`,
				ErrorString: `invalid reference to FROM-clause entry for table "a"`,
			},
			{
				Statement:   `select f1,g from int4_tbl a cross join (select f1 as g) ss;`,
				ErrorString: `column "f1" does not exist`,
			},
			{
				Statement:   `select f1,g from int4_tbl a cross join (select a.f1 as g) ss;`,
				ErrorString: `invalid reference to FROM-clause entry for table "a"`,
			},
			{
				Statement:   `select f1,g from int4_tbl a right join lateral generate_series(0, a.f1) g on true;`,
				ErrorString: `invalid reference to FROM-clause entry for table "a"`,
			},
			{
				Statement:   `select f1,g from int4_tbl a full join lateral generate_series(0, a.f1) g on true;`,
				ErrorString: `invalid reference to FROM-clause entry for table "a"`,
			},
			{
				Statement: `select * from
  int8_tbl x cross join (int4_tbl x cross join lateral (select x.f1) ss);`,
				ErrorString: `table reference "x" is ambiguous`,
			},
			{
				Statement:   `select 1 from tenk1 a, lateral (select max(a.unique1) from int4_tbl b) ss;`,
				ErrorString: `aggregate functions are not allowed in FROM clause of their own query level`,
			},
			{
				Statement: `create temp table xx1 as select f1 as x1, -f1 as x2 from int4_tbl;`,
			},
			{
				Statement:   `update xx1 set x2 = f1 from (select * from int4_tbl where f1 = x1) ss;`,
				ErrorString: `column "x1" does not exist`,
			},
			{
				Statement:   `update xx1 set x2 = f1 from (select * from int4_tbl where f1 = xx1.x1) ss;`,
				ErrorString: `invalid reference to FROM-clause entry for table "xx1"`,
			},
			{
				Statement:   `update xx1 set x2 = f1 from lateral (select * from int4_tbl where f1 = x1) ss;`,
				ErrorString: `invalid reference to FROM-clause entry for table "xx1"`,
			},
			{
				Statement:   `update xx1 set x2 = f1 from xx1, lateral (select * from int4_tbl where f1 = x1) ss;`,
				ErrorString: `table name "xx1" specified more than once`,
			},
			{
				Statement:   `delete from xx1 using (select * from int4_tbl where f1 = x1) ss;`,
				ErrorString: `column "x1" does not exist`,
			},
			{
				Statement:   `delete from xx1 using (select * from int4_tbl where f1 = xx1.x1) ss;`,
				ErrorString: `invalid reference to FROM-clause entry for table "xx1"`,
			},
			{
				Statement:   `delete from xx1 using lateral (select * from int4_tbl where f1 = x1) ss;`,
				ErrorString: `invalid reference to FROM-clause entry for table "xx1"`,
			},
			{
				Statement: `create table join_pt1 (a int, b int, c varchar) partition by range(a);`,
			},
			{
				Statement: `create table join_pt1p1 partition of join_pt1 for values from (0) to (100) partition by range(b);`,
			},
			{
				Statement: `create table join_pt1p2 partition of join_pt1 for values from (100) to (200);`,
			},
			{
				Statement: `create table join_pt1p1p1 partition of join_pt1p1 for values from (0) to (100);`,
			},
			{
				Statement: `insert into join_pt1 values (1, 1, 'x'), (101, 101, 'y');`,
			},
			{
				Statement: `create table join_ut1 (a int, b int, c varchar);`,
			},
			{
				Statement: `insert into join_ut1 values (101, 101, 'y'), (2, 2, 'z');`,
			},
			{
				Statement: `explain (verbose, costs off)
select t1.b, ss.phv from join_ut1 t1 left join lateral
              (select t2.a as t2a, t3.a t3a, least(t1.a, t2.a, t3.a) phv
					  from join_pt1 t2 join join_ut1 t3 on t2.a = t3.b) ss
              on t1.a = ss.t2a order by t1.a;`,
				Results: []sql.Row{{`Sort`}, {`Output: t1.b, (LEAST(t1.a, t2.a, t3.a)), t1.a`}, {`Sort Key: t1.a`}, {`->  Nested Loop Left Join`}, {`Output: t1.b, (LEAST(t1.a, t2.a, t3.a)), t1.a`}, {`->  Seq Scan on public.join_ut1 t1`}, {`Output: t1.a, t1.b, t1.c`}, {`->  Hash Join`}, {`Output: t2.a, LEAST(t1.a, t2.a, t3.a)`}, {`Hash Cond: (t3.b = t2.a)`}, {`->  Seq Scan on public.join_ut1 t3`}, {`Output: t3.a, t3.b, t3.c`}, {`->  Hash`}, {`Output: t2.a`}, {`->  Append`}, {`->  Seq Scan on public.join_pt1p1p1 t2_1`}, {`Output: t2_1.a`}, {`Filter: (t1.a = t2_1.a)`}, {`->  Seq Scan on public.join_pt1p2 t2_2`}, {`Output: t2_2.a`}, {`Filter: (t1.a = t2_2.a)`}},
			},
			{
				Statement: `select t1.b, ss.phv from join_ut1 t1 left join lateral
              (select t2.a as t2a, t3.a t3a, least(t1.a, t2.a, t3.a) phv
					  from join_pt1 t2 join join_ut1 t3 on t2.a = t3.b) ss
              on t1.a = ss.t2a order by t1.a;`,
				Results: []sql.Row{{2, ``}, {101, 101}},
			},
			{
				Statement: `drop table join_pt1;`,
			},
			{
				Statement: `drop table join_ut1;`,
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `create table fkest (x integer, x10 integer, x10b integer, x100 integer);`,
			},
			{
				Statement: `insert into fkest select x, x/10, x/10, x/100 from generate_series(1,1000) x;`,
			},
			{
				Statement: `create unique index on fkest(x, x10, x100);`,
			},
			{
				Statement: `analyze fkest;`,
			},
			{
				Statement: `explain (costs off)
select * from fkest f1
  join fkest f2 on (f1.x = f2.x and f1.x10 = f2.x10b and f1.x100 = f2.x100)
  join fkest f3 on f1.x = f3.x
  where f1.x100 = 2;`,
				Results: []sql.Row{{`Nested Loop`}, {`->  Hash Join`}, {`Hash Cond: ((f2.x = f1.x) AND (f2.x10b = f1.x10))`}, {`->  Seq Scan on fkest f2`}, {`Filter: (x100 = 2)`}, {`->  Hash`}, {`->  Seq Scan on fkest f1`}, {`Filter: (x100 = 2)`}, {`->  Index Scan using fkest_x_x10_x100_idx on fkest f3`}, {`Index Cond: (x = f1.x)`}},
			},
			{
				Statement: `alter table fkest add constraint fk
  foreign key (x, x10b, x100) references fkest (x, x10, x100);`,
			},
			{
				Statement: `explain (costs off)
select * from fkest f1
  join fkest f2 on (f1.x = f2.x and f1.x10 = f2.x10b and f1.x100 = f2.x100)
  join fkest f3 on f1.x = f3.x
  where f1.x100 = 2;`,
				Results: []sql.Row{{`Hash Join`}, {`Hash Cond: ((f2.x = f1.x) AND (f2.x10b = f1.x10))`}, {`->  Hash Join`}, {`Hash Cond: (f3.x = f2.x)`}, {`->  Seq Scan on fkest f3`}, {`->  Hash`}, {`->  Seq Scan on fkest f2`}, {`Filter: (x100 = 2)`}, {`->  Hash`}, {`->  Seq Scan on fkest f1`}, {`Filter: (x100 = 2)`}},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `begin;`,
			},
			{
				Statement: `create table fkest (a int, b int, c int unique, primary key(a,b));`,
			},
			{
				Statement: `create table fkest1 (a int, b int, primary key(a,b));`,
			},
			{
				Statement: `insert into fkest select x/10, x%10, x from generate_series(1,1000) x;`,
			},
			{
				Statement: `insert into fkest1 select x/10, x%10 from generate_series(1,1000) x;`,
			},
			{
				Statement: `alter table fkest1
  add constraint fkest1_a_b_fkey foreign key (a,b) references fkest;`,
			},
			{
				Statement: `analyze fkest;`,
			},
			{
				Statement: `analyze fkest1;`,
			},
			{
				Statement: `explain (costs off)
select *
from fkest f
  left join fkest1 f1 on f.a = f1.a and f.b = f1.b
  left join fkest1 f2 on f.a = f2.a and f.b = f2.b
  left join fkest1 f3 on f.a = f3.a and f.b = f3.b
where f.c = 1;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`->  Nested Loop Left Join`}, {`->  Nested Loop Left Join`}, {`->  Index Scan using fkest_c_key on fkest f`}, {`Index Cond: (c = 1)`}, {`->  Index Only Scan using fkest1_pkey on fkest1 f1`}, {`Index Cond: ((a = f.a) AND (b = f.b))`}, {`->  Index Only Scan using fkest1_pkey on fkest1 f2`}, {`Index Cond: ((a = f.a) AND (b = f.b))`}, {`->  Index Only Scan using fkest1_pkey on fkest1 f3`}, {`Index Cond: ((a = f.a) AND (b = f.b))`}},
			},
			{
				Statement: `rollback;`,
			},
			{
				Statement: `create table j1 (id int primary key);`,
			},
			{
				Statement: `create table j2 (id int primary key);`,
			},
			{
				Statement: `create table j3 (id int);`,
			},
			{
				Statement: `insert into j1 values(1),(2),(3);`,
			},
			{
				Statement: `insert into j2 values(1),(2),(3);`,
			},
			{
				Statement: `insert into j3 values(1),(1);`,
			},
			{
				Statement: `analyze j1;`,
			},
			{
				Statement: `analyze j2;`,
			},
			{
				Statement: `analyze j3;`,
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1 inner join j2 on j1.id = j2.id;`,
				Results: []sql.Row{{`Hash Join`}, {`Output: j1.id, j2.id`}, {`Inner Unique: true`}, {`Hash Cond: (j1.id = j2.id)`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}, {`->  Hash`}, {`Output: j2.id`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1 inner join j2 on j1.id > j2.id;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: j1.id, j2.id`}, {`Join Filter: (j1.id > j2.id)`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}, {`->  Materialize`}, {`Output: j2.id`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1 inner join j3 on j1.id = j3.id;`,
				Results: []sql.Row{{`Hash Join`}, {`Output: j1.id, j3.id`}, {`Inner Unique: true`}, {`Hash Cond: (j3.id = j1.id)`}, {`->  Seq Scan on public.j3`}, {`Output: j3.id`}, {`->  Hash`}, {`Output: j1.id`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1 left join j2 on j1.id = j2.id;`,
				Results: []sql.Row{{`Hash Left Join`}, {`Output: j1.id, j2.id`}, {`Inner Unique: true`}, {`Hash Cond: (j1.id = j2.id)`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}, {`->  Hash`}, {`Output: j2.id`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1 right join j2 on j1.id = j2.id;`,
				Results: []sql.Row{{`Hash Left Join`}, {`Output: j1.id, j2.id`}, {`Inner Unique: true`}, {`Hash Cond: (j2.id = j1.id)`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id`}, {`->  Hash`}, {`Output: j1.id`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1 full join j2 on j1.id = j2.id;`,
				Results: []sql.Row{{`Hash Full Join`}, {`Output: j1.id, j2.id`}, {`Inner Unique: true`}, {`Hash Cond: (j1.id = j2.id)`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}, {`->  Hash`}, {`Output: j2.id`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1 cross join j2;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: j1.id, j2.id`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}, {`->  Materialize`}, {`Output: j2.id`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1 natural join j2;`,
				Results: []sql.Row{{`Hash Join`}, {`Output: j1.id`}, {`Inner Unique: true`}, {`Hash Cond: (j1.id = j2.id)`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}, {`->  Hash`}, {`Output: j2.id`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1
inner join (select distinct id from j3) j3 on j1.id = j3.id;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: j1.id, j3.id`}, {`Inner Unique: true`}, {`Join Filter: (j1.id = j3.id)`}, {`->  Unique`}, {`Output: j3.id`}, {`->  Sort`}, {`Output: j3.id`}, {`Sort Key: j3.id`}, {`->  Seq Scan on public.j3`}, {`Output: j3.id`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1
inner join (select id from j3 group by id) j3 on j1.id = j3.id;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: j1.id, j3.id`}, {`Inner Unique: true`}, {`Join Filter: (j1.id = j3.id)`}, {`->  Group`}, {`Output: j3.id`}, {`Group Key: j3.id`}, {`->  Sort`}, {`Output: j3.id`}, {`Sort Key: j3.id`}, {`->  Seq Scan on public.j3`}, {`Output: j3.id`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id`}},
			},
			{
				Statement: `drop table j1;`,
			},
			{
				Statement: `drop table j2;`,
			},
			{
				Statement: `drop table j3;`,
			},
			{
				Statement: `create table j1 (id1 int, id2 int, primary key(id1,id2));`,
			},
			{
				Statement: `create table j2 (id1 int, id2 int, primary key(id1,id2));`,
			},
			{
				Statement: `create table j3 (id1 int, id2 int, primary key(id1,id2));`,
			},
			{
				Statement: `insert into j1 values(1,1),(1,2);`,
			},
			{
				Statement: `insert into j2 values(1,1);`,
			},
			{
				Statement: `insert into j3 values(1,1);`,
			},
			{
				Statement: `analyze j1;`,
			},
			{
				Statement: `analyze j2;`,
			},
			{
				Statement: `analyze j3;`,
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1
inner join j2 on j1.id1 = j2.id1;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: j1.id1, j1.id2, j2.id1, j2.id2`}, {`Join Filter: (j1.id1 = j2.id1)`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id1, j2.id2`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id1, j1.id2`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1
inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: j1.id1, j1.id2, j2.id1, j2.id2`}, {`Inner Unique: true`}, {`Join Filter: ((j1.id1 = j2.id1) AND (j1.id2 = j2.id2))`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id1, j2.id2`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id1, j1.id2`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1
inner join j2 on j1.id1 = j2.id1 where j1.id2 = 1;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: j1.id1, j1.id2, j2.id1, j2.id2`}, {`Join Filter: (j1.id1 = j2.id1)`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id1, j1.id2`}, {`Filter: (j1.id2 = 1)`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id1, j2.id2`}},
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1
left join j2 on j1.id1 = j2.id1 where j1.id2 = 1;`,
				Results: []sql.Row{{`Nested Loop Left Join`}, {`Output: j1.id1, j1.id2, j2.id1, j2.id2`}, {`Join Filter: (j1.id1 = j2.id1)`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id1, j1.id2`}, {`Filter: (j1.id2 = 1)`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id1, j2.id2`}},
			},
			{
				Statement: `create unique index j1_id2_idx on j1(id2) where id2 is not null;`,
			},
			{
				Statement: `explain (verbose, costs off)
select * from j1
inner join j2 on j1.id2 = j2.id2;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: j1.id1, j1.id2, j2.id1, j2.id2`}, {`Join Filter: (j1.id2 = j2.id2)`}, {`->  Seq Scan on public.j2`}, {`Output: j2.id1, j2.id2`}, {`->  Seq Scan on public.j1`}, {`Output: j1.id1, j1.id2`}},
			},
			{
				Statement: `drop index j1_id2_idx;`,
			},
			{
				Statement: `set enable_nestloop to 0;`,
			},
			{
				Statement: `set enable_hashjoin to 0;`,
			},
			{
				Statement: `set enable_sort to 0;`,
			},
			{
				Statement: `create index j1_id1_idx on j1 (id1) where id1 % 1000 = 1;`,
			},
			{
				Statement: `create index j2_id1_idx on j2 (id1) where id1 % 1000 = 1;`,
			},
			{
				Statement: `insert into j2 values(1,2);`,
			},
			{
				Statement: `analyze j2;`,
			},
			{
				Statement: `explain (costs off) select * from j1
inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1;`,
				Results: []sql.Row{{`Merge Join`}, {`Merge Cond: (j1.id1 = j2.id1)`}, {`Join Filter: (j1.id2 = j2.id2)`}, {`->  Index Scan using j1_id1_idx on j1`}, {`->  Index Scan using j2_id1_idx on j2`}},
			},
			{
				Statement: `select * from j1
inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1;`,
				Results: []sql.Row{{1, 1, 1, 1}, {1, 2, 1, 2}},
			},
			{
				Statement: `explain (costs off) select * from j1
inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 = any (array[1]);`,
				Results: []sql.Row{{`Merge Join`}, {`Merge Cond: (j1.id1 = j2.id1)`}, {`Join Filter: (j1.id2 = j2.id2)`}, {`->  Index Scan using j1_id1_idx on j1`}, {`->  Index Scan using j2_id1_idx on j2`}, {`Index Cond: (id1 = ANY ('{1}'::integer[]))`}},
			},
			{
				Statement: `select * from j1
inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 = any (array[1]);`,
				Results: []sql.Row{{1, 1, 1, 1}, {1, 2, 1, 2}},
			},
			{
				Statement: `explain (costs off) select * from j1
inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 >= any (array[1,5]);`,
				Results: []sql.Row{{`Merge Join`}, {`Merge Cond: (j1.id1 = j2.id1)`}, {`Join Filter: (j1.id2 = j2.id2)`}, {`->  Index Scan using j1_id1_idx on j1`}, {`->  Index Only Scan using j2_pkey on j2`}, {`Index Cond: (id1 >= ANY ('{1,5}'::integer[]))`}, {`Filter: ((id1 % 1000) = 1)`}},
			},
			{
				Statement: `select * from j1
inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 >= any (array[1,5]);`,
				Results: []sql.Row{{1, 1, 1, 1}, {1, 2, 1, 2}},
			},
			{
				Statement: `reset enable_nestloop;`,
			},
			{
				Statement: `reset enable_hashjoin;`,
			},
			{
				Statement: `reset enable_sort;`,
			},
			{
				Statement: `drop table j1;`,
			},
			{
				Statement: `drop table j2;`,
			},
			{
				Statement: `drop table j3;`,
			},
			{
				Statement: `explain (verbose, costs off)
select t1.unique1, t2.hundred
from onek t1, tenk1 t2
where exists (select 1 from tenk1 t3
              where t3.thousand = t1.unique1 and t3.tenthous = t2.hundred)
      and t1.unique1 < 1;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: t1.unique1, t2.hundred`}, {`->  Hash Join`}, {`Output: t1.unique1, t3.tenthous`}, {`Hash Cond: (t3.thousand = t1.unique1)`}, {`->  HashAggregate`}, {`Output: t3.thousand, t3.tenthous`}, {`Group Key: t3.thousand, t3.tenthous`}, {`->  Index Only Scan using tenk1_thous_tenthous on public.tenk1 t3`}, {`Output: t3.thousand, t3.tenthous`}, {`->  Hash`}, {`Output: t1.unique1`}, {`->  Index Only Scan using onek_unique1 on public.onek t1`}, {`Output: t1.unique1`}, {`Index Cond: (t1.unique1 < 1)`}, {`->  Index Only Scan using tenk1_hundred on public.tenk1 t2`}, {`Output: t2.hundred`}, {`Index Cond: (t2.hundred = t3.tenthous)`}},
			},
			{
				Statement: `create table j3 as select unique1, tenthous from onek;`,
			},
			{
				Statement: `vacuum analyze j3;`,
			},
			{
				Statement: `create unique index on j3(unique1, tenthous);`,
			},
			{
				Statement: `explain (verbose, costs off)
select t1.unique1, t2.hundred
from onek t1, tenk1 t2
where exists (select 1 from j3
              where j3.unique1 = t1.unique1 and j3.tenthous = t2.hundred)
      and t1.unique1 < 1;`,
				Results: []sql.Row{{`Nested Loop`}, {`Output: t1.unique1, t2.hundred`}, {`->  Nested Loop`}, {`Output: t1.unique1, j3.tenthous`}, {`->  Index Only Scan using onek_unique1 on public.onek t1`}, {`Output: t1.unique1`}, {`Index Cond: (t1.unique1 < 1)`}, {`->  Index Only Scan using j3_unique1_tenthous_idx on public.j3`}, {`Output: j3.unique1, j3.tenthous`}, {`Index Cond: (j3.unique1 = t1.unique1)`}, {`->  Index Only Scan using tenk1_hundred on public.tenk1 t2`}, {`Output: t2.hundred`}, {`Index Cond: (t2.hundred = j3.tenthous)`}},
			},
			{
				Statement: `drop table j3;`,
			},
		},
	})
}
