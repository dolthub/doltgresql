// Copyright 2024 Dolthub, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package regression

import (
	"testing"

	"github.com/dolthub/go-mysql-server/sql"
)

func TestIdentity(t *testing.T) {
	t.Skip()
	_ = RunTests(t, RegressionFileName_identity)
}

func init() {
	RegisterRegressionFile(RegressionFile{
		RegressionFileName: RegressionFileName_identity,
		DependsOn:          []RegressionFileName{RegressionFileName_test_setup},
		Statements: []RegressionFileStatement{
			{
				Statement: `SELECT attrelid, attname, attidentity FROM pg_attribute WHERE attidentity NOT IN ('', 'a', 'd');`,
				Results:   []sql.Row{},
			},
			{
				Statement: `CREATE TABLE itest1 (a int generated by default as identity, b text);`,
			},
			{
				Statement: `CREATE TABLE itest2 (a bigint generated always as identity, b text);`,
			},
			{
				Statement: `CREATE TABLE itest3 (a smallint generated by default as identity (start with 7 increment by 5), b text);`,
			},
			{
				Statement:   `ALTER TABLE itest3 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;  -- error`,
				ErrorString: `column "a" of relation "itest3" is already an identity column`,
			},
			{
				Statement: `SELECT table_name, column_name, column_default, is_nullable, is_identity, identity_generation, identity_start, identity_increment, identity_maximum, identity_minimum, identity_cycle FROM information_schema.columns WHERE table_name LIKE 'itest_' ORDER BY 1, 2;`,
				Results:   []sql.Row{{`itest1`, `a`, ``, `NO`, `YES`, `BY DEFAULT`, 1, 1, 2147483647, 1, `NO`}, {`itest1`, `b`, ``, `YES`, `NO`, ``, ``, ``, ``, ``, `NO`}, {`itest2`, `a`, ``, `NO`, `YES`, `ALWAYS`, 1, 1, 9223372036854775807, 1, `NO`}, {`itest2`, `b`, ``, `YES`, `NO`, ``, ``, ``, ``, ``, `NO`}, {`itest3`, `a`, ``, `NO`, `YES`, `BY DEFAULT`, 7, 5, 32767, 1, `NO`}, {`itest3`, `b`, ``, `YES`, `NO`, ``, ``, ``, ``, ``, `NO`}},
			},
			{
				Statement: `SELECT sequence_name FROM information_schema.sequences WHERE sequence_name LIKE 'itest%';`,
				Results:   []sql.Row{},
			},
			{
				Statement: `SELECT pg_get_serial_sequence('itest1', 'a');`,
				Results:   []sql.Row{{`public.itest1_a_seq`}},
			},
			{
				Statement: `\d itest1_a_seq
                    Sequence "public.itest1_a_seq"
  Type   | Start | Minimum |  Maximum   | Increment | Cycles? | Cache 
---------+-------+---------+------------+-----------+---------+-------
 integer |     1 |       1 | 2147483647 |         1 | no      |     1
Sequence for identity column: public.itest1.a
CREATE TABLE itest4 (a int, b text);`,
			},
			{
				Statement:   `ALTER TABLE itest4 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;  -- error, requires NOT NULL`,
				ErrorString: `column "a" of relation "itest4" must be declared NOT NULL before identity can be added`,
			},
			{
				Statement: `ALTER TABLE itest4 ALTER COLUMN a SET NOT NULL;`,
			},
			{
				Statement: `ALTER TABLE itest4 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;  -- ok`,
			},
			{
				Statement:   `ALTER TABLE itest4 ALTER COLUMN a DROP NOT NULL;  -- error, disallowed`,
				ErrorString: `column "a" of relation "itest4" is an identity column`,
			},
			{
				Statement:   `ALTER TABLE itest4 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;  -- error, already set`,
				ErrorString: `column "a" of relation "itest4" is already an identity column`,
			},
			{
				Statement:   `ALTER TABLE itest4 ALTER COLUMN b ADD GENERATED ALWAYS AS IDENTITY;  -- error, wrong data type`,
				ErrorString: `identity column type must be smallint, integer, or bigint`,
			},
			{
				Statement: `ALTER TABLE itest4 ALTER COLUMN b SET DEFAULT '';`,
			},
			{
				Statement:   `CREATE TABLE itest_err_1 (a text generated by default as identity);`,
				ErrorString: `identity column type must be smallint, integer, or bigint`,
			},
			{
				Statement:   `CREATE TABLE itest_err_2 (a int generated always as identity generated by default as identity);`,
				ErrorString: `multiple identity specifications for column "a" of table "itest_err_2"`,
			},
			{
				Statement:   `CREATE TABLE itest_err_3 (a int default 5 generated by default as identity);`,
				ErrorString: `both default and identity specified for column "a" of table "itest_err_3"`,
			},
			{
				Statement:   `CREATE TABLE itest_err_4 (a serial generated by default as identity);`,
				ErrorString: `both default and identity specified for column "a" of table "itest_err_4"`,
			},
			{
				Statement: `INSERT INTO itest1 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itest1 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itest2 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itest2 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itest3 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itest3 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itest4 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itest4 DEFAULT VALUES;`,
			},
			{
				Statement: `SELECT * FROM itest1;`,
				Results:   []sql.Row{{1, ``}, {2, ``}},
			},
			{
				Statement: `SELECT * FROM itest2;`,
				Results:   []sql.Row{{1, ``}, {2, ``}},
			},
			{
				Statement: `SELECT * FROM itest3;`,
				Results:   []sql.Row{{7, ``}, {12, ``}},
			},
			{
				Statement: `SELECT * FROM itest4;`,
				Results:   []sql.Row{{1, ``}, {2, ``}},
			},
			{
				Statement: `CREATE TABLE itest5 (a int generated always as identity, b text);`,
			},
			{
				Statement:   `INSERT INTO itest5 VALUES (1, 'a');  -- error`,
				ErrorString: `cannot insert a non-DEFAULT value into column "a"`,
			},
			{
				Statement: `INSERT INTO itest5 VALUES (DEFAULT, 'a');  -- ok`,
			},
			{
				Statement:   `INSERT INTO itest5 VALUES (2, 'b'), (3, 'c');  -- error`,
				ErrorString: `cannot insert a non-DEFAULT value into column "a"`,
			},
			{
				Statement:   `INSERT INTO itest5 VALUES (DEFAULT, 'b'), (3, 'c');  -- error`,
				ErrorString: `cannot insert a non-DEFAULT value into column "a"`,
			},
			{
				Statement:   `INSERT INTO itest5 VALUES (2, 'b'), (DEFAULT, 'c');  -- error`,
				ErrorString: `cannot insert a non-DEFAULT value into column "a"`,
			},
			{
				Statement: `INSERT INTO itest5 VALUES (DEFAULT, 'b'), (DEFAULT, 'c');  -- ok`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (-1, 'aa');`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (-2, 'bb'), (-3, 'cc');`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (DEFAULT, 'dd'), (-4, 'ee');`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (-5, 'ff'), (DEFAULT, 'gg');`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (DEFAULT, 'hh'), (DEFAULT, 'ii');`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING USER VALUE VALUES (-1, 'aaa');`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING USER VALUE VALUES (-2, 'bbb'), (-3, 'ccc');`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING USER VALUE VALUES (DEFAULT, 'ddd'), (-4, 'eee');`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING USER VALUE VALUES (-5, 'fff'), (DEFAULT, 'ggg');`,
			},
			{
				Statement: `INSERT INTO itest5 OVERRIDING USER VALUE VALUES (DEFAULT, 'hhh'), (DEFAULT, 'iii');`,
			},
			{
				Statement: `SELECT * FROM itest5;`,
				Results:   []sql.Row{{1, `a`}, {2, `b`}, {3, `c`}, {-1, `aa`}, {-2, `bb`}, {-3, `cc`}, {4, `dd`}, {-4, `ee`}, {-5, `ff`}, {5, `gg`}, {6, `hh`}, {7, `ii`}, {8, `aaa`}, {9, `bbb`}, {10, `ccc`}, {11, `ddd`}, {12, `eee`}, {13, `fff`}, {14, `ggg`}, {15, `hhh`}, {16, `iii`}},
			},
			{
				Statement: `DROP TABLE itest5;`,
			},
			{
				Statement: `INSERT INTO itest3 VALUES (DEFAULT, 'a');`,
			},
			{
				Statement: `INSERT INTO itest3 VALUES (DEFAULT, 'b'), (DEFAULT, 'c');`,
			},
			{
				Statement: `SELECT * FROM itest3;`,
				Results:   []sql.Row{{7, ``}, {12, ``}, {17, `a`}, {22, `b`}, {27, `c`}},
			},
			{
				Statement: `INSERT INTO itest1 VALUES (10, 'xyz');`,
			},
			{
				Statement: `INSERT INTO itest1 OVERRIDING SYSTEM VALUE VALUES (20, 'xyz');`,
			},
			{
				Statement: `INSERT INTO itest1 OVERRIDING USER VALUE VALUES (30, 'xyz');`,
			},
			{
				Statement: `SELECT * FROM itest1;`,
				Results:   []sql.Row{{1, ``}, {2, ``}, {10, `xyz`}, {20, `xyz`}, {3, `xyz`}},
			},
			{
				Statement:   `INSERT INTO itest2 VALUES (10, 'xyz');`,
				ErrorString: `cannot insert a non-DEFAULT value into column "a"`,
			},
			{
				Statement: `INSERT INTO itest2 OVERRIDING SYSTEM VALUE VALUES (20, 'xyz');`,
			},
			{
				Statement: `INSERT INTO itest2 OVERRIDING USER VALUE VALUES (30, 'xyz');`,
			},
			{
				Statement: `SELECT * FROM itest2;`,
				Results:   []sql.Row{{1, ``}, {2, ``}, {20, `xyz`}, {3, `xyz`}},
			},
			{
				Statement: `UPDATE itest1 SET a = 101 WHERE a = 1;`,
			},
			{
				Statement: `UPDATE itest1 SET a = DEFAULT WHERE a = 2;`,
			},
			{
				Statement: `SELECT * FROM itest1;`,
				Results:   []sql.Row{{10, `xyz`}, {20, `xyz`}, {3, `xyz`}, {101, ``}, {4, ``}},
			},
			{
				Statement:   `UPDATE itest2 SET a = 101 WHERE a = 1;  -- error`,
				ErrorString: `column "a" can only be updated to DEFAULT`,
			},
			{
				Statement: `UPDATE itest2 SET a = DEFAULT WHERE a = 2;  -- ok`,
			},
			{
				Statement: `SELECT * FROM itest2;`,
				Results:   []sql.Row{{1, ``}, {20, `xyz`}, {3, `xyz`}, {4, ``}},
			},
			{
				Statement: `CREATE TABLE itest9 (a int GENERATED ALWAYS AS IDENTITY, b text, c bigint);`,
			},
			{
				Statement: `COPY itest9 FROM stdin;`,
			},
			{
				Statement: `COPY itest9 (b, c) FROM stdin;`,
			},
			{
				Statement: `SELECT * FROM itest9 ORDER BY c;`,
				Results:   []sql.Row{{100, `foo`, 200}, {101, `bar`, 201}, {1, `foo2`, 202}, {2, `bar2`, 203}},
			},
			{
				Statement: `ALTER TABLE itest4 ALTER COLUMN a DROP IDENTITY;`,
			},
			{
				Statement:   `ALTER TABLE itest4 ALTER COLUMN a DROP IDENTITY;  -- error`,
				ErrorString: `column "a" of relation "itest4" is not an identity column`,
			},
			{
				Statement: `ALTER TABLE itest4 ALTER COLUMN a DROP IDENTITY IF EXISTS;  -- noop`,
			},
			{
				Statement:   `INSERT INTO itest4 DEFAULT VALUES;  -- fails because NOT NULL is not dropped`,
				ErrorString: `null value in column "a" of relation "itest4" violates not-null constraint`,
			},
			{
				Statement: `ALTER TABLE itest4 ALTER COLUMN a DROP NOT NULL;`,
			},
			{
				Statement: `INSERT INTO itest4 DEFAULT VALUES;`,
			},
			{
				Statement: `SELECT * FROM itest4;`,
				Results:   []sql.Row{{1, ``}, {2, ``}, {``, ``}},
			},
			{
				Statement:   `SELECT sequence_name FROM itest4_a_seq;`,
				ErrorString: `relation "itest4_a_seq" does not exist`,
			},
			{
				Statement: `CREATE TABLE itest10 (a int generated by default as identity, b text);`,
			},
			{
				Statement: `CREATE TABLE itest11 (a int generated always as identity, b text);`,
			},
			{
				Statement: `CREATE VIEW itestv10 AS SELECT * FROM itest10;`,
			},
			{
				Statement: `CREATE VIEW itestv11 AS SELECT * FROM itest11;`,
			},
			{
				Statement: `INSERT INTO itestv10 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itestv10 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itestv11 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itestv11 DEFAULT VALUES;`,
			},
			{
				Statement: `SELECT * FROM itestv10;`,
				Results:   []sql.Row{{1, ``}, {2, ``}},
			},
			{
				Statement: `SELECT * FROM itestv11;`,
				Results:   []sql.Row{{1, ``}, {2, ``}},
			},
			{
				Statement: `INSERT INTO itestv10 VALUES (10, 'xyz');`,
			},
			{
				Statement: `INSERT INTO itestv10 OVERRIDING USER VALUE VALUES (11, 'xyz');`,
			},
			{
				Statement: `SELECT * FROM itestv10;`,
				Results:   []sql.Row{{1, ``}, {2, ``}, {10, `xyz`}, {3, `xyz`}},
			},
			{
				Statement:   `INSERT INTO itestv11 VALUES (10, 'xyz');`,
				ErrorString: `cannot insert a non-DEFAULT value into column "a"`,
			},
			{
				Statement: `INSERT INTO itestv11 OVERRIDING SYSTEM VALUE VALUES (11, 'xyz');`,
			},
			{
				Statement: `SELECT * FROM itestv11;`,
				Results:   []sql.Row{{1, ``}, {2, ``}, {11, `xyz`}},
			},
			{
				Statement: `DROP VIEW itestv10, itestv11;`,
			},
			{
				Statement: `CREATE TABLE itest13 (a int);`,
			},
			{
				Statement: `ALTER TABLE itest13 ADD COLUMN b int GENERATED BY DEFAULT AS IDENTITY;`,
			},
			{
				Statement: `INSERT INTO itest13 VALUES (1), (2), (3);`,
			},
			{
				Statement: `ALTER TABLE itest13 ADD COLUMN c int GENERATED BY DEFAULT AS IDENTITY;`,
			},
			{
				Statement: `SELECT * FROM itest13;`,
				Results:   []sql.Row{{1, 1, 1}, {2, 2, 2}, {3, 3, 3}},
			},
			{
				Statement:   `ALTER TABLE itest1 ALTER COLUMN a SET DEFAULT 1;`,
				ErrorString: `column "a" of relation "itest1" is an identity column`,
			},
			{
				Statement: `CREATE TABLE itest5 (a serial, b text);`,
			},
			{
				Statement:   `ALTER TABLE itest5 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;`,
				ErrorString: `column "a" of relation "itest5" already has a default value`,
			},
			{
				Statement: `ALTER TABLE itest3 ALTER COLUMN a TYPE int;`,
			},
			{
				Statement: `SELECT seqtypid::regtype FROM pg_sequence WHERE seqrelid = 'itest3_a_seq'::regclass;`,
				Results:   []sql.Row{{`integer`}},
			},
			{
				Statement: `\d itest3
                           Table "public.itest3"
 Column |  Type   | Collation | Nullable |             Default              
--------+---------+-----------+----------+----------------------------------
 a      | integer |           | not null | generated by default as identity
 b      | text    |           |          | 
ALTER TABLE itest3 ALTER COLUMN a TYPE text;  -- error`,
				ErrorString: `identity column type must be smallint, integer, or bigint`,
			},
			{
				Statement: `ALTER TABLE itest3
  ADD COLUMN c int GENERATED BY DEFAULT AS IDENTITY,
  ALTER COLUMN c SET GENERATED ALWAYS;`,
			},
			{
				Statement: `\d itest3
                           Table "public.itest3"
 Column |  Type   | Collation | Nullable |             Default              
--------+---------+-----------+----------+----------------------------------
 a      | integer |           | not null | generated by default as identity
 b      | text    |           |          | 
 c      | integer |           | not null | generated always as identity
CREATE TABLE itest6 (a int GENERATED ALWAYS AS IDENTITY, b text);`,
			},
			{
				Statement: `INSERT INTO itest6 DEFAULT VALUES;`,
			},
			{
				Statement: `ALTER TABLE itest6 ALTER COLUMN a SET GENERATED BY DEFAULT SET INCREMENT BY 2 SET START WITH 100 RESTART;`,
			},
			{
				Statement: `INSERT INTO itest6 DEFAULT VALUES;`,
			},
			{
				Statement: `INSERT INTO itest6 DEFAULT VALUES;`,
			},
			{
				Statement: `SELECT * FROM itest6;`,
				Results:   []sql.Row{{1, ``}, {100, ``}, {102, ``}},
			},
			{
				Statement: `SELECT table_name, column_name, is_identity, identity_generation FROM information_schema.columns WHERE table_name = 'itest6' ORDER BY 1, 2;`,
				Results:   []sql.Row{{`itest6`, `a`, `YES`, `BY DEFAULT`}, {`itest6`, `b`, `NO`, ``}},
			},
			{
				Statement:   `ALTER TABLE itest6 ALTER COLUMN b SET INCREMENT BY 2;  -- fail, not identity`,
				ErrorString: `column "b" of relation "itest6" is not an identity column`,
			},
			{
				Statement:   `ALTER SEQUENCE itest6_a_seq OWNED BY NONE;`,
				ErrorString: `cannot change ownership of identity sequence`,
			},
			{
				Statement: `CREATE TABLE itest7 (a int GENERATED ALWAYS AS IDENTITY);`,
			},
			{
				Statement: `INSERT INTO itest7 DEFAULT VALUES;`,
			},
			{
				Statement: `SELECT * FROM itest7;`,
				Results:   []sql.Row{{1}},
			},
			{
				Statement: `CREATE TABLE itest7a (b text) INHERITS (itest7);`,
			},
			{
				Statement: `CREATE TABLE itest7b (a int);`,
			},
			{
				Statement: `CREATE TABLE itest7c (a int GENERATED ALWAYS AS IDENTITY) INHERITS (itest7b);`,
			},
			{
				Statement: `INSERT INTO itest7c DEFAULT VALUES;`,
			},
			{
				Statement: `SELECT * FROM itest7c;`,
				Results:   []sql.Row{{1}},
			},
			{
				Statement: `CREATE TABLE itest7d (a int not null);`,
			},
			{
				Statement: `CREATE TABLE itest7e () INHERITS (itest7d);`,
			},
			{
				Statement: `ALTER TABLE itest7d ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;`,
			},
			{
				Statement:   `ALTER TABLE itest7d ADD COLUMN b int GENERATED ALWAYS AS IDENTITY;  -- error`,
				ErrorString: `cannot recursively add identity column to table that has child tables`,
			},
			{
				Statement: `SELECT table_name, column_name, is_nullable, is_identity, identity_generation FROM information_schema.columns WHERE table_name LIKE 'itest7%' ORDER BY 1, 2;`,
				Results:   []sql.Row{{`itest7`, `a`, `NO`, `YES`, `ALWAYS`}, {`itest7a`, `a`, `NO`, `NO`, ``}, {`itest7a`, `b`, `YES`, `NO`, ``}, {`itest7b`, `a`, `YES`, `NO`, ``}, {`itest7c`, `a`, `NO`, `YES`, `ALWAYS`}, {`itest7d`, `a`, `NO`, `YES`, `ALWAYS`}, {`itest7e`, `a`, `NO`, `NO`, ``}},
			},
			{
				Statement: `ALTER TABLE itest7 ALTER COLUMN a SET GENERATED BY DEFAULT;`,
			},
			{
				Statement: `ALTER TABLE itest7 ALTER COLUMN a RESTART;`,
			},
			{
				Statement: `ALTER TABLE itest7 ALTER COLUMN a DROP IDENTITY;`,
			},
			{
				Statement: `CREATE USER regress_identity_user1;`,
			},
			{
				Statement: `CREATE TABLE itest8 (a int GENERATED ALWAYS AS IDENTITY, b text);`,
			},
			{
				Statement: `GRANT SELECT, INSERT ON itest8 TO regress_identity_user1;`,
			},
			{
				Statement: `SET ROLE regress_identity_user1;`,
			},
			{
				Statement: `INSERT INTO itest8 DEFAULT VALUES;`,
			},
			{
				Statement: `SELECT * FROM itest8;`,
				Results:   []sql.Row{{1, ``}},
			},
			{
				Statement: `RESET ROLE;`,
			},
			{
				Statement: `DROP TABLE itest8;`,
			},
			{
				Statement: `DROP USER regress_identity_user1;`,
			},
			{
				Statement: `CREATE TABLE itest8 (f1 int);`,
			},
			{
				Statement: `ALTER TABLE itest8
  ADD COLUMN f2 int NOT NULL,
  ALTER COLUMN f2 ADD GENERATED ALWAYS AS IDENTITY;`,
			},
			{
				Statement: `ALTER TABLE itest8
  ADD COLUMN f3 int NOT NULL,
  ALTER COLUMN f3 ADD GENERATED ALWAYS AS IDENTITY,
  ALTER COLUMN f3 SET GENERATED BY DEFAULT SET INCREMENT 10;`,
			},
			{
				Statement: `ALTER TABLE itest8
  ADD COLUMN f4 int;`,
			},
			{
				Statement: `ALTER TABLE itest8
  ALTER COLUMN f4 SET NOT NULL,
  ALTER COLUMN f4 ADD GENERATED ALWAYS AS IDENTITY,
  ALTER COLUMN f4 SET DATA TYPE bigint;`,
			},
			{
				Statement: `ALTER TABLE itest8
  ADD COLUMN f5 int GENERATED ALWAYS AS IDENTITY;`,
			},
			{
				Statement: `ALTER TABLE itest8
  ALTER COLUMN f5 DROP IDENTITY,
  ALTER COLUMN f5 DROP NOT NULL,
  ALTER COLUMN f5 SET DATA TYPE bigint;`,
			},
			{
				Statement: `INSERT INTO itest8 VALUES(0), (1);`,
			},
			{
				Statement: `ALTER TABLE itest8
  ADD COLUMN f22 int NOT NULL,
  ALTER COLUMN f22 ADD GENERATED ALWAYS AS IDENTITY;`,
				ErrorString: `column "f22" of relation "itest8" contains null values`,
			},
			{
				Statement: `TABLE itest8;`,
				Results:   []sql.Row{{0, 1, 1, 1, ``}, {1, 2, 11, 2, ``}},
			},
			{
				Statement: `\d+ itest8
                                               Table "public.itest8"
 Column |  Type   | Collation | Nullable |             Default              | Storage | Stats target | Description 
--------+---------+-----------+----------+----------------------------------+---------+--------------+-------------
 f1     | integer |           |          |                                  | plain   |              | 
 f2     | integer |           | not null | generated always as identity     | plain   |              | 
 f3     | integer |           | not null | generated by default as identity | plain   |              | 
 f4     | bigint  |           | not null | generated always as identity     | plain   |              | 
 f5     | bigint  |           |          |                                  | plain   |              | 
\d itest8_f2_seq
                   Sequence "public.itest8_f2_seq"
  Type   | Start | Minimum |  Maximum   | Increment | Cycles? | Cache 
---------+-------+---------+------------+-----------+---------+-------
 integer |     1 |       1 | 2147483647 |         1 | no      |     1
Sequence for identity column: public.itest8.f2
\d itest8_f3_seq
                   Sequence "public.itest8_f3_seq"
  Type   | Start | Minimum |  Maximum   | Increment | Cycles? | Cache 
---------+-------+---------+------------+-----------+---------+-------
 integer |     1 |       1 | 2147483647 |        10 | no      |     1
Sequence for identity column: public.itest8.f3
\d itest8_f4_seq
                       Sequence "public.itest8_f4_seq"
  Type  | Start | Minimum |       Maximum       | Increment | Cycles? | Cache 
--------+-------+---------+---------------------+-----------+---------+-------
 bigint |     1 |       1 | 9223372036854775807 |         1 | no      |     1
Sequence for identity column: public.itest8.f4
\d itest8_f5_seq
DROP TABLE itest8;`,
			},
			{
				Statement: `CREATE TYPE itest_type AS (f1 integer, f2 text, f3 bigint);`,
			},
			{
				Statement:   `CREATE TABLE itest12 OF itest_type (f1 WITH OPTIONS GENERATED ALWAYS AS IDENTITY); -- error`,
				ErrorString: `identity columns are not supported on typed tables`,
			},
			{
				Statement: `DROP TYPE itest_type CASCADE;`,
			},
			{
				Statement: `CREATE TABLE itest_parent (f1 date NOT NULL, f2 text, f3 bigint) PARTITION BY RANGE (f1);`,
			},
			{
				Statement: `CREATE TABLE itest_child PARTITION OF itest_parent (
    f3 WITH OPTIONS GENERATED ALWAYS AS IDENTITY
) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01'); -- error`,
				ErrorString: `identity columns are not supported on partitions`,
			},
			{
				Statement: `DROP TABLE itest_parent;`,
			},
			{
				Statement: `CREATE TABLE itest14 (id serial);`,
			},
			{
				Statement: `ALTER TABLE itest14 ALTER id DROP DEFAULT;`,
			},
			{
				Statement: `ALTER TABLE itest14 ALTER id ADD GENERATED BY DEFAULT AS IDENTITY;`,
			},
			{
				Statement: `INSERT INTO itest14 (id) VALUES (DEFAULT);`,
			},
			{
				Statement:   `CREATE TABLE itest15 (id integer GENERATED ALWAYS AS IDENTITY NULL); -- fail`,
				ErrorString: `conflicting NULL/NOT NULL declarations for column "id" of table "itest15"`,
			},
			{
				Statement:   `CREATE TABLE itest15 (id integer NULL GENERATED ALWAYS AS IDENTITY); -- fail`,
				ErrorString: `conflicting NULL/NOT NULL declarations for column "id" of table "itest15"`,
			},
			{
				Statement: `CREATE TABLE itest15 (id integer GENERATED ALWAYS AS IDENTITY NOT NULL);`,
			},
			{
				Statement: `DROP TABLE itest15;`,
			},
			{
				Statement: `CREATE TABLE itest15 (id integer NOT NULL GENERATED ALWAYS AS IDENTITY);`,
			},
			{
				Statement: `DROP TABLE itest15;`,
			},
			{
				Statement: `CREATE TABLE itest15 (a int GENERATED ALWAYS AS IDENTITY, b text);`,
			},
			{
				Statement: `CREATE TABLE itest16 (a int GENERATED BY DEFAULT AS IDENTITY, b text);`,
			},
			{
				Statement: `MERGE INTO itest15 t
USING (SELECT 10 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) VALUES (s.s_a, s.s_b);`,
				ErrorString: `cannot insert a non-DEFAULT value into column "a"`,
			},
			{
				Statement: `MERGE INTO itest15 t
USING (SELECT 20 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) OVERRIDING USER VALUE VALUES (s.s_a, s.s_b);`,
			},
			{
				Statement: `MERGE INTO itest15 t
USING (SELECT 30 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) OVERRIDING SYSTEM VALUE VALUES (s.s_a, s.s_b);`,
			},
			{
				Statement: `MERGE INTO itest16 t
USING (SELECT 10 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) VALUES (s.s_a, s.s_b);`,
			},
			{
				Statement: `MERGE INTO itest16 t
USING (SELECT 20 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) OVERRIDING USER VALUE VALUES (s.s_a, s.s_b);`,
			},
			{
				Statement: `MERGE INTO itest16 t
USING (SELECT 30 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) OVERRIDING SYSTEM VALUE VALUES (s.s_a, s.s_b);`,
			},
			{
				Statement: `SELECT * FROM itest15;`,
				Results:   []sql.Row{{1, `inserted by merge`}, {30, `inserted by merge`}},
			},
			{
				Statement: `SELECT * FROM itest16;`,
				Results:   []sql.Row{{10, `inserted by merge`}, {1, `inserted by merge`}, {30, `inserted by merge`}},
			},
			{
				Statement: `DROP TABLE itest15;`,
			},
			{
				Statement: `DROP TABLE itest16;`,
			},
		},
	})
}
